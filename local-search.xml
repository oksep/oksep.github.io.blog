<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue+Node::VM 沙盒控制台工具</title>
    <link href="/vue-node-sandbox-console/"/>
    <url>/vue-node-sandbox-console/</url>
    
    <content type="html"><![CDATA[<p>团队内部开发了很多 Web 平台的工具，由于服务端逻辑比较复杂，生产环境上运行的服务涉及到的一些问题，排查起来相对困难，需要进入到当前服务内部查看运行情况</p><p>本文提供一种后门服务：在 NodeJS 服务中包装 Node::VM 沙盒模式，支持远程运行在前端编辑器上编写的代码</p><p><a href="https://github.com/oksep/vue-node-sandbox-console">源代码参考</a></p><span id="more"></span><h1 id="沙盒流程"><a href="#沙盒流程" class="headerlink" title="沙盒流程"></a>沙盒流程</h1><p><img src="/assets/vue_node_sandbox_console_00.svg" alt="figure_0"></p><p>首先前端用 vue 支持了一个代码编辑器，通过 axios api 请求将代码发送到 node server 端，在 vm 执行，然后返回执行结果给前端</p><h2 id="Vue-前端代码"><a href="#Vue-前端代码" class="headerlink" title="Vue 前端代码"></a>Vue 前端代码</h2><p>前端代码比较简单，是基于 vue 技术栈对 CodeEditor 做二次封装 <a href="https://github.com/oksep/vue-node-sandbox-console/blob/master/client/src/views/sandbox.vue">source</a></p><h2 id="Node-后端代码"><a href="#Node-后端代码" class="headerlink" title="Node 后端代码"></a>Node 后端代码</h2><p>后端主要对 node:vm 的封装 <a href="https://github.com/oksep/vue-node-sandbox-console/blob/master/server/src/utils/sandbox.ts">source</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> globalConsole = <span class="hljs-built_in">global</span>.console<br><br><span class="hljs-comment">// 沙盒运行结果封装</span><br><span class="hljs-keyword">const</span> sandboxConsole = <span class="hljs-function">(<span class="hljs-params">level: <span class="hljs-built_in">string</span>, msg: <span class="hljs-built_in">any</span>, ...args: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.result += <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()&#125;</span> <span class="hljs-subst">$&#123;level&#125;</span>:\n<span class="hljs-subst">$&#123;msg&#125;</span>`</span><br>    args.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> item !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>            <span class="hljs-built_in">console</span>.result += <span class="hljs-string">` <span class="hljs-subst">$&#123;item&#125;</span>`</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.result += <span class="hljs-string">` <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(item)&#125;</span>`</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.result += <span class="hljs-string">&#x27;\n\n&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 沙盒日志</span><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">console</span>: &#123; <span class="hljs-attr">result</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">log</span>: <span class="hljs-built_in">Function</span>, <span class="hljs-attr">warn</span>: <span class="hljs-built_in">Function</span>, <span class="hljs-attr">error</span>: <span class="hljs-built_in">Function</span> &#125; = &#123;<br>    <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">log</span>: <span class="hljs-function">(<span class="hljs-params">msg: <span class="hljs-built_in">any</span>, ...args: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> &#123;<br>        globalConsole.log(<span class="hljs-string">&#x27;Sandbox console&#x27;</span>, msg, ...args)<br>        sandboxConsole(<span class="hljs-string">&#x27;debug&#x27;</span>, msg, ...args)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// vm 主要封装</span><br><span class="hljs-comment">// sandbox:any 是提供给前端允许调用的模块</span><br><span class="hljs-comment">// code 需要执行的代码</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">executeCodeInSandbox</span>(<span class="hljs-params">sandbox: <span class="hljs-built_in">any</span>, code?: <span class="hljs-built_in">string</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!code || code.trim().length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Nothing executed.&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 结构化代码</span><br>    <span class="hljs-keyword">const</span> slices = code.trim().split(<span class="hljs-regexp">/\r?\n/</span>)<br>        .map(<span class="hljs-function">(<span class="hljs-params">l: <span class="hljs-built_in">string</span>, i: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> l.trimEnd()<br>        &#125;)<br>        .filter(<span class="hljs-function">(<span class="hljs-params">l: <span class="hljs-built_in">string</span>, i: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[A-Za-z0-9&#123;&#125;(&amp;|]/</span>.test(l.trimStart())<br>        &#125;)<br>    <span class="hljs-keyword">if</span> (slices.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Nothing executed.&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (slices.length == <span class="hljs-number">1</span>) &#123;<br>        code = slices[<span class="hljs-number">0</span>]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        code = slices.reduce(<span class="hljs-function">(<span class="hljs-params">p: <span class="hljs-built_in">string</span>, c: <span class="hljs-built_in">string</span>, i: <span class="hljs-built_in">number</span>, a: <span class="hljs-built_in">string</span>[]</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;p&#125;</span>\n    <span class="hljs-subst">$&#123;c&#125;</span>`</span><br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 对要调用的代码做一层安全包装，同时在执行前打开 DB，以便支持数据库查询操作</span><br>    <span class="hljs-keyword">let</span> wrapCode = <span class="hljs-string">`globalConsole.log(&#x27;VM exec in process:&#x27;, process.pid, process.title)</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">    console.result = &#x27;&#x27;</span><br><span class="hljs-string">    await connectDBAsync()</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;code&#125;</span></span><br><span class="hljs-string">    await disconnectDBAsync()</span><br><span class="hljs-string">    inject(console.result)</span><br><span class="hljs-string">&#125; catch (e) &#123;</span><br><span class="hljs-string">    inject(e)</span><br><span class="hljs-string">&#125;`</span><br><br>    <span class="hljs-built_in">console</span>.log(wrapCode);<br><br>    <span class="hljs-comment">// 在 node:vm 中执行 code</span><br>    <span class="hljs-keyword">await</span> (<span class="hljs-keyword">async</span> (code: <span class="hljs-built_in">string</span>) =&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> script: Script = <span class="hljs-keyword">new</span> vm.Script(<span class="hljs-string">`(async()=&gt;&#123;<span class="hljs-subst">$&#123;code&#125;</span>&#125;)()`</span>)<br>            <span class="hljs-keyword">const</span> options: RunningScriptOptions = &#123;<br>                <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>                <span class="hljs-attr">displayErrors</span>: <span class="hljs-literal">true</span>,<br>            &#125;<br>            <span class="hljs-keyword">const</span> context: Context = vm.createContext(&#123;<br>                ...sandbox,<br>                <span class="hljs-built_in">console</span>,<br>                globalConsole,<br>                process,<br>                connectDBAsync,<br>                disconnectDBAsync,<br>                <span class="hljs-attr">inject</span>: <span class="hljs-function">(<span class="hljs-params">result: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>                    sandbox.result = result<br>                    resolve(result)<br>                &#125;<br>            &#125;)<br>            script.runInContext(context, options)<br>        &#125;)<br>    &#125;)(wrapCode)<br><br>    <span class="hljs-comment">// 返回代码执行结果</span><br>    <span class="hljs-keyword">return</span> sandbox.result <span class="hljs-comment">// util.inspect(sandbox.result)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Koa 路由接收 http 请求</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa-router&#x27;</span><br><span class="hljs-keyword">import</span> Koa <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;koa&quot;</span><br><span class="hljs-keyword">import</span> executeCodeInSandbox <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/sandbox&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getUserByEmail &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../db/userDao&#x27;</span>;<br><br><br><span class="hljs-comment">// modules which register in sandboxEnv, the code can reference only !!!</span><br><span class="hljs-keyword">const</span> sandboxEnv: <span class="hljs-built_in">any</span> = &#123;<br>    <span class="hljs-built_in">require</span>,<br>    getUserByEmail<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sandboxRouter: Router = <span class="hljs-keyword">new</span> Router()<br><br>sandboxRouter.post(<span class="hljs-string">&#x27;execute-code&#x27;</span>, <span class="hljs-string">&#x27;/execute-code&#x27;</span>, <span class="hljs-keyword">async</span> (ctx: Koa.Context) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; codeData &#125; = ctx.request.body <span class="hljs-keyword">as</span> &#123; codeData?: <span class="hljs-built_in">string</span> &#125;<br>    <span class="hljs-keyword">let</span> result: <span class="hljs-built_in">any</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sandbox exec start...\n&#x27;</span>, codeData)<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = <span class="hljs-keyword">await</span> executeCodeInSandbox(&#123; ...sandboxEnv &#125;, codeData)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>            result = <span class="hljs-string">`<span class="hljs-subst">$&#123;result&#125;</span>`</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e: <span class="hljs-built_in">any</span>) &#123;<br>        result = e.stack ? e.stack : <span class="hljs-string">`<span class="hljs-subst">$&#123;e&#125;</span>`</span><br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;sandbox exec error&#x27;</span>, result)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sandbox exec end...\n&#x27;</span>, result)<br>    ctx.body = &#123;<br>        <span class="hljs-attr">result</span>: result<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这里需要注意, server 端可以将 sandboxEnv(utils/daos 等模块) 注册到了沙盒 vm context 中，只有注册到沙盒中的模块，前端代码才能够调用的到！</p><p>在前端代码编辑器中编写代码查看运行效果:</p><p><img src="/assets/vue_node_sandbox_console_01.jpg" alt="figure_1"></p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sandbox</tag>
      
      <tag>vue</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让 Clean 拯救大型项目</title>
    <link href="/android-mvvm-with-clean/"/>
    <url>/android-mvvm-with-clean/</url>
    
    <content type="html"><![CDATA[<p>本文旨在把 MVVM 与 Clean 架构结合起来，指导我们怎样使用此架构来编写解耦、可测试和可维护的代码。</p><span id="more"></span><h2 id="为啥要把-Clean-和-MVVM-结合起来"><a href="#为啥要把-Clean-和-MVVM-结合起来" class="headerlink" title="为啥要把 Clean 和 MVVM 结合起来"></a>为啥要把 Clean 和 MVVM 结合起来</h2><p>MVVM 旨在把视图（Activity / Fragments）和业务逻辑（ViewModel）拆分出来，这对小型项目已经足够了，但随着代码的增长，ViewModel 会逐渐变得臃肿庞大，对业务逻辑进行职责分离会变得越发吃力。</p><p>在这种情况下，MVVM 结合 Clean Architecture 便登场了，它进一步分离了代码的职责，明确地抽象了程序执行的操作逻辑。</p><p>注意：其实也可以将 Clean Architecture 与 model-view-presenter (MVP) 架构结合起来。但由于 Android Jetpack 已经提供了内置的 ViewModel，因此我们将使用 MVVM 而不是 MVP。</p><h2 id="使用-Clean-带来的优势"><a href="#使用-Clean-带来的优势" class="headerlink" title="使用 Clean 带来的优势"></a>使用 Clean 带来的优势</h2><ul><li>代码进一步解耦（最大的优势）</li><li>比 MVVM 更容易测试</li><li>包结构导航变得容易</li><li>工程容易维护</li><li>可以更快的添加新 features</li></ul><h2 id="Clean-架构带来的缺点"><a href="#Clean-架构带来的缺点" class="headerlink" title="Clean 架构带来的缺点"></a>Clean 架构带来的缺点</h2><ul><li>稍微陡峭的学习曲线，所有层如何协同工作可能需要一些时间来理解，特别是如果我们之前基于简单的 MVVM or MVP 模式。</li><li>添加了很多额外的类，这对于低复杂度的项目来说并不理想。</li></ul><p><img src="/assets/android-mvvm-with-clean/01.svg" alt="data flow"></p><p>接下来举个例子，允许用户创建新帖子并查看他们创建的帖子列表。为了简单起见，示例中没有使用其他库（如 Hilt、Coroutine 等）。</p><p>具有简洁架构的 MVVM 各层，代码分为三个独立的层：</p><ul><li>展示层 Present Layer</li><li>领域层 Domain Layer</li><li>数据层 Data Layer</li></ul><p>下面详细介绍每一层。目前，例子中生成的包结构如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── UseCase.kt<br>├── UseCaseHandler.kt<br>├── UseCasesScheduler.kt<br>├── UseCasesThreadPoolScheduler.kt<br>├── data<br>│   ├── model<br>│   │   └── Post.kt<br>│   └── source<br>│       ├── PostDataRepository.kt<br>│       ├── PostDataSource.kt<br>│       ├── local<br>│       │   └── LocalDataSource.kt<br>│       └── remote<br>│           └── RemoteDataSource.kt<br>├── ui<br>│   ├── domain<br>│   │   ├── GetPosts.kt<br>│   │   └── SavePost.kt<br>│   └── postlist<br>│       ├── PostListActivity.kt<br>│       ├── PostListAdapter.kt<br>│       └── PostListViewModel.kt<br>└── utils<br>    ├── Injection.kt<br>    └── ViewModelFactory.kt<br></code></pre></td></tr></table></figure><p>其实还有很多方法来构建文件/文件夹层次结构。平时更偏好根据功能对项目文件进行分组。这样简洁明了。</p><h2 id="Present-Layer"><a href="#Present-Layer" class="headerlink" title="Present Layer"></a>Present Layer</h2><p><strong>Present Layer</strong> 包括 <code>Activity</code>、<code>Fragment</code> 和 <code>ViewModel</code>。其中 <code>Activity</code> 应该尽可能单一。永远不要将业务逻辑放在 <code>Activity</code> 当中。<br><code>Activity</code> 与 <code>ViewModel</code> 会话，<code>ViewModel</code> 将与 <strong>Domain Layer</strong> 执行操作。 <code>ViewModel</code> 从不直接与 <code>Data Layer</code> 会话。<br>这里将一个 <code>UseCaseHandler</code> 和两个 <code>UseCases</code> 传递给的 <code>ViewModel</code>。在这个架构中，<code>UseCase</code> 是一个定义 <code>ViewModel</code> 如何与数据层交互的操作。</p><p>代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostListViewModel</span></span>(<br>    <span class="hljs-keyword">val</span> useCaseHandler: UseCaseHandler,<br>    <span class="hljs-keyword">val</span> getPosts: GetPosts,<br>    <span class="hljs-keyword">val</span> savePost: SavePost<br>): ViewModel() &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAllPosts</span><span class="hljs-params">(userId: <span class="hljs-type">Int</span>, callback: <span class="hljs-type">PostDataSource</span>.<span class="hljs-type">LoadPostsCallback</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> requestValue = GetPosts.RequestValues(userId)<br>        useCaseHandler.execute(<br>            getPosts, <br>            requestValue, <br>            <span class="hljs-keyword">object</span> : UseCase.UseCaseCallback&lt;GetPosts.ResponseValue&gt; &#123;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(response: <span class="hljs-type">GetPosts</span>.<span class="hljs-type">ResponseValue</span>)</span></span> &#123;<br>                    callback.onPostsLoaded(response.posts)<br>                &#125;<br><br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>                    callback.onError(t)<br>                &#125;<br>            &#125;<br>        )<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">savePost</span><span class="hljs-params">(post: <span class="hljs-type">Post</span>, callback: <span class="hljs-type">PostDataSource</span>.<span class="hljs-type">SaveTaskCallback</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> requestValues = SavePost.RequestValues(post)<br>        useCaseHandler.execute(<br>            savePost, <br>            requestValues, <br>            <span class="hljs-keyword">object</span> : UseCase.UseCaseCallback&lt;SavePost.ResponseValue&gt; &#123;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(response: <span class="hljs-type">SavePost</span>.<span class="hljs-type">ResponseValue</span>)</span></span> &#123;<br>                    callback.onSaveSuccess()<br>                &#125;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>                    callback.onError(t)<br>                &#125;<br>            &#125;<br>        )<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Domain-Layer"><a href="#Domain-Layer" class="headerlink" title="Domain Layer"></a>Domain Layer</h2><p><strong>Domain Layer</strong> 包含应用程序的所有用例。在此示例中，有 <code>UseCase</code>，一个抽象类。所有的 <code>UseCase</code> 都将扩展这个类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UseCase</span>&lt;<span class="hljs-type">Q : UseCase.RequestValues, P : UseCase.ResponseValue</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">var</span> requestValues: Q? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">var</span> useCaseCallback: UseCaseCallback&lt;P&gt;? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">internal</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;<br>        executeUseCase(requestValues)<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">executeUseCase</span><span class="hljs-params">(requestValues: <span class="hljs-type">Q</span>?)</span></span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Data passed to a request.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RequestValues</span></span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Data received from a request.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ResponseValue</span></span><br><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UseCaseCallback</span>&lt;<span class="hljs-type">R</span>&gt; </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(response: <span class="hljs-type">R</span>)</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UseCaseHandler</code> 处理 <code>UseCase</code> 的执行。当从数据库或远程服务器获取数据时，不应该阻塞 UI。这是决定在后台线程上执行 <code>UseCase</code> 并在主线程上接收响应的地方。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UseCaseHandler</span></span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mUseCaseScheduler: UseCaseScheduler) &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T : UseCase.RequestValues, R : UseCase.ResponseValue&gt;</span> <span class="hljs-title">execute</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            useCase: <span class="hljs-type">UseCase</span>&lt;<span class="hljs-type">T</span>, R&gt;, values: <span class="hljs-type">T</span>, callback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">R</span>&gt;)</span></span> &#123;<br>        useCase.requestValues = values<br>        useCase.useCaseCallback = UiCallbackWrapper(callback, <span class="hljs-keyword">this</span>)<br>        mUseCaseScheduler.execute(Runnable &#123;<br>            useCase.run()<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">notifyResponse</span><span class="hljs-params">(response: <span class="hljs-type">V</span>, useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;)</span></span> &#123;<br>        mUseCaseScheduler.notifyResponse(response, useCaseCallback)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">notifyError</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>        mUseCaseScheduler.onError(useCaseCallback, t)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UiCallbackWrapper</span>&lt;<span class="hljs-type">V : UseCase.ResponseValue</span>&gt;</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mCallback: UseCase.UseCaseCallback&lt;V&gt;,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mUseCaseHandler: UseCaseHandler) : UseCase.UseCaseCallback&lt;V&gt; &#123;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(response: <span class="hljs-type">V</span>)</span></span> &#123;<br>            mUseCaseHandler.notifyResponse(response, mCallback)<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>            mUseCaseHandler.notifyError(mCallback, t)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> INSTANCE: UseCaseHandler? = <span class="hljs-literal">null</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>: UseCaseHandler &#123;<br>            <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123;<br>                INSTANCE = UseCaseHandler(UseCaseThreadPoolScheduler())<br>            &#125;<br>            <span class="hljs-keyword">return</span> INSTANCE!!<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>顾名思义，<code>GetPosts</code>, <code>UseCase</code> 负责获取用户的所有帖子。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetPosts</span></span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mDataSource: PostDataSource) :<br>UseCase&lt;GetPosts.RequestValues, GetPosts.ResponseValue&gt;() &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">executeUseCase</span><span class="hljs-params">(requestValues: <span class="hljs-type">GetPosts</span>.<span class="hljs-type">RequestValues</span>?)</span></span> &#123;<br>        mDataSource.getPosts(<br>            requestValues?.userId ?: -<span class="hljs-number">1</span>, <br>            <span class="hljs-keyword">object</span> : PostDataSource.LoadPostsCallback &#123;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPostsLoaded</span><span class="hljs-params">(posts: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Post</span>&gt;)</span></span> &#123;<br>                    <span class="hljs-keyword">val</span> responseValue = ResponseValue(posts)<br>                    useCaseCallback?.onSuccess(responseValue)<br>                &#125;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>                    useCaseCallback?.onError(Throwable(<span class="hljs-string">&quot;Data not found&quot;</span>))<br>                &#125;<br>            &#125;<br>        )<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestValues</span></span>(<span class="hljs-keyword">val</span> userId: <span class="hljs-built_in">Int</span>) : UseCase.RequestValues<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseValue</span></span>(<span class="hljs-keyword">val</span> posts: List&lt;Post&gt;) : UseCase.ResponseValue<br>&#125;<br></code></pre></td></tr></table></figure><p>用例 <code>UseCase</code> 的目的是成为 <code>ViewModel</code> 和 <code>Repository</code> 之间的中介。</p><p>假设将来决定添加 “编辑帖子” 功能。所要做的就是添加一个新的 <code>EditPost</code> <code>UseCase</code>，它的所有代码将与其他 <code>UseCase</code> 完全分离和解耦。引入新功能，但无意中破坏了现有代码中的某些内容。创建一个单独的 <code>UseCase</code> 有助于极大地避免这种情况。</p><p>当然，无法 100% 消除这种可能性，但肯定可以将其最小化。这就是 Clean 架构与其他模式的区别：代码如此解耦，以至于可以将每一层视为黑匣子。</p><h2 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h2><p>该层向外部类公开数据源 API：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PostDataSource</span> </span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LoadPostsCallback</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPostsLoaded</span><span class="hljs-params">(posts: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Post</span>&gt;)</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SaveTaskCallback</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSaveSuccess</span><span class="hljs-params">()</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(userId: <span class="hljs-type">Int</span>, callback: <span class="hljs-type">LoadPostsCallback</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">savePost</span><span class="hljs-params">(post: <span class="hljs-type">Post</span>)</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PostDataRepository</code> 实现 <code>PostDataSource</code>。它决定是从本地数据库还是远程服务器获取数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostDataRepository</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span></span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> localDataSource: PostDataSource,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> remoteDataSource: PostDataSource<br>): PostDataSource &#123;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> INSTANCE: PostDataRepository? = <span class="hljs-literal">null</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">(localDataSource: <span class="hljs-type">PostDataSource</span>, remoteDataSource: <span class="hljs-type">PostDataSource</span>)</span></span>: PostDataRepository &#123;<br>            <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123;<br>                INSTANCE = PostDataRepository(localDataSource, remoteDataSource)<br>            &#125;<br>            <span class="hljs-keyword">return</span> INSTANCE!!<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> isCacheDirty = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(userId: <span class="hljs-type">Int</span>, callback: <span class="hljs-type">PostDataSource</span>.<span class="hljs-type">LoadPostsCallback</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (isCacheDirty) &#123;<br>            getPostsFromServer(userId, callback)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            localDataSource.getPosts(userId, <span class="hljs-keyword">object</span> : PostDataSource.LoadPostsCallback &#123;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPostsLoaded</span><span class="hljs-params">(posts: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Post</span>&gt;)</span></span> &#123;<br>                    refreshCache()<br>                    callback.onPostsLoaded(posts)<br>                &#125;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>                    getPostsFromServer(userId, callback)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">savePost</span><span class="hljs-params">(post: <span class="hljs-type">Post</span>)</span></span> &#123;<br>        localDataSource.savePost(post)<br>        remoteDataSource.savePost(post)<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getPostsFromServer</span><span class="hljs-params">(userId: <span class="hljs-type">Int</span>, callback: <span class="hljs-type">PostDataSource</span>.<span class="hljs-type">LoadPostsCallback</span>)</span></span> &#123;<br>        remoteDataSource.getPosts(userId, <span class="hljs-keyword">object</span> : PostDataSource.LoadPostsCallback &#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPostsLoaded</span><span class="hljs-params">(posts: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Post</span>&gt;)</span></span> &#123;<br>                refreshCache()<br>                refreshLocalDataSource(posts)<br>                callback.onPostsLoaded(posts)<br>            &#125;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>                callback.onError(t)<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">refreshLocalDataSource</span><span class="hljs-params">(posts: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Post</span>&gt;)</span></span> &#123;<br>        posts.forEach &#123;<br>            localDataSource.savePost(it)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">refreshCache</span><span class="hljs-params">()</span></span> &#123;<br>        isCacheDirty = <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类有两个变量：<code>localDataSource</code> 和<code>remoteDataSource</code>。它们的类型是 <code>PostDataSource</code>，所以不用关心它们实际上是如何实现的。</p><p>如果想要调整远程数据源，所要做的就是更改 <code>RemoteDataSource</code> 中的实现。这样不必接触任何其他类。这就是解耦代码的优点。更改任何给定的类不应影响代码的其他部分。</p><p>另外还有一些额外的类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UseCaseScheduler</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">(runnable: <span class="hljs-type">Runnable</span>)</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">notifyResponse</span><span class="hljs-params">(response: <span class="hljs-type">V</span>, useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;)</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">onError</span><span class="hljs-params">(useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UseCaseThreadPoolScheduler</span> : <span class="hljs-type">UseCaseScheduler &#123;</span></span><br><br>    <span class="hljs-keyword">val</span> POOL_SIZE = <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">val</span> MAX_POOL_SIZE = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">val</span> TIMEOUT = <span class="hljs-number">30</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mHandler = Handler()<br><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">var</span> mThreadPoolExecutor: ThreadPoolExecutor<br><br>    <span class="hljs-keyword">init</span> &#123;<br>        mThreadPoolExecutor = ThreadPoolExecutor(<br>            POOL_SIZE, MAX_POOL_SIZE, <br>            TIMEOUT.toLong(),<br>            TimeUnit.SECONDS, <br>            ArrayBlockingQueue(POOL_SIZE)<br>        )<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">(runnable: <span class="hljs-type">Runnable</span>)</span></span> &#123;<br>        mThreadPoolExecutor.execute(runnable)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">notifyResponse</span><span class="hljs-params">(response: <span class="hljs-type">V</span>, useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;)</span></span> &#123;<br>        mHandler.post &#123; useCaseCallback.onSuccess(response) &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;V : UseCase.ResponseValue&gt;</span> <span class="hljs-title">onError</span><span class="hljs-params">(useCaseCallback: <span class="hljs-type">UseCase</span>.<span class="hljs-type">UseCaseCallback</span>&lt;<span class="hljs-type">V</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>        mHandler.post &#123; useCaseCallback.onError(t) &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>UseCaseThreadPoolScheduler</code> 负责使用 <code>ThreadPoolExecuter</code> 异步执行任务。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewModelFactory</span> : <span class="hljs-type">ViewModelProvider.Factory &#123;</span></span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T : ViewModel&gt;</span> <span class="hljs-title">create</span><span class="hljs-params">(modelClass: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T &#123;<br>        <span class="hljs-keyword">if</span> (modelClass == PostListViewModel::<span class="hljs-keyword">class</span>.java) &#123;<br>            <span class="hljs-keyword">return</span> PostListViewModel(<br>                Injection.provideUseCaseHandler(), <br>                Injection.provideGetPosts(), <br>                Injection.provideSavePost()<br>            ) <span class="hljs-keyword">as</span> T<br>        &#125;<br>        <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;unknown model class <span class="hljs-variable">$modelClass</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> INSTANCE: ViewModelFactory? = <span class="hljs-literal">null</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>: ViewModelFactory &#123;<br>            <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123;<br>                INSTANCE = ViewModelFactory()<br>            &#125;<br>            <span class="hljs-keyword">return</span> INSTANCE!!<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ViewModelFactory</code> 负责创建 <code>ViewModel</code> 构造函数中传递必要的参数。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>再用一个例子来解释依赖注入。查看 <code>PostDataRepository</code> 类，它有两个依赖项：<code>LocalDataSource</code> 和 <code>RemoteDataSource</code>。使用 <code>Injection</code> 类向 <code>PostDataRepository</code> 类提供这些依赖项。</p><p>注入依赖有两个主要优点。</p><ul><li>一是可以从一个中心位置控制对象的实例化，而不是将其分散到整个代码库。</li><li>另一个原因是，这将帮助我们为 <code>PostDataRepository</code> 编写单元测试，因为只需将 <code>LocalDataSource</code> 和 <code>RemoteDataSource</code> 的 Mock 版本传递给 <code>PostDataRepository</code> 构造函数而不是实际值。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Injection &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">providePostDataRepository</span><span class="hljs-params">()</span></span>: PostDataRepository &#123;<br>        <span class="hljs-keyword">return</span> PostDataRepository.getInstance(provideLocalDataSource(), provideRemoteDataSource())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideViewModelFactory</span><span class="hljs-params">()</span></span> = ViewModelFactory.getInstance()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideLocalDataSource</span><span class="hljs-params">()</span></span>: PostDataSource = LocalDataSource.getInstance()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideRemoteDataSource</span><span class="hljs-params">()</span></span>: PostDataSource = RemoteDataSource.getInstance()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideGetPosts</span><span class="hljs-params">()</span></span> = GetPosts(providePostDataRepository())<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideSavePost</span><span class="hljs-params">()</span></span> = SavePost(providePostDataRepository())<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">provideUseCaseHandler</span><span class="hljs-params">()</span></span> = UseCaseHandler.getInstance()<br>&#125;<br></code></pre></td></tr></table></figure><p>强烈建议使用 Hilt，超出了本文范围，可以参考<a href="https://dagger.dev/hilt/">这里</a></p><h3 id="MVVM-结合-Clean：牢固的组合"><a href="#MVVM-结合-Clean：牢固的组合" class="headerlink" title="MVVM 结合 Clean：牢固的组合"></a>MVVM 结合 Clean：牢固的组合</h3><p>这个案例的目的是了解具有 Clean 架构的 MVVM，因此跳过了一些可以尝试进一步改进的内容：</p><ul><li>使用 Coroutine 删除回调并使其更加整洁。</li><li>使用 Flow 来表示 UI。</li><li>使用 Hilt 注入依赖项。</li></ul><p>这就是 Android 应用程序最好、最具可扩展性的架构之一！</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS 上编译安装 OpenCV 的来龙去脉</title>
    <link href="/cmake-complie-opencv-on-mac/"/>
    <url>/cmake-complie-opencv-on-mac/</url>
    
    <content type="html"><![CDATA[<p>本文讲解在 MacOS 上编译安装 OpenCV 源码的来龙去脉, 以对 cmake 在实战上有更多的了解</p><span id="more"></span><h1 id="下载构建"><a href="#下载构建" class="headerlink" title="下载构建"></a>下载构建</h1><p>下载 opencv / opencv_contrib 源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir opencv-tmp &amp;&amp; cd opencv-tmp<br>git clone https://github.com/opencv/opencv_contrib.git aa --depth=1 -b 4.9.0<br>git clone https://github.com/opencv/opencv.git aa --depth=1 -b 4.9.0<br></code></pre></td></tr></table></figure><p>构建 cmake</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建构建目录</span><br>mkdir build-opencv-4.9.0 &amp;&amp; cd build-opencv-4.9.0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 构建 cmake</span><br>cmake CMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DOPENCV_GENERATE_PKGCONFIG=ON -DCMAKE_INSTALL_PREFIX=/usr/local/ -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ../opencv<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用 make 同时开启 8个 job 进行编译</span><br>make -j8<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装 opencv</span><br>make install<br></code></pre></td></tr></table></figure><p>对于 cmake 的构建参数有:</p><ul><li><code>CMAKE_BUILD_TYPE=Release</code> 构建 release 版本</li><li><code>-BDBUILD_EXAMPLES=on</code> 同时构建 exmaples</li><li><code>-BOPENCV_GENERATE_PKGCONFIG=ON</code> 生成 <a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config</a> 相关文件</li><li><code>-DCMAKE_INSTALL_PREFIX=/usr/local/</code> OpenCV 相关库安装在 <em>/usr/local/</em> 中</li><li><code>-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules</code> 同时安装三方扩展库</li></ul><h1 id="安装文件分析"><a href="#安装文件分析" class="headerlink" title="安装文件分析"></a>安装文件分析</h1><p>OpenCV 和 OpenCV Contrib 相关动态库都会被安装在 <em>/usr/local/lib</em> 路径下: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/lib &gt; tree -L 1<br>.<br>├── cmake <br>├── libopencv_aruco.4.9.0.dylib<br>├── libopencv_aruco.409.dylib -&gt; libopencv_aruco.4.9.0.dylib<br>├── libopencv_aruco.dylib -&gt; libopencv_aruco.409.dylib<br>├── ...<br>├── ...<br>├── ...<br>├── libopencv_xphoto.dylib -&gt; libopencv_xphoto.409.dylib<br>└── pkgconfig<br></code></pre></td></tr></table></figure><p>OpenCV 的 cmake 相关配置文件生成在:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/lib/cmake/opencv4 &gt; tree - L 1<br>.<br>├── OpenCVConfig-version.cmake<br>├── OpenCVConfig.cmake<br>├── OpenCVModules-release.cmake<br>└── OpenCVModules.cmake<br></code></pre></td></tr></table></figure><p>OpenCV 的 <a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config</a> 配置文件生成在:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/lib/pkgconfig &gt; tree -L 1<br>.<br>└── opencv4.pc<br></code></pre></td></tr></table></figure><h1 id="如何找到-OpenCV-库"><a href="#如何找到-OpenCV-库" class="headerlink" title="如何找到 OpenCV 库"></a>如何找到 OpenCV 库</h1><p>下面举个例子, 我们来创建一个 sample 工程, 讲解 sample 工程中的 CMakeLists.txt 是如何找到并引用到 OpenCV 相关库的</p><p>创建 opencv-sample 工程, 有以下文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree -L 1<br>.<br>├── CMakeLists.txt<br>├── main.cpp<br>└── test.png<br></code></pre></td></tr></table></figure><p>配置 CMakeLists.txt:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake_minimum_required(VERSION 3.25)  <br>project(demo)  <br>  <br>set(CMAKE_CXX_STANDARD 17)  <br>  <br>find_package(OpenCV REQUIRED)  <br><span class="hljs-meta">include_directories($</span><span class="bash">&#123;OpenCV_INCLUDE_DIRS&#125;)</span>  <br>add_executable(demo main.cpp)  <br>target_link_libraries(demo $&#123;OpenCV_LIBS&#125;)<br><br>message(STATUS &quot;OpenCV_DIR: $&#123;OpenCV_DIR&#125;&quot;)<br>message(STATUS &quot;OpenCV_VERSION: $&#123;OpenCV_VERSION&#125;&quot;)<br>message(STATUS &quot;OpenCV_INCLUDE_DIRS: $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;)<br>message(STATUS &quot;OpenCV_LIBS: $&#123;OpenCV_LIBS&#125;&quot;)<br></code></pre></td></tr></table></figure><p>这里重点解释下 sample 工程怎么找到 OpenCV 相关库的:</p><ul><li><code>find_package(OpenCV REQUIRED)</code> 告诉 cmake 在 <em>/usr/local/lib/cmake/opencv4</em> 查找并读取相关 .cmake 文件</li><li><code>include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)</code> 包含 OpenCV 相关头文件</li><li><code>target_link_libraries(demo $&#123;OpenCV_LIBS&#125;)</code> 链接 OpenCV 库</li></ul><p>OpenCV_INCLUDE_DIRS 和 OpenCV_LIBS 是固定写法: </p><ul><li>{XXX}_INCLUDE_DIRS</li><li>{XXX}_LIBS</li></ul><p>cmake 在查找并读取相关 .cmake 文件时, 会给以上环境变量赋值:</p><p><img src="/assets/cmake_complie_opencv_on_mac_01.jpg" alt="OpenCVConfig.cmake"></p><p>main.cpp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;filesystem&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string testImgPath = std::filesystem::<span class="hljs-built_in">current_path</span>().<span class="hljs-built_in">generic_string</span>() + <span class="hljs-string">&quot;/test.png&quot;</span>;  <br>Mat image = <span class="hljs-built_in">imread</span>(testImgPath);  <br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;demo&quot;</span>, image);  <br><span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>构建执行:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">cd opencv-sample<br>cmake . -B <span class="hljs-keyword">build</span>-ninja -GNinja<br>cmake --<span class="hljs-keyword">build</span> <span class="hljs-keyword">build</span>-ninja<br>./<span class="hljs-keyword">build</span>-ninja/demo<br></code></pre></td></tr></table></figure><p>会出现展示测试图片的弹窗:<br><img src="/assets/cmake_complie_opencv_on_mac_00.jpg" alt="test.png"></p><!-- 参考:- https://docs.opencv.org/4.x/db/df5/tutorial_linux_gcc_cmake.html- https://github.com/BrightXiaoHan/CMakeTutorial/blob/master/FindPackage/README.md -->]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文搞懂 CMake</title>
    <link href="/cmake-one-shot/"/>
    <url>/cmake-one-shot/</url>
    
    <content type="html"><![CDATA[<p>快速入门 camke, 掌握 cmake 在 c/c++ 项目构建上魅力</p><span id="more"></span><h1 id="认识-CMake"><a href="#认识-CMake" class="headerlink" title="认识 CMake"></a>认识 CMake</h1><p><img src="/assets/cmake-one-shot-00.svg" alt="编译 c/c++ 项目的工具迭代"></p><p>通过上图我们可以大致了解到: cmake 是一个跨平台项目构建工具, 通过 <code>cmake</code> 命令, 可以将讲简单的工程配置描述文件 CMakeFiles.txt (即指令合集) 构建成 makefile 文件，帮我们省去编写繁杂的 makefile, 然后在通过 <code>make</code> 命令将源代码编译成目标文件</p><p>使用 cmake 工具, 首先需要安装 cmake 到本地环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install cmake<br></code></pre></td></tr></table></figure><p>安装好后, 接下来我们结合工程示例 <a href="https://github.com/oksep/cmake-begin">https://github.com/oksep/cmake-begin</a> ，逐一讲解 cmake 相关概念</p><h2 id="简单工程"><a href="#简单工程" class="headerlink" title="简单工程"></a>简单工程</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v1_basic">v1_basic</a>, 项目有如下文件结构:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── CMakeLists.txt<br>├── include<br>│   └── head.h<br>└── src<br>    ├── add.cpp<br>    ├── div.cpp<br>    ├── main.cpp<br>    ├── mult.cpp<br>    └── sub.cpp<br></code></pre></td></tr></table></figure><p>我们主要讲解 CMakeLists.txt 每个指令的含义(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 配置 cmake 最低版本</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><br><span class="hljs-comment"># 指定 C++ 编译标准, set 可以配置预定义宏, 也可以新增变量并赋值</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment"># 配置项目名称</span><br><span class="hljs-keyword">project</span>(CALC)<br><br><span class="hljs-comment"># 配置可执行文件输出路径</span><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-comment"># 搜索指定目录的文件, 将得到的文件列表赋值给 SRC_LIST</span><br><span class="hljs-comment"># 搜索文件有两种方式: aux_source_directory() 和 file()</span><br><span class="hljs-comment"># 其中 CMAKE_CURRENT_SOURCE_DIR 为预定义宏, 表示当前文件路径</span><br><span class="hljs-comment"># aux_source_directory(./src SRC_LIST)</span><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)<br><span class="hljs-keyword">file</span>(GLOB HEAD_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>/*.h)<br><br><span class="hljs-comment"># 指定头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># 将源文件 SRC_LIST 编译为可执行文件 app</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><p>执行 <code>cmake . -B ./build</code> 命令<br>cmake 会读取 CMakeLists.txt 的相关指令, 在 build 文件夹下生成以下构建文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">build<br>├── CMakeCache.txt<br>├── CMakeFiles<br>├── Makefile<br>└── cmake_install.cmake<br></code></pre></td></tr></table></figure><p>执行构建命令 <code>cmake --build build</code>, 生成目标文件<br>这里实际上是执行了 make 命令的相关操作, 等价于 <code>cd build &amp;&amp; make</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ 16%] Building CXX object CMakeFiles/app.dir/src/add.cpp.o<br>[ 33%] Building CXX object CMakeFiles/app.dir/src/div.cpp.o<br>[ 50%] Building CXX object CMakeFiles/app.dir/src/main.cpp.o<br>[ 66%] Building CXX object CMakeFiles/app.dir/src/mult.cpp.o<br>[ 83%] Building CXX object CMakeFiles/app.dir/src/sub.cpp.o<br><span class="hljs-meta">[100%</span><span class="bash">] Linking CXX executable /Users/sep/Documents/cmake-tutorial/v1_basic/bin/app</span><br><span class="hljs-meta">[100%</span><span class="bash">] Built target app</span><br></code></pre></td></tr></table></figure><p>执行 <code>./bin/app</code> 一个简单的计算器程序就可以运行起来了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 12, b = 4<br>a + b = 16<br>a - b = 8<br>a * b = 48<br>a / b = 3.000000<br></code></pre></td></tr></table></figure><h2 id="生成静态库-动态库"><a href="#生成静态库-动态库" class="headerlink" title="生成静态库/动态库"></a>生成静态库/动态库</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v2_gen_lib">v2_gen_lib</a>, 主要讲解 CMakeLists.txt 文件的配置(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-comment"># 配置库文件所输出的位置, LIBRARY_OUTPUT_PATH 为 cmake 预定义宏</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-comment"># 生成静态库, calc_static 为库名称, STATIC 标识为静态库, SRC_LIST 为要编译的所有源文件</span><br><span class="hljs-comment"># output -&gt; libcalc.a</span><br><span class="hljs-keyword">add_library</span>(calc_static STATIC <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-comment"># 生成动态库, calc_shared 为库名称, SHARED 标识为动态库, SRC_LIST 为要编译的所有源文件</span><br><span class="hljs-comment"># output -&gt; libcalc.dylib</span><br><span class="hljs-keyword">add_library</span>(calc_shared SHARED <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>) <br></code></pre></td></tr></table></figure><p>这里可以对比 v1_basic 工程中的 CMakeLists.txt 文件, 配置生成了不同的目标文件:</p><table><thead><tr><th>#</th><th align="left">command</th><th align="right">windows format</th><th align="right">linux format</th><th align="right">macOS format</th></tr></thead><tbody><tr><td>可执行文件</td><td align="left">add_executable</td><td align="right">.exe</td><td align="right">/</td><td align="right">/</td></tr><tr><td>静态库文件</td><td align="left">add_library</td><td align="right">.lib</td><td align="right">.a</td><td align="right">.a</td></tr><tr><td>动态库文件</td><td align="left">add_library</td><td align="right">.dll</td><td align="right">.so</td><td align="right">.dylib</td></tr></tbody></table><p>同样执行 cmake 相关命令 <code>cmake . -B build &amp;&amp; cmake --build build</code>, 可以看到在 <em>lib/</em> 文件夹下, 输出了对应的库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">lib<br>├── libcalc_static.a # 静态库<br>└── libcalc_shared.dylib # 动态库<br></code></pre></td></tr></table></figure><h2 id="链接静态库"><a href="#链接静态库" class="headerlink" title="链接静态库"></a>链接静态库</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v3_link_static_lib">v3_link_static_lib</a>, 项目有如下文件结构:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">./v3_link_static_lib<br>├── CMakeLists.txt<br>├── include <br>│   └── head.h # 将 v2_gen_lib 中的 head.h 头文件拷贝到这里<br>├── lib <br>│   └── libcalc.a # 将 v2_gen_lib 生成的静态库拷贝到这里<br>└── src<br>    └── main.cpp<br></code></pre></td></tr></table></figure><p>使工程链接静态库, 在 CMakeLists.txt 的主要配置(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-comment"># 静态库的头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># 要链接静态库的位置</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-comment"># 链接静态库 libcalc.a, 一般在指定链接库的时候, 会掐头去尾(lib___.a), 保留中间部分(calc)</span><br><span class="hljs-keyword">link_libraries</span>(calc)<br><br><span class="hljs-comment"># 生成可执行文件</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><p>执行 <code>cmake . -B build &amp;&amp; cmake --build build</code> 后, libcalc.a 被打包到了可执行文件中, 运行 <em>bin/app</em> 静态库 libcalc.a 立即被加载到内存中</p><h2 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v4_link_shared_lib">v4_link_shared_lib</a></p><p>文件目录结构同 v3_link_static_lib, 我们将 v2_gen_lib 生成的动态库<strong>libcalc.dylib</strong> 放在 <em>lib/</em> 路径下, CMakeLists.txt 主要差异在(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 静态库的头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># 要链接动态态库的位置</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-comment"># 先生成可执行程序 app, 再对动态库 calc 进行链接</span><br><span class="hljs-keyword">target_link_libraries</span>(app calc)<br></code></pre></td></tr></table></figure><p>这里需要注意: 链接动态库, 是在 add_executable 生成 app 后再去配置的</p><p>接下来执行 <code>cmake . -B build &amp;&amp; cmake --build build</code>, 运行 <em>bin/app</em>, 只有当真正调用到 calc 相关函数的时候, libcalc.dylib 才会被加载到内存中</p><h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v5_nested_project">v5_nested_project</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── CMakeLists.txt<br>├── calc<br>│   ├── CMakeLists.txt<br>│   └── src<br>├── include<br>│   ├── calc.h<br>│   └── sort.h<br>├── sort<br>│   ├── CMakeLists.txt<br>│   └── src<br>├── test1<br>│   ├── CMakeLists.txt<br>│   └── calc.cpp<br>└── test2<br>    ├── CMakeLists.txt<br>    └── sort.cpp<br></code></pre></td></tr></table></figure><p>这里我们定义了四个子模块和一个根模块</p><ul><li>计算器模块: calc/CMakeLists.txt 配置生成静态库</li><li>排序模块: sort/CMakeLists.txt 配置生成动态库</li><li>测试计算器模块: test1/CMakeLists.txt 配置测试链接静态库</li><li>测试排序模块: test2/CMakeLists.txt 配置测试链接动态库</li><li>根模块</li></ul><p>在根模块 CMakeLists.txt 中有如下定义(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-keyword">project</span>(<span class="hljs-keyword">test</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment"># 这里用 `set()` 指令定义了多个字段，这些字段在添加子模块时, 会被传递给各个子模块共享使用</span><br><span class="hljs-keyword">set</span>(LIB_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(EXEC_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(HEAD_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><span class="hljs-keyword">set</span>(LIB_CALC calc)<br><span class="hljs-keyword">set</span>(LIB_SORT sort)<br><span class="hljs-keyword">set</span>(APPNAME1 test1)<br><span class="hljs-keyword">set</span>(APPNAME2 test2)<br><br><span class="hljs-comment"># 告诉 cmake 该项目包含以下四个子模块</span><br><span class="hljs-keyword">add_subdirectory</span>(calc)<br><span class="hljs-keyword">add_subdirectory</span>(sort)<br><span class="hljs-keyword">add_subdirectory</span>(test1)<br><span class="hljs-keyword">add_subdirectory</span>(test2)<br></code></pre></td></tr></table></figure><p>子模块 calc 的 CMakeLists.txt 配置(重点关注注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-keyword">file</span>(GLOB SOURCES <span class="hljs-string">&quot;src/*.cpp&quot;</span>)<br><br><span class="hljs-comment"># 使用根模块声明的 HEAD_PATH 字段, 指定头文件路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 使用根模块声明的 LIB_PATH 字段, 指定静态库输出路径</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 使用根模块声明的 LIB_CALC 字段, 指定静态库输出名称</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;LIB_CALC&#125;</span> STATIC <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure><p>其它子模块: sort/test1/test2 与 calc 模块类似, 都是使用了根模块声明的字段来配置各个子模块</p><p>接下来执行 <code>cmake . -B build &amp;&amp; cmake --build build</code> 有以下日志:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">-- The C compiler identification is AppleClang 15.0.0.15000100<br>-- The CXX compiler identification is AppleClang 15.0.0.15000100<br>-- Detecting C compiler ABI info<br>-- Detecting C compiler ABI info - done<br>-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc - skipped<br>-- Detecting C compile features<br>-- Detecting C compile features - done<br>-- Detecting CXX compiler ABI info<br>-- Detecting CXX compiler ABI info - done<br>-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped<br>-- Detecting CXX compile features<br>-- Detecting CXX compile features - done<br>-- Configuring done (0.9s)<br>-- Generating done (0.0s)<br>-- Build files have been written to: /Users/sep/Documents/cmake-tutorial/v5_nested_project/build<br>[  8%] Building CXX object calc/CMakeFiles/calc.dir/src/add.cpp.o<br>[ 16%] Building CXX object calc/CMakeFiles/calc.dir/src/div.cpp.o<br>[ 25%] Building CXX object calc/CMakeFiles/calc.dir/src/mult.cpp.o<br>[ 33%] Building CXX object calc/CMakeFiles/calc.dir/src/sub.cpp.o<br>[ 41%] Linking CXX static library /Users/sep/Documents/cmake-tutorial/v5_nested_project/lib/libcalc.a<br>[ 41%] Built target calc<br>[ 50%] Building CXX object sort/CMakeFiles/sort.dir/src/insert.cpp.o<br>[ 58%] Building CXX object sort/CMakeFiles/sort.dir/src/select.cpp.o<br>[ 66%] Linking CXX shared library /Users/sep/Documents/cmake-tutorial/v5_nested_project/lib/libsort.dylib<br>[ 66%] Built target sort<br>[ 75%] Building CXX object test1/CMakeFiles/test1.dir/calc.cpp.o<br>[ 83%] Linking CXX executable /Users/sep/Documents/cmake-tutorial/v5_nested_project/bin/test1<br>[ 83%] Built target test1<br>[ 91%] Building CXX object test2/CMakeFiles/test2.dir/sort.cpp.o<br><span class="hljs-meta">[100%</span><span class="bash">] Linking CXX executable /Users/sep/Documents/cmake-tutorial/v5_nested_project/bin/test2</span><br><span class="hljs-meta">[100%</span><span class="bash">] Built target test2</span><br></code></pre></td></tr></table></figure><p>此时项目里新增了各个子模块构建出来的产物: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── bin<br>│   ├── test1<br>│   └── test2<br>├── lib<br>│   ├── libcalc.a<br>│   └── libsort.dylib<br></code></pre></td></tr></table></figure><p>可以分别执行 bin/test1 和 bin/test2 查看效果</p><h2 id="静态库链接静态库"><a href="#静态库链接静态库" class="headerlink" title="静态库链接静态库"></a>静态库链接静态库</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v6_static_link_static_lib">v6_static_link_static_lib</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── CMakeLists.txt<br>├── calc<br>│   ├── CMakeLists.txt<br>│   └── src<br>├── include<br>│   ├── calc.h<br>│   └── sort.h<br>├── sort<br>│   ├── CMakeLists.txt<br>│   └── src<br>└── test<br>    ├── CMakeLists.txt<br>    └── main.cpp<br></code></pre></td></tr></table></figure><p>这里是对 v5_nested_project 做的改造, 各个子模块间的依赖关系有:</p><blockquote><p>test -&gt; sort.a(静态库) -&gt; calc.a(静态库)</p></blockquote><p>各模块配置r(重点关注注释):</p><ul><li><p>calc/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-comment"># 头文件路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定静态库输出位置</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定生成静态库 calc</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;LIB_CALC&#125;</span> STATIC <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>sort/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-comment"># 头文件路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 链接静态库 calc</span><br><span class="hljs-keyword">link_libraries</span>(<span class="hljs-variable">$&#123;LIB_CALC&#125;</span>)<br><br><span class="hljs-comment"># 指定静态库输出位置</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定生成静态库 sort</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;LIB_SORT&#125;</span> STATIC <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>sort/src/insert.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;calc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;sort.h&quot;</span></span><br><br><span class="hljs-comment">// 这里包含静态库 calc 所声明的头文件, 正常调用函数就可以</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sort_insert call add: s = %d\n&quot;</span>, s);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>test/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake">...<br><span class="hljs-comment"># 头文件路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 链接库路径</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 链接静态库 sort, 注意这里只需要链接 sort 就可以, sort 在构建时自动链接 calc</span><br><span class="hljs-keyword">link_libraries</span>(<span class="hljs-variable">$&#123;LIB_SORT&#125;</span>)<br><br><span class="hljs-comment"># 指定生成可执行文件 test</span><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-keyword">test</span> <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure></li></ul><p>接下来执行 <code>cmake . -B build &amp;&amp; cmake --build build</code> 便可以生成: 链接了静态库 sort (sort 链接了静态库 calc) 的可执行文件 bin/test</p><h2 id="静态库链接动态库"><a href="#静态库链接动态库" class="headerlink" title="静态库链接动态库"></a>静态库链接动态库</h2><p>源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/v7_static_link_shared_lib">v7_static_link_shared_lib</a></p><p>这里是对 v6_static_link_static_lib 做的改造, 各个子模块间的依赖关系有:</p><blockquote><p>test -&gt; sort.a(静态库) -&gt; calc.dylib(动态库)</p></blockquote><p>配置静态库 sort 链接动态库 calc 主要有以下修改:</p><ul><li><p>calc/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 指定头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定动态库输出路径</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定输出动态库 calc</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;LIB_CALC&#125;</span> SHARED <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>calc/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 指定头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEAD_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定静态库输出路径</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 链接动态库文件路径</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;LIB_PATH&#125;</span>)<br><br><span class="hljs-comment"># 指定输出静态库 sort</span><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;LIB_SORT&#125;</span> STATIC <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br><br><span class="hljs-comment"># 链接动态库</span><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;LIB_SORT&#125;</span> <span class="hljs-variable">$&#123;LIB_CALC&#125;</span>)<br></code></pre></td></tr></table></figure></li></ul><p>接下来执行 <code>cmake . -B build &amp;&amp; cmake --build build</code> 便可以生成: 链接了静态库 sort (sort 链接了动态库 calc) 的可执行文件 bin/test</p><h2 id="CMake-常用指令"><a href="#CMake-常用指令" class="headerlink" title="CMake 常用指令"></a>CMake 常用指令</h2><p>除了上面几个案例介绍的指令外, 可以参考 <a href="https://zhuanlan.zhihu.com/p/315768216">这里</a> 和 <a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html">官网</a> 对 cmake 指令有更全面的了解</p><h1 id="CMake-与-Ninja"><a href="#CMake-与-Ninja" class="headerlink" title="CMake 与 Ninja"></a>CMake 与 Ninja</h1><p><a href="https://ninja-build.org/manual.html#_introduction">Ninja</a> 也是一个构建系统, 使用 ninja 构建项目相比 makefile 可以更快, 同时也支持跨平台, Ninja 与 CMake 的关系可以参考下图:</p><p><img src="/assets/cmake-one-shot-01.svg" alt="Ninja"></p><p>我们可以通过 <code>cmake</code> 生成 <strong>.ninja</strong> 文件, 然后再用 <code>ninja</code> 命令执行构建生成目标文件</p><p>使用 ninja, 首先需要在本地安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install ninja<br></code></pre></td></tr></table></figure><p>上面的章节中所用到的命令 <code>cmake . -B build</code> 都是生成的 makefile 构建文件, 这其实是 cmake 工具的生成器 <a href="https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#introduction">generators</a> 概念</p><p>执行 <code>cmake --help</code> 可以查看到 cmake 的 generator 在本机系统支持生成哪些类型的构建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">Generators<br><br>The following generators are available on this platform (* marks default):<br>* Unix Makefiles               = Generates standard UNIX makefiles.<br>  Ninja                        = Generates build.ninja files.<br>  Ninja Multi-Config           = Generates build-&lt;Config&gt;.ninja files.<br>  Watcom WMake                 = Generates Watcom WMake makefiles.<br>  Xcode                        = Generate Xcode project files.<br>  ...<br></code></pre></td></tr></table></figure><p>接下来再以 v1_basic 为案例执行命令 <code>cmake . -B build-ninja -GNinja</code>, 可以看到在 <em>build-ninja</em> 目录下有:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── CMakeCache.txt<br>├── CMakeFiles<br>├── build.ninja<br>└── cmake_install.cmake<br></code></pre></td></tr></table></figure><p>以上是 cmake 生成的 ninja 相关构建文件, 我们可以 <code>cd build-ninja &amp;&amp; ninja</code> 执行构建编译, 也可以执行 <code>cmake --build build-ninja</code> 命令来生成可执行文件 <em>bin/app</em></p><p>这里再附贴一下 makefile 与 ninja 在编译速度上更直观的对比演示:</p><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe width="100%" height="415" src="https://www.youtube.com/embed/rm4nn4m-bBE?si=CTIhBC_L7t877LxK" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>    </p>  </div></div><h1 id="CMake-与-vcpkg"><a href="#CMake-与-vcpkg" class="headerlink" title="CMake 与 vcpkg"></a>CMake 与 vcpkg</h1><p><a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md">vcpkg</a> 是 c/c++ 项目的依赖库管理工具, 可以帮助我们非常方便的管理三方库</p><p>下载 vcpkg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/microsoft/vcpkg<br></code></pre></td></tr></table></figure><p>配置环境变量:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export VCPKG_ROOT=[path-to-vcpkg]<br>export PATH=&quot;$VCPKG_ROOT:$PATH&quot;<br></code></pre></td></tr></table></figure><h2 id="vcpkg-smaple"><a href="#vcpkg-smaple" class="headerlink" title="vcpkg-smaple"></a>vcpkg-smaple</h2><p>以 <a href="https://github.com/oksep/cmake-begin/tree/master/vcpkg-sample">smaple 工程</a> 为例, 创建 vcpkg 相关配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vcpkg new --application<br></code></pre></td></tr></table></figure><p>vcpkg 会自动生成以下两个文件:</p><ul><li>vcpkg-configuration.json 仓库配置</li><li>vcpkg.json 三方库依赖配置</li></ul><p>配置 vcpkg.json 管理三方库：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: [<br>    <span class="hljs-string">&quot;cxxopts&quot;</span>,<br>    <span class="hljs-string">&quot;fmt&quot;</span>,<br>    <span class="hljs-string">&quot;range-v3&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>配置 CMakeLists.txt 文件:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment"># 配置 cmake tookchain</span><br><span class="hljs-keyword">set</span>(<br>    CMAKE_TOOLCHAIN_FILE $ENV&#123;VCPKG_ROOT&#125;/scripts/buildsystems/vcpkg.cmake<br>    CACHE <span class="hljs-keyword">STRING</span> <span class="hljs-string">&quot;Vcpkg toolchain file&quot;</span><br>)<br><br><span class="hljs-keyword">project</span>(fibonacci CXX)<br><br><span class="hljs-comment"># 查找三方库</span><br><span class="hljs-keyword">find_package</span>(fmt REQUIRED)<br><span class="hljs-keyword">find_package</span>(range-v3 REQUIRED)<br><span class="hljs-keyword">find_package</span>(cxxopts REQUIRED)<br><br><span class="hljs-keyword">add_executable</span>(fibo main.cxx)<br><br><span class="hljs-comment"># 链接三方库</span><br><span class="hljs-keyword">target_link_libraries</span>(fibo<br>  PRIVATE<br>    fmt::fmt<br>    range-v3::range-v3<br>    cxxopts::cxxopts)<br></code></pre></td></tr></table></figure><p>执行 <code>vcpkg install</code> 安装依赖库, 此时工程有以下文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── CMakeLists.txt<br>├── build<br>├── main.cxx<br>├── vcpkg-configuration.json<br>├── vcpkg.json<br>└── vcpkg_installed<br></code></pre></td></tr></table></figure><p>至此, 可以对 main.cxx 正常引用三方库进行代码编写了, 执行下 <code>cmake --build build</code> 试试效果 😊😊</p><h2 id="python-bindings"><a href="#python-bindings" class="headerlink" title="python bindings"></a>python bindings</h2><p>接下我们使用 cmake + vcpkg + <a href="https://pybind11.readthedocs.io/en/stable/installing.html#include-with-vcpkg">pybinding11</a> 来实现 python native bindings 的实战案例, 源码参考: <a href="https://github.com/oksep/cmake-begin/tree/master/python_binding">python-binding</a></p><p>同样配置 vcpkg.json 的依赖项:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;dependencies&quot;</span>: [<br>      <span class="hljs-string">&quot;pybind11&quot;</span><br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后使用 <code>vcpkg install</code> 安装依赖库</p><p>在 CMakeFileLists.txt 中配置(重点参考注释):</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><br><span class="hljs-comment"># 配置 cmake tookchain</span><br><span class="hljs-keyword">set</span>(<br>    CMAKE_TOOLCHAIN_FILE <span class="hljs-string">&quot;$ENV&#123;VCPKG_ROOT&#125;/scripts/buildsystems/vcpkg.cmake&quot;</span><br>    CACHE <span class="hljs-keyword">STRING</span> <span class="hljs-string">&quot;Vcpkg toolchain file&quot;</span><br>)<br><br><span class="hljs-keyword">project</span>(example LANGUAGES CXX)<br><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-comment"># 查找 pybind11 库</span><br><span class="hljs-keyword">find_package</span>(pybind11 REQUIRED)<br><br><span class="hljs-comment"># 配置头文件</span><br><span class="hljs-keyword">include_directories</span>($pybind11_INCLUDE_DIRS)<br><br><span class="hljs-comment"># pybind11_add_module 是找到 pybind11 后 pybind11Config.cmake 所定义的函数, 在这里配置源文件和输出模块</span><br>pybind11_add_module(example example.cpp)<br></code></pre></td></tr></table></figure><p>在 <em>example.cpp</em> 中定义向 python 提供的 <code>add()</code> 方法, 声明模块宏 <code>PYBIND11_MODULE(example, m)</code>: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pybind11/pybind11.h&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> py = pybind11;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> i + j;<br>&#125;<br><br><span class="hljs-built_in">PYBIND11_MODULE</span>(example, m) &#123;<br>    m.<span class="hljs-built_in">def</span>(<span class="hljs-string">&quot;add&quot;</span>, &amp;add, <span class="hljs-string">&quot;A function which adds two numbers&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行构建 <code>cmake . -B build &amp;&amp; cmake --build build</code>, 然后进入到 lib 目录, 可以看到生成了对应的 native 库: <strong>example.cpython-311-darwin.so</strong> </p><p>执行 python 解释器, 可以看到成功调用到了 navive 库 <code>add()</code> 方法并返回计算结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">/lib &gt; python                                                                                        py base <span class="hljs-number">21</span>:<span class="hljs-number">58</span>:<span class="hljs-number">59</span><br>Python <span class="hljs-number">3.11</span><span class="hljs-number">.5</span> (main, Sep <span class="hljs-number">11</span> <span class="hljs-number">2023</span>, 08:<span class="hljs-number">31</span>:<span class="hljs-number">25</span>) [Clang <span class="hljs-number">14.0</span><span class="hljs-number">.6</span> ] on darwin<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> example<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>example.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
      <tag>ninja</tag>
      
      <tag>vcpkg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>惊人的傅立叶变换</title>
    <link href="/fourier-getting-started/"/>
    <url>/fourier-getting-started/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>本文记录 OpenCV 重要的理论基础, 结合 Demo 案例巩固知识点.</p><p>色彩空间转化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cv::imread<br>cv::cvtColor<br>cv::imwrite<br></code></pre></td></tr></table></figure><p>傅立叶变换</p><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="//player.bilibili.com/player.html?aid=941448293&bvid=BV1aW4y1y7Hs&cid=787788257&p=1&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height:420px"></iframe>    </p>  </div></div><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="//player.bilibili.com/player.html?aid=268310972&bvid=BV1uY411z7uk&cid=1049415385&p=1&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height:420px"></iframe>  </div></div><p>傅立叶变化画画！！</p><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="https://www.jezzamon.com/fourier/zh-cn.html" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height: 1800px"></iframe>  </div></div>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV 基础知识点整理</title>
    <link href="/opencv-cpp-tutorial/"/>
    <url>/opencv-cpp-tutorial/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>本文记录 OpenCV 重要的理论基础, 结合 Demo 案例巩固知识点.</p><p>色彩空间转化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cv::imread<br>cv::cvtColor<br>cv::imwrite<br></code></pre></td></tr></table></figure><p>傅立叶变换</p><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="//player.bilibili.com/player.html?aid=941448293&bvid=BV1aW4y1y7Hs&cid=787788257&p=1&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height:420px"></iframe>    </p>  </div></div><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="//player.bilibili.com/player.html?aid=268310972&bvid=BV1uY411z7uk&cid=1049415385&p=1&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height:420px"></iframe>  </div></div><p>傅立叶变化画画！！</p><div style="width: 100%; min-width: 400px; max-width: 800px;">  <div style="position: relative; width: 100%; overflow: hidden;">    <p>      <iframe src="https://www.jezzamon.com/fourier/zh-cn.html" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height: 1800px"></iframe>  </div></div>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sep 博客站结构介绍</title>
    <link href="/website-construction/"/>
    <url>/website-construction/</url>
    
    <content type="html"><![CDATA[<p>本文记录 Sep 个人站的结构以及在 github 仓库上的托管关系, 分离 <a href="https://septenary.cn/">[主站]</a> 和 <a href="https://blog.septenary.cn/">[博客站]</a>, 简化博客发布流程</p><span id="more"></span><h2 id="站点仓库在-github-的托管结构"><a href="#站点仓库在-github-的托管结构" class="headerlink" title="站点仓库在 github 的托管结构"></a>站点仓库在 github 的托管结构</h2><p><img src="/assets/website_construction_00.png" alt="仓库在 github 的托管结构"></p><h2 id="仓库A-oksep-github-io"><a href="#仓库A-oksep-github-io" class="headerlink" title="仓库A oksep.github.io"></a>仓库A <a href="https://github.com/oksep/oksep.github.io">oksep.github.io</a></h2><p>仓库A 服务于 <a href="https://septenary.cn/">https://septenary.cn</a>, 是依赖 Github Pages 部署的独立站点, 与博客站没有任何依赖关系, 单纯的自定义 html 页面, 不受 hexo 限制, 在这里可以定制 <strong>首页特效</strong>/<strong>作品集</strong>/<strong>各子域名入口</strong> 等等</p><h3 id="特效封装"><a href="#特效封装" class="headerlink" title="特效封装"></a>特效封装</h3><p>页面效果用到了 <a href="https://github.com/Tomotoes/HomePage">坏番茄</a> 提供的封装 <a href="https://github.com/PavelDoGreat/WebGL-Fluid-Simulation/">WebGL-Fluid-Simulation</a> 的特效:</p><p><img src="/assets/website_construction_03.png" alt="WebGL-Fluid 特效"></p><h3 id="Github-Pages-配置"><a href="#Github-Pages-配置" class="headerlink" title="Github Pages 配置"></a>Github Pages 配置</h3><p>在仓库A 的设置中, 对 GitHub Pages 配置 <strong>域名</strong>, <strong>https</strong><br><img src="/assets/website_construction_01.png" alt="GitHub Pages 配置"></p><h2 id="仓库B-oksep-github-io-blog"><a href="#仓库B-oksep-github-io-blog" class="headerlink" title="仓库B oksep.github.io.blog"></a>仓库B <a href="https://github.com/oksep/oksep.github.io.blog">oksep.github.io.blog</a></h2><p>仓库B 服务于子域名 <a href="https://blog.septenary.cn/">https://blog.septenary.cn</a>, 只包含 Hexo 生成的静态网页文件，这些文件都是由 <strong>仓库C</strong> 通过执行 Github Actions 自动推送到仓库的</p><h3 id="Github-Pages-配置-1"><a href="#Github-Pages-配置-1" class="headerlink" title="Github Pages 配置"></a>Github Pages 配置</h3><p>在仓库B 的设置中, 同样需要对 GitHub Pages 配置 <strong>域名</strong>, <strong>https</strong><br><img src="/assets/website_construction_02.png" alt="GitHub Pages 配置"></p><h3 id="公钥配置"><a href="#公钥配置" class="headerlink" title="公钥配置"></a>公钥配置</h3><p>同时需要对 Deploy keys 配置公钥(在讲仓库C的时候会提到)<br><img src="/assets/website_construction_04.png" alt="Deploy keys"></p><h2 id="仓库C-oksep-github-io-blog-source"><a href="#仓库C-oksep-github-io-blog-source" class="headerlink" title="仓库C oksep.github.io.blog.source"></a>仓库C <a href="https://github.com/oksep/oksep.github.io.blog.source">oksep.github.io.blog.source</a></h2><p>仓库C 基于 <a href="https://hexo.io/index.html">Hexo</a> 来编写 Markdown 文章, 配置个性化主题, 自动部署博客站点等</p><h3 id="ssh-keygen-生成公私钥"><a href="#ssh-keygen-生成公私钥" class="headerlink" title="ssh-keygen 生成公私钥"></a>ssh-keygen 生成公私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入项目根目录</span><br>mkdir .github-deploy &amp;&amp; cd .github-deploy<br>ssh-keygen -t rsa -b 4096 -C &quot;Hexo Deploy Key&quot; -f github-deploy-key -N &quot;&quot;<br></code></pre></td></tr></table></figure><p>这里会得到两个文件:</p><ul><li>私钥: github-deploy-key</li><li>公钥: github-deploy-key.pub </li></ul><p>在仓库B中, 把公钥 github-deploy-key.pub 的值配置到 Deploy Keys 中(上文有提到)</p><h3 id="配置-Github-Actions"><a href="#配置-Github-Actions" class="headerlink" title="配置 Github Actions"></a>配置 Github Actions</h3><p>添加 .github/workflows/deploy.yml 文件，配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;16&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 700 ~/.ssh</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.email &quot;ryfthink@gmail.com&quot;</span><br><span class="hljs-string">          git config --global user.name &quot;Sep&quot;</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo deploy</span><br></code></pre></td></tr></table></figure><h3 id="配置-hexo-的-config-yml"><a href="#配置-hexo-的-config-yml" class="headerlink" title="配置 hexo 的 _config.yml"></a>配置 hexo 的 _config.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment, Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:oksep/oksep.github.io.blog.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>至此, 每次编写文章将文件推送到 github master 分支后, 会自动执行配置好的 GitHub Actions 将文章发布上线</p><p><img src="/assets/website_construction_05.png" alt="GitHub Actions"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-业务管理04-问题分析与解决</title>
    <link href="/manager-biz-management-04-analysis/"/>
    <url>/manager-biz-management-04-analysis/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="问题意识与问题界定"><a href="#问题意识与问题界定" class="headerlink" title="问题意识与问题界定"></a>问题意识与问题界定</h1><p>人类管理史<br><img src="/assets/mgr-02/0154.png"></p><p>管理者与成功的关联因素<br><img src="/assets/mgr-02/0155.png"></p><p>意识与能力<br><img src="/assets/mgr-02/0156.png"></p><p>问题分析与解决基本流程<br><img src="/assets/mgr-02/0157.png"></p><p>问题意识与问题界定<br><img src="/assets/mgr-02/0158.png"></p><p><img src="/assets/mgr-02/0159.png"></p><p>什么是问题意识<br><img src="/assets/mgr-02/0160.png"></p><p>如何培养问题意识<br><img src="/assets/mgr-02/0161.png"></p><p>问题界定<br><img src="/assets/mgr-02/0162.png"></p><p>界定问题四个环节<br><img src="/assets/mgr-02/0163.png"></p><p>准确判断问题性质/程度/影响<br><img src="/assets/mgr-02/0164.png"></p><p>四象限原则<br><img src="/assets/mgr-02/0165.png"><br><img src="/assets/mgr-02/0166.png"></p><h1 id="原因分析的方法及过程"><a href="#原因分析的方法及过程" class="headerlink" title="原因分析的方法及过程"></a>原因分析的方法及过程</h1><p>问题是什么？<br><img src="/assets/mgr-02/0167.png"></p><p>四种偏差<br><img src="/assets/mgr-02/0168.png"></p><p>三种方法<br><img src="/assets/mgr-02/0169.png"><br><img src="/assets/mgr-02/0170.png"></p><p>1.比较分析法<br><img src="/assets/mgr-02/0171.png"></p><p>1.1比较的标准句式<br><img src="/assets/mgr-02/0172.png"></p><p><img src="/assets/mgr-02/0173.png"></p><p>2.失败原因分析<br><img src="/assets/mgr-02/0174.png"><br><img src="/assets/mgr-02/0175.png"></p><p><img src="/assets/mgr-02/0176.png"></p><h1 id="问题解决的决策制定过程"><a href="#问题解决的决策制定过程" class="headerlink" title="问题解决的决策制定过程"></a>问题解决的决策制定过程</h1><p><img src="/assets/mgr-02/0177.png"></p><p>有效决策基本步骤<br><img src="/assets/mgr-02/0178.png"></p><p>Step1 描述决策目的<br><img src="/assets/mgr-02/0154.png"></p><p>Step2 设定决策标准</p><p>Step3 建立比较决策方案</p><p>Step4 确定与评价决策风险</p><p>小结：<br><img src="/assets/mgr-02/0180.png"></p><h1 id="问题解决的计划分析过程"><a href="#问题解决的计划分析过程" class="headerlink" title="问题解决的计划分析过程"></a>问题解决的计划分析过程</h1><p>计划分析的基本步骤<br><img src="/assets/mgr-02/0181.png"></p><p>计划分析表<br><img src="/assets/mgr-02/0182.png"></p><p>实施方案<br><img src="/assets/mgr-02/0183.png"><br><img src="/assets/mgr-02/0184.png"></p><h1 id="结果评估与改善"><a href="#结果评估与改善" class="headerlink" title="结果评估与改善"></a>结果评估与改善</h1><p>问题分析与解决基本流程<br><img src="/assets/mgr-02/0185.png"></p><p>结果评估基本流程<br><img src="/assets/mgr-02/0186.png"></p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-业务管理03-以结果为导向的执行力提升</title>
    <link href="/manager-biz-management-03-result/"/>
    <url>/manager-biz-management-03-result/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>是否有这样的经历？</p><p><img src="/assets/mgr-02/0106.png"></p><h1 id="明确结果：统一对结果的期望"><a href="#明确结果：统一对结果的期望" class="headerlink" title="明确结果：统一对结果的期望"></a>明确结果：统一对结果的期望</h1><h2 id="执行力的定义"><a href="#执行力的定义" class="headerlink" title="执行力的定义"></a>执行力的定义</h2><p>什么是执行力<br><img src="/assets/mgr-02/0107.png"></p><p>执行力的意义<br><img src="/assets/mgr-02/0108.png"></p><p>职业发展模型<br><img src="/assets/mgr-02/0109.png"></p><p>职业成功的五个重要因素都与执行有关<br><img src="/assets/mgr-02/0110.png"></p><h2 id="结果的关键是达成期望"><a href="#结果的关键是达成期望" class="headerlink" title="结果的关键是达成期望"></a>结果的关键是达成期望</h2><p><img src="/assets/mgr-02/0111.png"></p><h2 id="不要纠结合理，要认识必要"><a href="#不要纠结合理，要认识必要" class="headerlink" title="不要纠结合理，要认识必要"></a>不要纠结合理，要认识必要</h2><p><img src="/assets/mgr-02/0112.png"></p><p>思考：不合理的目标怎么办<br><img src="/assets/mgr-02/0113.png"></p><h2 id="就结果统一思想"><a href="#就结果统一思想" class="headerlink" title="就结果统一思想"></a>就结果统一思想</h2><p><img src="/assets/mgr-02/0114.png"></p><p>革命战争年代党的实践<br><img src="/assets/mgr-02/0115.png"></p><p>不要站在道德制高点要求他人<br><img src="/assets/mgr-02/0116.png"></p><h1 id="改变思维：建立“操之在我”的思维模式"><a href="#改变思维：建立“操之在我”的思维模式" class="headerlink" title="改变思维：建立“操之在我”的思维模式"></a>改变思维：建立“操之在我”的思维模式</h1><p>达成结果道路上充满困难<br><img src="/assets/mgr-02/0117.png"></p><p>建立“操之在我”的思维模式<br><img src="/assets/mgr-02/0118.png"></p><p>ABC理论<br><img src="/assets/mgr-02/0119.png"></p><p>“操之在我”的思维模式的执行应用<br><img src="/assets/mgr-02/0120.png"></p><h1 id="计划落实：执行-跟踪-改进"><a href="#计划落实：执行-跟踪-改进" class="headerlink" title="计划落实：执行/跟踪/改进"></a>计划落实：执行/跟踪/改进</h1><h2 id="头脑中要先执行"><a href="#头脑中要先执行" class="headerlink" title="头脑中要先执行"></a>头脑中要先执行</h2><p><img src="/assets/mgr-02/0121.png"></p><h2 id="以结果导向的计划"><a href="#以结果导向的计划" class="headerlink" title="以结果导向的计划"></a>以结果导向的计划</h2><p><img src="/assets/mgr-02/0122.png"></p><h2 id="明确结果设定符合-SMART-原则"><a href="#明确结果设定符合-SMART-原则" class="headerlink" title="明确结果设定符合 SMART 原则"></a>明确结果设定符合 SMART 原则</h2><p><img src="/assets/mgr-02/0123.png"></p><h2 id="制定策略"><a href="#制定策略" class="headerlink" title="制定策略"></a>制定策略</h2><p><img src="/assets/mgr-02/0124.png"></p><h2 id="团队共创典范-人民军队的军事民主"><a href="#团队共创典范-人民军队的军事民主" class="headerlink" title="团队共创典范-人民军队的军事民主"></a>团队共创典范-人民军队的军事民主</h2><p><img src="/assets/mgr-02/0125.png"></p><h2 id="任务分派"><a href="#任务分派" class="headerlink" title="任务分派"></a>任务分派</h2><p><img src="/assets/mgr-02/0126.png"></p><h2 id="看清团队成员对任务分派的想法"><a href="#看清团队成员对任务分派的想法" class="headerlink" title="看清团队成员对任务分派的想法"></a>看清团队成员对任务分派的想法</h2><p><img src="/assets/mgr-02/0127.png"></p><h2 id="制定计划"><a href="#制定计划" class="headerlink" title="制定计划"></a>制定计划</h2><p><img src="/assets/mgr-02/0128.png"></p><h2 id="结果追踪与控制"><a href="#结果追踪与控制" class="headerlink" title="结果追踪与控制"></a>结果追踪与控制</h2><h3 id="五要点"><a href="#五要点" class="headerlink" title="五要点"></a>五要点</h3><p><img src="/assets/mgr-02/0129.png"></p><h3 id="方法工具"><a href="#方法工具" class="headerlink" title="方法工具"></a>方法工具</h3><p><img src="/assets/mgr-02/0130.png"></p><h3 id="偏差纠正"><a href="#偏差纠正" class="headerlink" title="偏差纠正"></a>偏差纠正</h3><p><img src="/assets/mgr-02/0131.png"></p><h2 id="结果衡量与不断改进"><a href="#结果衡量与不断改进" class="headerlink" title="结果衡量与不断改进"></a>结果衡量与不断改进</h2><p><img src="/assets/mgr-02/0132.png"></p><h1 id="克服障碍：解决意愿-能力-资源问题"><a href="#克服障碍：解决意愿-能力-资源问题" class="headerlink" title="克服障碍：解决意愿/能力/资源问题"></a>克服障碍：解决意愿/能力/资源问题</h1><p>正视执行中的障碍<br><img src="/assets/mgr-02/0133.png"></p><p>为什么要冷静思考<br>正视执行中的障碍<br><img src="/assets/mgr-02/0134.png"></p><p>案例：系统思考的故事<br><img src="/assets/mgr-02/0136.png"></p><h2 id="意愿问题"><a href="#意愿问题" class="headerlink" title="意愿问题"></a>意愿问题</h2><p><img src="/assets/mgr-02/0135.png"></p><p>期望理论<br><img src="/assets/mgr-02/0137.png"></p><p>案例：期望理论诠释<br><img src="/assets/mgr-02/0138.png"></p><h2 id="能力问题"><a href="#能力问题" class="headerlink" title="能力问题"></a>能力问题</h2><p><img src="/assets/mgr-02/0139.png"></p><p>培训/培养要从未开要求出发提前进行<br><img src="/assets/mgr-02/0140.png"></p><h2 id="资源问题"><a href="#资源问题" class="headerlink" title="资源问题"></a>资源问题</h2><p><img src="/assets/mgr-02/0141.png"></p><h2 id="与他人合作问题"><a href="#与他人合作问题" class="headerlink" title="与他人合作问题"></a>与他人合作问题</h2><p><img src="/assets/mgr-02/0142.png"></p><p>情感账户<br><img src="/assets/mgr-02/0143.png"></p><h1 id="从个人执行到团队执行：1-1-gt-2"><a href="#从个人执行到团队执行：1-1-gt-2" class="headerlink" title="从个人执行到团队执行：1+1&gt;2"></a>从个人执行到团队执行：1+1&gt;2</h1><h2 id="个人执行力的提升"><a href="#个人执行力的提升" class="headerlink" title="个人执行力的提升"></a>个人执行力的提升</h2><p><img src="/assets/mgr-02/0144.png"></p><p><img src="/assets/mgr-02/0145.png"></p><h2 id="个人到团队执行力的变化"><a href="#个人到团队执行力的变化" class="headerlink" title="个人到团队执行力的变化"></a>个人到团队执行力的变化</h2><p><img src="/assets/mgr-02/0146.png"></p><h2 id="打造团队执行力"><a href="#打造团队执行力" class="headerlink" title="打造团队执行力"></a>打造团队执行力</h2><p><img src="/assets/mgr-02/0147.png"></p><p>案例：制针工厂<br><img src="/assets/mgr-02/0148.png"></p><p>打造执行力<br><img src="/assets/mgr-02/0149.png"></p><h2 id="批量提升执行力"><a href="#批量提升执行力" class="headerlink" title="批量提升执行力"></a>批量提升执行力</h2><h3 id="方法复制"><a href="#方法复制" class="headerlink" title="方法复制"></a>方法复制</h3><p><img src="/assets/mgr-02/0150.png"></p><h3 id="流程改进"><a href="#流程改进" class="headerlink" title="流程改进"></a>流程改进</h3><p><img src="/assets/mgr-02/0151.png"></p><h3 id="文化打造"><a href="#文化打造" class="headerlink" title="文化打造"></a>文化打造</h3><p><img src="/assets/mgr-02/0152.png"></p><h3 id="组织发展"><a href="#组织发展" class="headerlink" title="组织发展"></a>组织发展</h3><p><img src="/assets/mgr-02/0153.png"></p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-业务管理02-让业绩说话的卓越绩效管理</title>
    <link href="/manager-biz-management-02-perf/"/>
    <url>/manager-biz-management-02-perf/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="绩效管理"><a href="#绩效管理" class="headerlink" title="绩效管理"></a>绩效管理</h1><p>高效能人士的七个习惯<br><img src="/assets/mgr-02/0051.png"></p><p>VUCA<br><img src="/assets/mgr-02/0052.png"></p><p>能力标准<br><img src="/assets/mgr-02/0053.png"></p><p>为什么要做绩效管理，核心本质是什么？<br><img src="/assets/mgr-02/0054.png"></p><p>战略地图<br><img src="/assets/mgr-02/0055.png"></p><p>迪士尼公司<br><img src="/assets/mgr-02/0056.png"></p><p>国家电网<br><img src="/assets/mgr-02/0057.png"></p><p>阿里巴巴<br><img src="/assets/mgr-02/0058.png"></p><p>思考：<br>你的组织企业，使命愿景价值观是什么？</p><p>绩效管理体系与理念<br><img src="/assets/mgr-02/0059.png"></p><p>科学管理原理<br><img src="/assets/mgr-02/0060.png"></p><p>如何理解绩效管理？<br><img src="/assets/mgr-02/0061.png"></p><p>绩效管理的本质<br><img src="/assets/mgr-02/0062.png"></p><p>绩效管理管什么？<br><img src="/assets/mgr-02/0063.png"></p><p>绩效管理的定义<br><img src="/assets/mgr-02/0064.png"></p><p>PDCA 四个环节<br><img src="/assets/mgr-02/0065.png"></p><p>绩效管理不是什么？<br><img src="/assets/mgr-02/0066.png"></p><p>需要掌握的主要技能<br><img src="/assets/mgr-02/0067.png"></p><p>绩效的核心是什么<br><img src="/assets/mgr-02/0068.png"></p><p>小结：<br><img src="/assets/mgr-02/0069.png"></p><h1 id="绩效管理的来源"><a href="#绩效管理的来源" class="headerlink" title="绩效管理的来源"></a>绩效管理的来源</h1><h2 id="目标来源"><a href="#目标来源" class="headerlink" title="目标来源"></a>目标来源</h2><p><img src="/assets/mgr-02/0070.png"></p><h3 id="来源和特点"><a href="#来源和特点" class="headerlink" title="来源和特点"></a>来源和特点</h3><p><img src="/assets/mgr-02/0071.png"></p><p>绩效指标涉及到两个对接<br><img src="/assets/mgr-02/0072.png"><br><img src="/assets/mgr-02/0073.png"></p><p>常用绩效管理的方法与应用<br><img src="/assets/mgr-02/0074.png"></p><p>MBO 目标管理<br><img src="/assets/mgr-02/0075.png"></p><p>BSC 平衡计分卡<br><img src="/assets/mgr-02/0076.png"></p><p>平衡积分卡的四个维度<br><img src="/assets/mgr-02/0077.png"></p><p>BSC 因果关系链<br><img src="/assets/mgr-02/0078.png"></p><h2 id="常用绩效管理的方法与应用"><a href="#常用绩效管理的方法与应用" class="headerlink" title="常用绩效管理的方法与应用"></a>常用绩效管理的方法与应用</h2><p>KPI 关键绩效指标<br><img src="/assets/mgr-02/0079.png"></p><p>平衡积分卡<br><img src="/assets/mgr-02/0080.png"></p><p>OKR 关键结果法<br><img src="/assets/mgr-02/0081.png"></p><p>小结：<br><img src="/assets/mgr-02/0082.png"></p><h1 id="指标的设定"><a href="#指标的设定" class="headerlink" title="指标的设定"></a>指标的设定</h1><p>设计原则<br><img src="/assets/mgr-02/0083.png"></p><p>什么是好的 KPI<br><img src="/assets/mgr-02/0084.png"></p><p>什么是符合 SMART 的目标<br><img src="/assets/mgr-02/0085.png"></p><p>灯色<br><img src="/assets/mgr-02/0086.png"></p><p>认同4个原则<br><img src="/assets/mgr-02/0087.png"></p><p>工作目标设定表<br><img src="/assets/mgr-02/0088.png"></p><h1 id="实施与反馈"><a href="#实施与反馈" class="headerlink" title="实施与反馈"></a>实施与反馈</h1><h2 id="如何做好绩效评估与反馈"><a href="#如何做好绩效评估与反馈" class="headerlink" title="如何做好绩效评估与反馈"></a>如何做好绩效评估与反馈</h2><p>层面内容，什么是绩效反馈<br><img src="/assets/mgr-02/0089.png"></p><p>反馈的内容<br><img src="/assets/mgr-02/0090.png"></p><p>两个层面<br><img src="/assets/mgr-02/0091.png"></p><h2 id="绩效反馈的目的和流程"><a href="#绩效反馈的目的和流程" class="headerlink" title="绩效反馈的目的和流程"></a>绩效反馈的目的和流程</h2><p>绩效反馈的目的<br><img src="/assets/mgr-02/0092.png"></p><p>目标设定表<br><img src="/assets/mgr-02/0093.png"></p><p>面谈评估<br><img src="/assets/mgr-02/0094.png"></p><h2 id="面谈7步法"><a href="#面谈7步法" class="headerlink" title="面谈7步法"></a>面谈7步法</h2><p><img src="/assets/mgr-02/0095.png"></p><p>ORID 面谈法<br><img src="/assets/mgr-02/0096.png"></p><p><img src="/assets/mgr-02/0097.png"></p><h1 id="制定改进计划"><a href="#制定改进计划" class="headerlink" title="制定改进计划"></a>制定改进计划</h1><h2 id="绩效改进的4个要点"><a href="#绩效改进的4个要点" class="headerlink" title="绩效改进的4个要点"></a>绩效改进的4个要点</h2><p><img src="/assets/mgr-02/0098.png"></p><h2 id="绩效改进计划的内容"><a href="#绩效改进计划的内容" class="headerlink" title="绩效改进计划的内容"></a>绩效改进计划的内容</h2><p><img src="/assets/mgr-02/0099.png"></p><p>考核 review summary<br><img src="/assets/mgr-02/0100.png"></p><h2 id="制定改进计划的程序"><a href="#制定改进计划的程序" class="headerlink" title="制定改进计划的程序"></a>制定改进计划的程序</h2><p><img src="/assets/mgr-02/0101.png"></p><p>个人发展胜任力模型<br><img src="/assets/mgr-02/0102.png"></p><p>关键成功个因素：中层<br><img src="/assets/mgr-02/0103.png"></p><p>5个梯度<br><img src="/assets/mgr-02/0104.png"></p><p>GROW 高绩效教练<br><img src="/assets/mgr-02/0105.png"></p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-业务管理01-以终为始的计划设定与目标管理</title>
    <link href="/manager-biz-management-01-plan-impl/"/>
    <url>/manager-biz-management-01-plan-impl/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h1><h2 id="我们为什么要进行目标管理，先来看两个小故事"><a href="#我们为什么要进行目标管理，先来看两个小故事" class="headerlink" title="我们为什么要进行目标管理，先来看两个小故事"></a>我们为什么要进行目标管理，先来看两个小故事</h2><p><img src="/assets/mgr-02/0001.png"></p><p>故事： 爱丽丝漫游奇境中，爱丽丝在岔路口迷茫，问路边猫咪丘舍该走哪条路。<br>问题： 如果你不知道要去哪里，或者去哪里都无所谓，那么走哪条路都无所谓吗？<br>寓意： 人或企业如果没有目标，就会迷茫，错失机会，一事无成。即使别人想帮忙，也不知道如何帮助。<br>目标是方向，指引人生道路。没有目标，则会迷茫、错失机会，一事无成。</p><p><img src="/assets/mgr-02/0002.png"></p><p>故事： 1952年，54岁的查德维克挑战横渡卡特林娜海峡。<br>第一次挑战失败： 天气恶劣，迷失方向，看不到目标，产生绝望情绪，最终放弃。<br>第二次挑战成功： 天气晴朗，目标清晰，知道距离终点多远，保持动力，最终成功。<br>寓意： 明确清晰的目标是人们前进的动力。<br>目标是动力，指引方向。明确清晰的目标，能让人保持动力，克服困难，最终取得成功。</p><h2 id="为什么要进行目标管理呢？"><a href="#为什么要进行目标管理呢？" class="headerlink" title="为什么要进行目标管理呢？"></a>为什么要进行目标管理呢？</h2><p><img src="/assets/mgr-02/0003.png"></p><p>目标管理之所以重要，可归结为三个主要理由：</p><p>明确未来方向：设定清晰的目标有助于指明未来的发展方向。<br>指导行动路线：目标决定了我们应采取的行动方案，确保行动与目标一致。<br>激发前进动力：目标本身是推动我们前进的重要动力。<br>理解目标管理的这些基本意义，是我们学习和实施目标管理的根本原因。</p><h2 id="目前困惑的几个问题"><a href="#目前困惑的几个问题" class="headerlink" title="目前困惑的几个问题"></a>目前困惑的几个问题</h2><p>新任经理人常面临以下问题：</p><ol><li>缺少解决问题的方法：意识到问题后，经理人缺乏有效的解决策略。</li><li>员工缺乏自主思考能力：管理人员认为员工不具备独立思考能力，遇到问题时不能灵活应对。</li><li>员工效率低：尽管态度积极，员工的工作效率不高，完成任务时间过长。</li><li>时间管理不佳：在同时处理多项任务时，员工的时间管理不当，容易被紧急任务打乱计划。</li></ol><p><img src="/assets/mgr-02/0004.png"><br><img src="/assets/mgr-02/0005.png"></p><h2 id="目标管理的起源"><a href="#目标管理的起源" class="headerlink" title="目标管理的起源"></a>目标管理的起源</h2><p><img src="/assets/mgr-02/0006.png"></p><p>目标管理起源于1954年，由管理学家彼得·德鲁克（Peter Drucker）在其著作《管理的实践》（The Practice of Management）中提出的“管理目标法”（Management by Objectives，MBO）。这一概念强调通过设定具体、明确的目标来提高组织和个人的绩效。</p><h2 id="目标管理的意义"><a href="#目标管理的意义" class="headerlink" title="目标管理的意义"></a>目标管理的意义</h2><p><img src="/assets/mgr-02/0007.png"><br>目标管理的意义在于提供一个明确和量化的方向，帮助个人和组织集中精力、提高效率和绩效。它通过设定、跟踪和评估具体目标，促进员工参与和激励，同时为组织的发展和成功提供清晰的路线图。</p><h2 id="目标管理的理解"><a href="#目标管理的理解" class="headerlink" title="目标管理的理解"></a>目标管理的理解</h2><p><img src="/assets/mgr-02/0008.png"></p><ol><li>目标制定与分解：目标管理的核心在于将企业目标转化为每个被管理者的工作目标，通过目标的设定和分解实现。</li><li>管理方式变化：现代目标管理强调授权和指导而非传统的命令式管理，特别是针对年轻化的员工群体，如90后、95后，甚至00后。</li><li>员工主体地位：在目标管理过程中，应强调员工的参与和认同。目标的制定和分解需与员工进行充分沟通，确保员工对目标有认同感，从而实现从被动执行到主动参与的转变。</li><li>对实现过程的管理：目标管理关注的是目标实现的过程而非仅仅是最终目标本身。管理者应全程参与，与员工进行持续沟通，发现并解决实现目标过程中的问题，提供必要的支持和帮助。</li></ol><h2 id="目标管理的过程"><a href="#目标管理的过程" class="headerlink" title="目标管理的过程"></a>目标管理的过程</h2><p><img src="/assets/mgr-02/0009.png"></p><ol><li>目标设定和分解：目标管理流程开始于将企业整体目标分解为阶段性和短期目标，进一步细化到每个部门和个人。</li><li>实施方案与计划管理：个人和部门需要制定实施方案来实现这些目标，包括年度、季度、月度，甚至周计划。</li><li>参与与授权：目标管理过程中强调员工的全员参与。在目标确定后，上级应充分授权下属，让他们发挥创造力完成目标。</li><li>沟通与支持：上级在管理过程中的主要作用是与下属沟通，了解他们在实现目标过程中遇到的问题和困难，并提供必要的支持和资源。</li><li>评价与考核：目标管理的一个关键环节是对目标实现情况的评价和考核，这通常与技术考核和管理相结合。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/assets/mgr-02/0010.png?x120"></p><ol><li>目标的重要性：目标明确了未来的方向，决定了行动路线，并成为前进的动力。因此，有效的目标管理至关重要。</li><li>目标管理的转换和参与：目标管理涉及将企业目标转换为被管理者的目标，并通过制定基地机制实现。它强调员工在整个过程中的全面参与。</li><li>目标管理的三个阶段：目标管理包括目标的设定和分解、计划管理（目标的实施）以及目标的实现和考核。</li></ol><h1 id="目标设定"><a href="#目标设定" class="headerlink" title="目标设定"></a>目标设定</h1><h2 id="SMART-原则"><a href="#SMART-原则" class="headerlink" title="SMART 原则"></a>SMART 原则</h2><p><img src="/assets/mgr-02/0011.png?x180"></p><p>SMART原则是一种设定有效目标的指导原则，每个字母代表一个关键词：</p><ul><li>S（Specific）：具体，目标应明确具体。</li><li>M（Measurable）：可测量，目标应能够被量化或至少有明确的成功标准。</li><li>A（Achievable）：可实现，目标应现实可达。</li><li>R（Relevant）：相关，目标应与更广泛的目标或愿景相符合。</li><li>T（Time-bound）：有时限，目标应设定明确的完成时间。</li></ul><p>在制定目标时，请记住 SMART 原则的五个要素。你可以使用以下步骤来应用 SMART 原则：</p><ul><li>确定你的目标是什么。</li><li>确保目标是具体的、可衡量的、可实现的、相关的和有时限的。</li><li>写下你的目标。</li><li>定期回顾你的目标并进行调整。</li></ul><p>以下是一些 SMART 目标的示例：</p><ul><li>我要在三个月内将销售额提高 10%。</li><li>我要在下个月完成我的年度绩效考核。</li><li>我要在每周锻炼三次，每次至少 30 分钟。</li><li>我要在两个月内学会弹奏一首钢琴曲。</li><li>我要在年底前完成我的硕士学位论文。</li></ul><p>SMART 原则可以帮助你制定更有效、更易于实现的目标</p><h2 id="如何做到可衡量性"><a href="#如何做到可衡量性" class="headerlink" title="如何做到可衡量性"></a>如何做到可衡量性</h2><p><img src="/assets/mgr-02/0012.png?x200"></p><p>为实现目标的可衡量性，应当设定清晰、具体的标准来评估进展和成果。这可以通过以下方式实现：</p><p>-量化目标：设定可以用数字衡量的目标，如销售额增加10%、提高客户满意度到90%。</p><ul><li>设定明确指标：定义具体的性能指标或关键绩效指标（KPIs）来跟踪进展。</li><li>创建里程碑：为长期目标设定短期检查点，以便定期评估和调整策略。</li><li>使用跟踪工具：运用软件或跟踪表格来记录和分析数据，确保目标进展的透明性和可追踪性。</li></ul><h2 id="能量化的尽量量化"><a href="#能量化的尽量量化" class="headerlink" title="能量化的尽量量化"></a>能量化的尽量量化</h2><p><img src="/assets/mgr-02/0013.png?x200"></p><p>对于能够用数字或指标衡量的目标或工作，应该尽量用量化的方式来描述和考核。这样做可以使目标更加清晰、具体，并方便跟踪进度和评估结果。</p><p>例如：</p><ul><li>将“提高客户满意度”改为“将客户满意度调查的平均分提高到 4.5 分”。</li><li>将“提高工作效率”改为“将工作完成时间缩短 20%”。</li></ul><h2 id="不能量化的尽量细化"><a href="#不能量化的尽量细化" class="headerlink" title="不能量化的尽量细化"></a>不能量化的尽量细化</h2><p><img src="/assets/mgr-02/0014.png"></p><p>对于无法用数字或指标衡量的目标或工作，应该尽量将其细化为具体的步骤或行动。这样做可以使目标更加明确、可操作，并便于执行和监督。</p><p>例如：</p><ul><li>将“提高员工的沟通能力”改为“1. 组织员工参加沟通技巧培训；2. 定期进行模拟演练；3. 提供沟通技巧方面的书籍和资源”。</li><li>将“改善团队合作”改为“1. 建立团队合作目标；2. 制定团队合作计划；3. 定期进行团队合作评估”。</li></ul><h2 id="不能细化的尽量流程化"><a href="#不能细化的尽量流程化" class="headerlink" title="不能细化的尽量流程化"></a>不能细化的尽量流程化</h2><p><img src="/assets/mgr-02/0015.png"></p><p>对于既难量化又难细化的目标，应尝试将其转化为标准化流程，确保每一步骤都有明确的指导和操作流程。例如，实现更高效的决策过程，可以制定一个标准的决策流程，明确决策的步骤、责任人和时间节点。</p><h2 id="目标设定的公式"><a href="#目标设定的公式" class="headerlink" title="目标设定的公式"></a>目标设定的公式</h2><p><img src="/assets/mgr-02/0016.png?x300"></p><h2 id="如何判断是否符合-SMART-原则"><a href="#如何判断是否符合-SMART-原则" class="headerlink" title="如何判断是否符合 SMART 原则"></a>如何判断是否符合 SMART 原则</h2><p><img src="/assets/mgr-02/0017.png"></p><p>要判断一个目标是否符合SMART原则，可以通过以下方式进行检查：</p><h3 id="具体（Specific）："><a href="#具体（Specific）：" class="headerlink" title="具体（Specific）："></a>具体（Specific）：</h3><p>目标是否明确具体？<br>是否清晰描述了期望达成的结果？<br>可测量（Measurable）：</p><h3 id="目标是否有明确的衡量标准？"><a href="#目标是否有明确的衡量标准？" class="headerlink" title="目标是否有明确的衡量标准？"></a>目标是否有明确的衡量标准？</h3><p>是否可以通过数据或其他方法追踪进度？<br>可实现（Achievable）：</p><h3 id="目标是否现实可达？"><a href="#目标是否现实可达？" class="headerlink" title="目标是否现实可达？"></a>目标是否现实可达？</h3><p>是否考虑了资源和时间限制？<br>相关（Relevant）：</p><h3 id="目标是否与更广泛的业务目标、愿景或个人职业目标相符合？"><a href="#目标是否与更广泛的业务目标、愿景或个人职业目标相符合？" class="headerlink" title="目标是否与更广泛的业务目标、愿景或个人职业目标相符合？"></a>目标是否与更广泛的业务目标、愿景或个人职业目标相符合？</h3><p>是否对个人或组织的长期成功有积极意义？<br>有时限（Time-bound）：</p><h3 id="是否为目标设定了明确的截止日期？"><a href="#是否为目标设定了明确的截止日期？" class="headerlink" title="是否为目标设定了明确的截止日期？"></a>是否为目标设定了明确的截止日期？</h3><p>是否设定了合理的时间框架？</p><h2 id="情景模拟"><a href="#情景模拟" class="headerlink" title="情景模拟"></a>情景模拟</h2><p><img src="/assets/mgr-02/0018.png"></p><h2 id="对话A"><a href="#对话A" class="headerlink" title="对话A"></a>对话A</h2><p><img src="/assets/mgr-02/0019.png"></p><p>王经理让新员工小李帮忙处理公司繁忙的业务，但指示模糊不清，未具体分配任务。<br>小李作为新员工，不清楚如何主动寻找可协助的任务。<br>结果可能导致小李未能有效帮忙，同时感到迷茫和不确定。</p><h2 id="对话B"><a href="#对话B" class="headerlink" title="对话B"></a>对话B</h2><p><img src="/assets/mgr-02/0020.png"></p><p>王经理明确指派小李处理与其专业背景相关的进出口案例。<br>给予小李具体任务，时间限制，财务资源和额外帮助。<br>小李感到信任和支持，有明确的目标和动力去完成任务。</p><p>这两个案例展示了目标管理和沟通方式在实际工作中的重要性。明确和具体的目标设定，配合适当的资源和支持，能够有效提升员工的执行力和积极性。反之，模糊和不明确的指示可能导致工作效率低下和员工的困惑。</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="/assets/mgr-02/0021.png"></p><h3 id="SMART原则："><a href="#SMART原则：" class="headerlink" title="SMART原则："></a>SMART原则：</h3><p>目标设定应遵循SMART原则：明确具体、可衡量、可达成、相关性和实现性。</p><h3 id="目标表述的重要性："><a href="#目标表述的重要性：" class="headerlink" title="目标表述的重要性："></a>目标表述的重要性：</h3><p>目标需要明确具体且可衡量。<br>目标表述应尽量量化，无法量化时应细化或流程化。<br>表达目标时可以采用特定公式：在某个时间内，通过某个行动达到可量化或可细化的特定程度。</p><h3 id="多目标情况下的权重设定："><a href="#多目标情况下的权重设定：" class="headerlink" title="多目标情况下的权重设定："></a>多目标情况下的权重设定：</h3><p>当存在多个目标时，应为不同目标设定权重，以表达它们的重要程度和优先级。</p><h1 id="目标的分解"><a href="#目标的分解" class="headerlink" title="目标的分解"></a>目标的分解</h1><h2 id="小故事1：马拉松的成功秘诀"><a href="#小故事1：马拉松的成功秘诀" class="headerlink" title="小故事1：马拉松的成功秘诀"></a>小故事1：马拉松的成功秘诀</h2><p><img src="/assets/mgr-02/0022.png?x200"></p><p>日本著名马拉松运动员山铁粉衣，他多次获得世界马拉松冠军。山铁粉衣分享了他的获胜策略：在比赛前对赛道进行详细考察，标记出沿途的显著地标，如著名银行、大树或醒目房屋。在比赛中，他将整个马拉松赛程分解为多个小目标，每到达一个地标就以百米冲刺的速度向下一个目标进发。这种方法使得长距离的马拉松赛程变得更易管理和完成。故事强调，可视且接近的目标更能激发动力。如果目标设置得太遥远或难以实现，可能导致动力的丧失。这个故事强调了目标分解的重要性，即将一个大目标分解为多个小、易于实现的目标，以提高完成的可能性和动力。</p><h2 id="小故事2：一个亿的小目标"><a href="#小故事2：一个亿的小目标" class="headerlink" title="小故事2：一个亿的小目标"></a>小故事2：一个亿的小目标</h2><p><img src="/assets/mgr-02/0023.png?x200"></p><p>王健林的“一个亿的小目标”故事，是一个流行的网络话题，经常被误解为过于宏大和不切实际。实际上，王健林提出这个观点时是在讨论年轻人想成为首富的目标。他建议设定一个相对容易实现的“小目标”作为起点，比如先赚到一个亿，然后再根据实际情况，逐步提升目标，如一百亿、一千亿，最终实现成为世界首富的大目标。这个故事实际上是关于目标分解的一个例子，强调如何将一个远大的目标分解为多个阶段性、更易实现的小目标，逐步推进，最终达到最终的大目标。这一过程展示了目标分解在实现长远目标过程中的重要作用和实用价值。</p><h2 id="目标如何分解"><a href="#目标如何分解" class="headerlink" title="目标如何分解"></a>目标如何分解</h2><p><img src="/assets/mgr-02/0024.png"><br><img src="/assets/mgr-02/0025.png"></p><h3 id="目标分解的方法"><a href="#目标分解的方法" class="headerlink" title="目标分解的方法"></a>目标分解的方法</h3><p><img src="/assets/mgr-02/0026.png"></p><h3 id="华为的-KPI-指标体系"><a href="#华为的-KPI-指标体系" class="headerlink" title="华为的 KPI 指标体系"></a>华为的 KPI 指标体系</h3><p><img src="/assets/mgr-02/0027.png"></p><h3 id="华为-KPI-指标分解"><a href="#华为-KPI-指标分解" class="headerlink" title="华为 KPI 指标分解"></a>华为 KPI 指标分解</h3><p><img src="/assets/mgr-02/0028.png"></p><h3 id="目标分解的简单案例"><a href="#目标分解的简单案例" class="headerlink" title="目标分解的简单案例"></a>目标分解的简单案例</h3><p><img src="/assets/mgr-02/0029.png"></p><h2 id="目标分解的其他方法"><a href="#目标分解的其他方法" class="headerlink" title="#目标分解的其他方法"></a>#目标分解的其他方法</h2><p><img src="/assets/mgr-02/0030.png"></p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p><img src="/assets/mgr-02/0031.png"></p><h1 id="计划的制定"><a href="#计划的制定" class="headerlink" title="计划的制定"></a>计划的制定</h1><h2 id="计划的内涵所在"><a href="#计划的内涵所在" class="headerlink" title="计划的内涵所在"></a>计划的内涵所在</h2><p><img src="/assets/mgr-02/0032.png"></p><p>计划制定过程本身就包含了计划的核心要素和价值。这意味着计划的重要性不仅仅在于最终的计划文档或结果，而是在于制定计划的过程。这个过程包括以下几个关键方面：</p><ol><li>目标设定：明确计划的目的和目标，这是整个计划的出发点。</li><li>情况分析：深入分析当前状况，包括机会、威胁、资源和约束，为制定实际可行的计划打下基础。</li><li>方案设计：基于目标和分析结果，设计具体的行动方案和方法。</li><li>资源分配：合理分配必要的资源，包括资金、人力、时间等。</li><li>风险评估：评估计划实施可能面临的风险，并制定应对策略。</li><li>参与者协调：确保所有相关人员对计划有清晰理解，确保团队协调一致。</li></ol><p>计划的制定过程本身就是一种重要的管理实践，它帮助管理者清晰地理解目标、分析问题、设计策略，同时也是一种团队协作和沟通的过程。这个过程对于提高组织效率、促进战略实施和加强团队合作都至关重要。</p><h2 id="不同管理层级计划的侧重点"><a href="#不同管理层级计划的侧重点" class="headerlink" title="不同管理层级计划的侧重点"></a>不同管理层级计划的侧重点</h2><p><img src="/assets/mgr-02/0033.png"></p><ul><li>高层管理（战略层面）：侧重于制定长期目标和战略，以及公司的总体方向。这些计划通常涉及全面的业务范围，包括市场发展、新产品推出、企业扩张或重组等。</li><li>中层管理（战术层面）：侧重于将高层管理制定的战略转化为具体行动。这些计划更为详细，包括资源分配、部门目标设定、项目管理等，旨在实现战略层面的目标。</li><li>基层管理（操作层面）：侧重于日常操作和活动的计划，如员工的日常工作安排、短期目标设定、任务分配等。这些计划通常具有明确的时间框架和具体的执行标准。</li></ul><p>每个层级的计划互相衔接，确保公司策略得以有效执行和实现。</p><h2 id="年度经营计划"><a href="#年度经营计划" class="headerlink" title="年度经营计划"></a>年度经营计划</h2><p><img src="/assets/mgr-02/0034.png"></p><p>实施年度经营计划通常涉及以下几个关键步骤：</p><ul><li>目标设定：基于公司的长远战略，明确年度经营计划的具体目标。这些目标应当符合SMART原则，即具体（Specific）、可测量（Measurable）、可达成（Achievable）、相关性（Relevant）和有时间限制（Time-bound）。</li><li>资源分配：根据年度目标，合理分配必要的资源，包括资金、人员、技术和时间等。</li><li>责任分配：明确各部门及其负责人的责任和职责，确保每个部门都清楚自己在实现年度目标中的角色。</li><li>详细规划：制定详细的行动计划，包括各阶段的目标、关键活动、时间表和预期结果。</li><li>监控和评估：定期监控计划的实施进度，评估是否按预定目标进行，如果有偏差，及时调整策略。</li><li>沟通和协调：保持内部沟通和信息流畅，确保所有相关方对计划的进展和变更保持同步。</li><li>绩效评估：在计划年度结束时，对实施的成效进行综合评估，包括对目标达成程度的评价和对实施过程中的问题的总结。</li></ul><p>反馈和改进：根据年度计划的执行结果和绩效评估，为下一年度的经营计划制定提供反馈和改进建议。</p><h2 id="制定计划应该考虑的因素"><a href="#制定计划应该考虑的因素" class="headerlink" title="制定计划应该考虑的因素"></a>制定计划应该考虑的因素</h2><p><img src="/assets/mgr-02/0035.png"></p><p>在制定计划时，应考虑以下关键因素：</p><ol><li>目标和目的：明确计划要达成的具体目标和目的，确保与组织的整体战略和愿景一致。</li><li>资源可用性：评估和确定所需的资源，包括财务、人力、技术和物质资源。</li><li>时间框架：设定实现计划目标的时间表，包括开始和结束日期，以及关键里程碑。</li><li>环境分析：考虑外部环境因素，如市场趋势、竞争对手、法规变化和经济条件等。</li><li>内部能力：评估组织内部的能力和限制，如员工技能、组织结构和文化。</li><li>风险和不确定性：识别可能影响计划实施的潜在风险和不确定性因素，并制定相应的应对策略。</li><li>利益相关者：考虑所有利益相关者的需求和期望，包括员工、客户、供应商和其他合作伙伴。</li><li>评估和调整：计划应灵活，能够根据实施过程中的反馈和环境变化进行调整。</li><li>绩效指标：设定用于评估计划成功与否的关键绩效指标（KPIs）。</li><li>沟通策略：制定有效的沟通计划，确保所有相关方都了解计划的内容和进展。</li></ol><h2 id="案例：赵经理的年度目标与计划"><a href="#案例：赵经理的年度目标与计划" class="headerlink" title="案例：赵经理的年度目标与计划"></a>案例：赵经理的年度目标与计划</h2><p><img src="/assets/mgr-02/0036.png"><br><img src="/assets/mgr-02/0037.png"><br><img src="/assets/mgr-02/0038.png"></p><h3 id="计划执行：周工作计划模版"><a href="#计划执行：周工作计划模版" class="headerlink" title="计划执行：周工作计划模版"></a>计划执行：周工作计划模版</h3><p><img src="/assets/mgr-02/0039.png"></p><h3 id="日目标与计划"><a href="#日目标与计划" class="headerlink" title="日目标与计划"></a>日目标与计划</h3><p><img src="/assets/mgr-02/0040.png"></p><h2 id="四象限原则：分清轻重缓急"><a href="#四象限原则：分清轻重缓急" class="headerlink" title="四象限原则：分清轻重缓急"></a>四象限原则：分清轻重缓急</h2><p><img src="/assets/mgr-02/0041.png"></p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p><img src="/assets/mgr-02/0042.png"></p><h1 id="目标管理的实际应用场景"><a href="#目标管理的实际应用场景" class="headerlink" title="目标管理的实际应用场景"></a>目标管理的实际应用场景</h1><h2 id="情景1：解决管理中的困惑和问题"><a href="#情景1：解决管理中的困惑和问题" class="headerlink" title="情景1：解决管理中的困惑和问题"></a>情景1：解决管理中的困惑和问题</h2><p><img src="/assets/mgr-02/0043.png"></p><h3 id="检验一下问题所在"><a href="#检验一下问题所在" class="headerlink" title="检验一下问题所在"></a>检验一下问题所在</h3><p><img src="/assets/mgr-02/0044.png"><br><img src="/assets/mgr-02/0045.png"></p><h2 id="情景2：如何规划个人职业生涯"><a href="#情景2：如何规划个人职业生涯" class="headerlink" title="情景2：如何规划个人职业生涯"></a>情景2：如何规划个人职业生涯</h2><h3 id="耶鲁大学的调查"><a href="#耶鲁大学的调查" class="headerlink" title="耶鲁大学的调查"></a>耶鲁大学的调查</h3><p><img src="/assets/mgr-02/0046.png"></p><h3 id="袁隆平与比尔盖茨"><a href="#袁隆平与比尔盖茨" class="headerlink" title="袁隆平与比尔盖茨"></a>袁隆平与比尔盖茨</h3><p>以袁隆平和比尔·盖茨为例：</p><ul><li>袁隆平：作为杂交水稻专家，他的人生目标是提高水稻产量，帮助农民摆脱饥饿。这一目标体现了他对社会的贡献和追求的价值观。</li><li>比尔·盖茨：作为微软的创始人，他的目标是使每个家庭都能拥有一台性能多样、运行流畅的微型电脑。这一目标不仅符合他的个人愿景，也与微软公司的发展目标紧密相连。</li></ul><p>这些例子展示了个人目标与公司目标的一致性如何促进个人和企业的共同发展。个人职业生涯的规划与实现，有助于推动公司的整体发展，从而实现双赢。在这些情况下，个人的工作目标直接反映了他们的个人愿景，同时也与他们所在组织的使命和目标紧密相关</p><h3 id="华为任正非"><a href="#华为任正非" class="headerlink" title="华为任正非"></a>华为任正非</h3><p><img src="/assets/mgr-02/0047.png"></p><p>任正非作为华为的创始人，任正非也展示了具有远大理想和目标的企业家形象。他的趣味性言论反映了他对华为未来发展的坚定信念和远大期望。尽管他当时可能没有预见到电子货币的普及，但这一言论体现了他对公司未来财富积累的信心。</p><p>对平凡人设定职业目标的启示：这些伟大人物的故事提示我们，即使是平凡的人也可以设定并追求自己的职业目标。通过设定清晰、可实现的目标，每个人都可以在自己的职业生涯中取得成就。</p><h3 id="作为平凡的人，如何设定个人目标？"><a href="#作为平凡的人，如何设定个人目标？" class="headerlink" title="作为平凡的人，如何设定个人目标？"></a>作为平凡的人，如何设定个人目标？</h3><p>设定个人目标可以遵循以下步骤：</p><p><strong>1. 自我认知：</strong>了解自己的优势、劣势、兴趣和价值观。<br><strong>2. 明确方向：</strong>结合自身实际和未来期望，明确人生方向和目标。<br><strong>3. 分解目标：</strong>将大目标分解成小目标，制定行动计划。<br><strong>4. 持续行动：</strong>付诸行动，保持努力，克服困难。<br><strong>5. 定期回顾：</strong>检查目标完成情况，进行调整。</p><h3 id="两条道路"><a href="#两条道路" class="headerlink" title="两条道路"></a>两条道路</h3><p><img src="/assets/mgr-02/0048.png"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="/assets/mgr-02/0049.png"><br><img src="/assets/mgr-02/0050.png"></p><h2 id="情景3：如何运用目标管理减轻体重"><a href="#情景3：如何运用目标管理减轻体重" class="headerlink" title="情景3：如何运用目标管理减轻体重"></a>情景3：如何运用目标管理减轻体重</h2><ol><li>设定具体可测量的目标：例如，计划在三个月内减轻5公斤。</li><li>制定实现目标的行动计划：包括健康饮食和定期锻炼。</li><li>追踪进度：定期记录体重和身体指标。</li><li>灵活调整计划：根据进展情况调整饮食和运动计划。</li><li>设定时间限制：为整个减重过程设定一个明确的时间框架。</li></ol><p>通过这种方法，可以更系统、有效地管理减重过程。</p><h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><p>心在远方，路在脚下。<br>不能只是埋头赶路，还要抬头仰望天空。</p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-自我管理04-结构化思维：创造性思维</title>
    <link href="/manager-self-managment-04-creative-thinking/"/>
    <url>/manager-self-managment-04-creative-thinking/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="创新要素"><a href="#创新要素" class="headerlink" title="创新要素"></a>创新要素</h1><h2 id="1-创新"><a href="#1-创新" class="headerlink" title="1. 创新"></a>1. 创新</h2><p>淘宝在创业之初，面对已存在的伊贝公司及其商业模式，采取了创新策略。淘宝向平台商户承诺“三年两倍”，吸引众多商户转投淘宝。伊贝因战略原因退出中国市场。这证明，无论是从“1到1”还是“1到1”，淘宝的做法都可称之为创新。</p><h2 id="2-可行性"><a href="#2-可行性" class="headerlink" title="2. 可行性"></a>2. 可行性</h2><p>创新想法不仅要在技术上可行，也必须在商业上可行。例如，摩拜单车技术上可行，但商业模式未能转化为成功，最终被美团收购。因此，创新同时需要考虑技术和商业的可行性。</p><h2 id="3-价值性"><a href="#3-价值性" class="headerlink" title="3. 价值性"></a>3. 价值性</h2><p>创新应产生价值，满足客户或员工的需求，并在此过程中提高公司效率或降低成本。只有当创新想法对人和公司都有价值时，才值得推行。</p><h2 id="4-创新的实例"><a href="#4-创新的实例" class="headerlink" title="4. 创新的实例"></a>4. 创新的实例</h2><p>基义公司研发了一款针对儿童的医疗产品，获国际大奖。研发总监通过访问儿童医院，了解儿童需求，创新地将医疗产品设计成海岛船的形式，极大提升了儿童的接受度。</p><h2 id="5-思维定式"><a href="#5-思维定式" class="headerlink" title="5. 思维定式"></a>5. 思维定式</h2><p>创新要求打破思维定式。个人、团队乃至整个行业都可能存在思维定式，阻碍创新。例如，苹果的出现打破了手机行业的思维定式。创新需要我们跳出传统思维，探索新领域。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>我们讨论了创新的关键要素：心理性、价值性和可行性。打破思维定式是实现创新的关键。我们需要在工作和生活中识别和克服这些思维定式，以促进真正的创新。</p><h1 id="创新原则"><a href="#创新原则" class="headerlink" title="创新原则"></a>创新原则</h1><h2 id="创新的本质"><a href="#创新的本质" class="headerlink" title="创新的本质"></a>创新的本质</h2><ul><li>创新的源況：创新来源于打破固有的思维定势，探索自然界的原则。</li><li>思维定势：思维定势是由神经元回路表达的想法、观念和记忆。每当回路激活，它就会强化，形成固有的思维定势。</li></ul><h2 id="如何打破思维定势"><a href="#如何打破思维定势" class="headerlink" title="如何打破思维定势"></a>如何打破思维定势</h2><ul><li>科学角度：打破思维定势需理解神经元回路的生成和消失。</li><li>实际应用：可以通过冥想等方式，寻找思维和思维之间的空隙，打破固有思维。</li></ul><h2 id="创新实践案例"><a href="#创新实践案例" class="headerlink" title="创新实践案例"></a>创新实践案例</h2><ul><li>乔布斯的创新<ul><li>乔布斯的影响：乔布斯是创新领域的典范，其生活习惯和决策方式对创新有重要影响。</li><li>冥想与创新：乔布斯通过冥想，找到思维的空隙，增强创新能力。</li></ul></li><li>企业实例<ul><li>騰訊的创新：騰訊通过独立的小机构打破团队思维定势。</li></ul></li></ul><h2 id="创新原则解析"><a href="#创新原则解析" class="headerlink" title="创新原则解析"></a>创新原则解析</h2><h3 id="框架力思考"><a href="#框架力思考" class="headerlink" title="框架力思考"></a>框架力思考</h3><ul><li>框架内创新：在一定范围内进行创新，利用现有资源，寻找新的创新机会。</li><li>案例分析：阿波罗13号、优步、Airbnb等展示了框架力思考的实际应用。</li></ul><h3 id="形式导功能"><a href="#形式导功能" class="headerlink" title="形式导功能"></a>形式导功能</h3><ul><li>创新思考方式：从问题到答案和从答案到问题，两种不同的创新思考方向。</li><li>实际案例：婴儿瓶的颜色变化、父爱医药的产品转型、三M便利贴的发明等。</li></ul><h1 id="产品创新工具"><a href="#产品创新工具" class="headerlink" title="产品创新工具"></a>产品创新工具</h1><h2 id="创新工具的来源与应用"><a href="#创新工具的来源与应用" class="headerlink" title="创新工具的来源与应用"></a>创新工具的来源与应用</h2><ul><li>来源: 研究二十万种创新发明。</li><li>应用: 使用创新工具打破视线的历史，加快创新过程。</li></ul><h2 id="创新案例分析"><a href="#创新案例分析" class="headerlink" title="创新案例分析"></a>创新案例分析</h2><h3 id="随身听的创新"><a href="#随身听的创新" class="headerlink" title="随身听的创新"></a>随身听的创新</h3><ul><li>原始需求: 飞机上的音乐播放。</li><li>创新过程: 移除录音和喇叭功能，使用耳机替代。</li><li>市场反应: 最初不被市场接受，后证明有市场需求。</li></ul><h3 id="减法策略"><a href="#减法策略" class="headerlink" title="减法策略"></a>减法策略</h3><ol><li>列出产品组成部分。</li><li>删除基础组件。</li><li>想象新产品形态。</li><li>市场过滤器: 确定市场需求。</li><li>可行性过滤器: 技术上的可实现性。</li></ol><h3 id="惩罚工具"><a href="#惩罚工具" class="headerlink" title="惩罚工具"></a>惩罚工具</h3><ul><li>概念: 复制产品组件并修改属性。</li><li>示例: 360度全景相机，通过复制摄像头并改变其角度。</li></ul><h3 id="出发工具"><a href="#出发工具" class="headerlink" title="出发工具"></a>出发工具</h3><ul><li>概念: 分解产品后进行重组。</li><li>类型: 物理型、工理型、保留型。</li><li>应用: 物理型出发的模块化冰箱，工理型出发的中央空调式冰箱，保留型出发的车载冰箱。</li></ul><h3 id="加法工具"><a href="#加法工具" class="headerlink" title="加法工具"></a>加法工具</h3><ul><li>概念: 为产品组件增加新功能。</li><li>示例: 瓶盖、瓶身、标签增加新功能，如瓶身转换为健身器材。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>尝试使用加减成储工具，对公司产品进行创新。</li><li>分享创新成果。</li></ul><h1 id="服务创新工具"><a href="#服务创新工具" class="headerlink" title="服务创新工具"></a>服务创新工具</h1><h2 id="1-持续创新的必要性"><a href="#1-持续创新的必要性" class="headerlink" title="1. 持续创新的必要性"></a>1. 持续创新的必要性</h2><ul><li><strong>产品和服务创新的局限性</strong>：单纯的产品创新和服务创新不足以保证企业的持续发展。</li><li><strong>企业生命周期与创新</strong>：企业、产品、商业模式均遵循生命周期规律。创新是为了在生命周期的不同阶段保持企业的活力和竞争力。</li></ul><h2 id="2-创新管理的重要性"><a href="#2-创新管理的重要性" class="headerlink" title="2. 创新管理的重要性"></a>2. 创新管理的重要性</h2><ul><li><strong>诺基亚案例分析</strong>：诺基亚未能及时从功能机转向智能手机，导致其市场地位被取代。</li><li><strong>腾讯案例分析</strong>：腾讯通过从QQ到微信的转型，成功实现了业务的持续增长。</li></ul><h2 id="3-持续创新的四个飞轮"><a href="#3-持续创新的四个飞轮" class="headerlink" title="3. 持续创新的四个飞轮"></a>3. 持续创新的四个飞轮</h2><ul><li><strong>创新的战略</strong>：由CEO等高层领导制定，确定企业创新的方向和重点。</li><li><strong>创新的组织</strong>：创建有利于创新的组织结构，包括独立的创新团队或将创新部门整合到现有组织中。</li><li><strong>系统流程</strong>：建立有效的创新管理流程，确保创新活动的有效执行。</li><li><strong>创新的文化</strong>：培养企业内部鼓励创新、容忍失败和奖励创新的文化环境。</li></ul><h2 id="4-创新实践案例"><a href="#4-创新实践案例" class="headerlink" title="4. 创新实践案例"></a>4. 创新实践案例</h2><ul><li><strong>耐克公司案例</strong>：通过渐进性创新和突破性创新，实现了在DVD租赁业务到在线视频播放的转型。</li><li><strong>华为公司案例</strong>：实施IPD流程，确保创新项目的有效管理和执行。</li></ul><h2 id="5-总结与反思"><a href="#5-总结与反思" class="headerlink" title="5. 总结与反思"></a>5. 总结与反思</h2><ul><li>持续创新不仅涉及产品和服务，还包括商业模式的创新。</li><li>企业需要在技术创新和商业模式创新上取得平衡。</li><li>持续创新的成功需要企业在战略、组织、流程和文化上共同努力。</li></ul><h2 id="6-小结-1"><a href="#6-小结-1" class="headerlink" title="6. 小结"></a>6. 小结</h2><ul><li><strong>企业发展的持续创新路径</strong>：通过上述内容，我们了解了如何通过持续创新来推动企业的可持续发展。</li><li><strong>应用与实践</strong>：企业应结合自身情况，分析在创新战略、组织、流程和文化方面的需求，从而实现卓越的发展道路。</li></ul><h1 id="持续创新"><a href="#持续创新" class="headerlink" title="持续创新"></a>持续创新</h1><h2 id="服务创新概述"><a href="#服务创新概述" class="headerlink" title="服务创新概述"></a>服务创新概述</h2><p>服务创新不同于产品创新，它关注的是整体服务流程，而非单一产品点。服务创新通过连接不同的服务点，构建全面的客户体验。</p><h2 id="用户旅程地图"><a href="#用户旅程地图" class="headerlink" title="用户旅程地图"></a>用户旅程地图</h2><p>用户旅程地图是从客户视角出发，分析整个服务流程，以发现改进机会的工具。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>帮助团队了解并改进服务系统。</li><li>提供服务创新的视角和工具。</li></ul><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><ul><li>广告、指示标、商场布局等形成品牌形象。</li><li>不同的接触点，如广告牌、购物车、服务人员等，共同构建用户体验。</li></ul><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>用户在每个接触点的体验。</li><li>发现创新机会。</li></ul><h2 id="用户旅程地图的应用"><a href="#用户旅程地图的应用" class="headerlink" title="用户旅程地图的应用"></a>用户旅程地图的应用</h2><ol><li><strong>定义阶段</strong>：明确服务的前中后阶段，考虑时间跨度。</li><li><strong>接触点分析</strong>：识别与用户接触的各种点，包括物理、数字和人机触点。</li><li><strong>情绪地图</strong>：标记用户在各阶段的情绪变化，识别高峰和低谷。</li></ol><h2 id="服务创新机会"><a href="#服务创新机会" class="headerlink" title="服务创新机会"></a>服务创新机会</h2><ul><li><strong>痛点</strong>：用户需求未得满足的地方。</li><li><strong>爽点</strong>：需求得到满足，产生正面体验的地方。</li><li><strong>扬点</strong>：满足用户理想或虚拟需求的地方。</li></ul><h2 id="用户旅程地图的七个创新方法"><a href="#用户旅程地图的七个创新方法" class="headerlink" title="用户旅程地图的七个创新方法"></a>用户旅程地图的七个创新方法</h2><ol><li><strong>重新排序</strong>：调整服务流程的步骤。</li><li><strong>剪法</strong>：去除不必要的服务环节。</li><li><strong>升波风</strong>：提升用户体验的高峰点。</li><li><strong>填波谷</strong>：改善用户体验的低谷点。</li><li><strong>凤头</strong>：优化服务旅程的开始。</li><li><strong>报尾</strong>：创造印象深刻的服务结束。</li><li><strong>延伸旅程</strong>：在服务前后提供额外体验。</li></ol><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>通过用户旅程地图和服务创新的方法，可以显著提高服务质量，创造更佳的客户体验。期待您的创新成果。</p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-自我管理03-结构化思维：金字塔原理与应用</title>
    <link href="/manager-self-managment-03-structured-thinking/"/>
    <url>/manager-self-managment-03-structured-thinking/</url>
    
    <content type="html"><![CDATA[<h1 id="思维金字塔原理与表达技巧，让表达更有效"><a href="#思维金字塔原理与表达技巧，让表达更有效" class="headerlink" title="思维金字塔原理与表达技巧，让表达更有效"></a>思维金字塔原理与表达技巧，让表达更有效</h1><p>结论先行：理解的关键,借助结论先行，快速把握文章或演讲的核心，使用金字塔原理：提升表达的清晰度和效率。</p><h2 id="大脑的工作方式"><a href="#大脑的工作方式" class="headerlink" title="大脑的工作方式"></a>大脑的工作方式</h2><ul><li><strong>大脑喜欢有序</strong>：大脑为了简化信息处理，倾向于寻找事物之间的关系。</li><li><strong>例子</strong>：星座的识别展示了大脑如何将信息组织成易于理解的形式。</li></ul><h2 id="记忆和理解"><a href="#记忆和理解" class="headerlink" title="记忆和理解"></a>记忆和理解</h2><ul><li><strong>记忆的难易程度</strong>：无关联的信息难以记忆，而有逻辑关系的信息更易于被记住。</li><li><strong>实例演示</strong>：通过关联词汇，展示如何提高记忆效率。</li></ul><h2 id="逻辑推理"><a href="#逻辑推理" class="headerlink" title="逻辑推理"></a>逻辑推理</h2><ul><li><strong>归纳推理</strong>：从具体事实推出一般结论。</li><li><strong>演绎推理</strong>：从一般前提推导出具体结论。</li><li><strong>案例分析</strong>：通过生活中的例子，解释归纳和演绎推理的应用。</li></ul><h2 id="结构化思维"><a href="#结构化思维" class="headerlink" title="结构化思维"></a>结构化思维</h2><ul><li><strong>思维结构</strong>：如何使用时间、空间和程度等结构来组织思维。</li><li><strong>规达推理</strong>：通过共同的要素提炼出中心思想。</li></ul><h2 id="金字塔原理简介"><a href="#金字塔原理简介" class="headerlink" title="金字塔原理简介"></a>金字塔原理简介</h2><p>金字塔原理是由芭芭拉·明托（Barbara Minto）女士提出的一种思考、表达和解决问题的逻辑框架。它以“结论先行”为核心，将复杂的信息按照逻辑顺序进行层层分解，最终形成一个类似金字塔的结构。</p><h3 id="金字塔原理的核心思想是："><a href="#金字塔原理的核心思想是：" class="headerlink" title="金字塔原理的核心思想是："></a>金字塔原理的核心思想是：</h3><ul><li>任何复杂的信息都可以归纳出一个中心思想。</li><li>中心思想由3-7个主要论点支持。</li><li>每个主要论点又可以由3-7个次要论点支持，如此类推，形成金字塔结构。</li></ul><h3 id="金字塔原理的优点是："><a href="#金字塔原理的优点是：" class="headerlink" title="金字塔原理的优点是："></a>金字塔原理的优点是：</h3><ul><li>思路清晰，重点突出。</li><li>逻辑严谨，易于理解和记忆。</li><li>表达简洁，节省时间和精力。</li></ul><h3 id="金字塔原理的应用"><a href="#金字塔原理的应用" class="headerlink" title="金字塔原理的应用"></a>金字塔原理的应用</h3><p>金字塔原理可以广泛应用于各种领域，包括：</p><ul><li>写作：可以用于撰写各类文章、报告、提案等。</li><li>演讲：可以用于准备演讲、汇报等。</li><li>思考：可以用于理清思路、解决问题等。</li><li>沟通：可以用于提高沟通效率、达成共识等。</li></ul><h3 id="金字塔原理的总结"><a href="#金字塔原理的总结" class="headerlink" title="金字塔原理的总结"></a>金字塔原理的总结</h3><p>金字塔原理是一种高效的思考、表达和解决问题的工具。它可以帮助我们更好地组织信息、清晰地表达观点、有效地解决问题。</p><h3 id="金字塔原理的四个基本原则："><a href="#金字塔原理的四个基本原则：" class="headerlink" title="金字塔原理的四个基本原则："></a>金字塔原理的四个基本原则：</h3><ol><li>结论先行：每篇文章或演讲都应该只有一个中心思想，并将其放在最前面。</li><li>以上统下：每一层的思想必须是对下一层思想的总结概括。</li><li>归类分组：每一组中的思想必须属于同一逻辑范畴。</li><li>逻辑递进：每一组中的思想必须按照逻辑顺序排列。</li></ol><p>学习和应用金字塔原理，可以帮助我们：</p><ul><li>提高思考的清晰度和逻辑性。</li><li>增强表达的有效性和影响力。</li><li>提升解决问题的效率和能力。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>有效的思维和表达需要结构化的逻辑。</li><li>通过金字塔原理和类比关系，可以使信息更加有序和易于理解。</li></ul><h2 id="训练技巧"><a href="#训练技巧" class="headerlink" title="训练技巧"></a>训练技巧</h2><ul><li>抓住听众的注意力。</li><li>人们的注意力容易分散，开场部分至关重要。</li></ul><h2 id="开场技巧"><a href="#开场技巧" class="headerlink" title="开场技巧"></a>开场技巧</h2><ul><li>讨论开场的重要性和技巧。</li><li>举例说明不同开场方式的效果。</li></ul><h2 id="金字塔结构应用"><a href="#金字塔结构应用" class="headerlink" title="金字塔结构应用"></a>金字塔结构应用</h2><ul><li>在写作和演讲中应用金字塔结构。</li><li>案例分析：如何找到痛点和兴趣点。</li></ul><h2 id="SCQA模型"><a href="#SCQA模型" class="headerlink" title="SCQA模型"></a>SCQA模型</h2><ul><li>解释SCQA（Situation, Complication, Question, Answer）模型。</li><li>通过案例展示如何应用SCQA模型。</li></ul><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><ul><li>讨论SCQA模型在不同情境下的应用。</li><li>调整SCQA模型以适应不同的场景和目标。</li></ul>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-自我管理02-通往卓越的五个定律</title>
    <link href="/manager-self-managment-02-five-laws/"/>
    <url>/manager-self-managment-02-five-laws/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="定律一：主动积极，落实行动"><a href="#定律一：主动积极，落实行动" class="headerlink" title="定律一：主动积极，落实行动"></a>定律一：主动积极，落实行动</h1><ul><li>在压力下保持积极心态。</li><li>扩大影响圈，提升个人和团队效率。</li></ul><h1 id="定律二：以终为始，贯彻始终"><a href="#定律二：以终为始，贯彻始终" class="headerlink" title="定律二：以终为始，贯彻始终"></a>定律二：以终为始，贯彻始终</h1><ul><li>确立清晰目标，始终如一地执行。</li></ul><h2 id="关键内容"><a href="#关键内容" class="headerlink" title="关键内容"></a>关键内容</h2><ol><li><strong>设定目标与职业发展的重要性</strong><ul><li>目标在职业发展中的核心作用。</li></ul></li><li><strong>目标与角色的匹配</strong><ul><li>如何使个人目标与组织目标相结合。</li></ul></li></ol><h2 id="TOP模型介绍"><a href="#TOP模型介绍" class="headerlink" title="TOP模型介绍"></a>TOP模型介绍</h2><ul><li><strong>模型构成：</strong><ul><li>T：个人才干（Talent）</li><li>O：组织需求（Organization）</li><li>P：个人职业定位（Position）</li></ul></li><li><strong>核心理念：</strong><ul><li>寻找三者的交集，实现核心价值。</li></ul></li></ul><h2 id="目标设定与角色匹配"><a href="#目标设定与角色匹配" class="headerlink" title="目标设定与角色匹配"></a>目标设定与角色匹配</h2><ul><li><strong>实际情况分析：</strong><ul><li>很多人的个人目标与组织目标不一致，导致矛盾和不满。</li><li>重点在于寻找个人与组织目标的共同点。</li></ul></li></ul><h2 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h2><ul><li><strong>个人在社会中的多重角色：</strong><ul><li>例如：职业、家庭、社交等角色。</li></ul></li><li><strong>角色的重要性排序：</strong><ul><li>根据当前生活阶段，确定不同角色的优先级。</li></ul></li></ul><h2 id="角色与目标的一致性"><a href="#角色与目标的一致性" class="headerlink" title="角色与目标的一致性"></a>角色与目标的一致性</h2><ul><li><strong>目标设定的指导原则：</strong><ul><li>确保个人目标与当前最重要的角色相匹配。</li></ul></li><li><strong>利用雷达图进行角色分析：</strong><ul><li>确定并评分个人各角色的重要程度。</li></ul></li></ul><h2 id="行动计划"><a href="#行动计划" class="headerlink" title="行动计划"></a>行动计划</h2><ul><li><strong>按季度设定具体目标：</strong><ul><li>例如：职业成就、家庭关系、个人兴趣等。</li></ul></li><li><strong>目标管理的重要性：</strong><ul><li>明确目标对于个人和团队都至关重要。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>以中为始，贯彻始终：</strong><ul><li>确定目标，根据角色调整，制定并执行行动计划。</li></ul></li><li><strong>目标与角色的和谐统一：</strong><ul><li>保证目标与当前生活阶段和角色相一致。</li></ul></li></ul><h1 id="定律三：全身心关注"><a href="#定律三：全身心关注" class="headerlink" title="定律三：全身心关注"></a>定律三：全身心关注</h1><ul><li>专注个人成长和团队协作。</li><li>全方位关注管理的各个方面。</li></ul><h2 id="时间管理的挑战"><a href="#时间管理的挑战" class="headerlink" title="时间管理的挑战"></a>时间管理的挑战</h2><ul><li>时间紧张，任务繁重</li><li>高效时间管理的重要性</li></ul><h3 id="时间管理三个关键知识点"><a href="#时间管理三个关键知识点" class="headerlink" title="时间管理三个关键知识点"></a>时间管理三个关键知识点</h3><ol><li>时间管理误区<ol><li>花时间在低价值任务上</li><li>缺乏拒绝能力，导致工作量过大</li><li>缺乏计划性，目标不清晰</li></ol></li><li>时间矩阵<ol><li>四个象限：紧急且重要、重要但不紧急、紧急但不重要、既不紧急也不重要</li><li>理想时间分配：紧急且重要（20%），重要但不紧急（50%），紧急但不重要（20%），既不紧急也不重要（10%）</li></ol></li><li>行动实践<ol><li>有效的时间分配方法</li><li>制定个人及团队时间规划表</li></ol></li></ol><h3 id="时间管理技巧"><a href="#时间管理技巧" class="headerlink" title="时间管理技巧"></a>时间管理技巧</h3><ul><li>制定周/月/季度/年度计划</li><li>优先处理“大石头”任务</li><li>制定任务清单，合理安排时间</li><li>学会拒绝，保持工作重点</li></ul><h3 id="时间管理工具推荐"><a href="#时间管理工具推荐" class="headerlink" title="时间管理工具推荐"></a>时间管理工具推荐</h3><ul><li>提供一些常用且有效的时间管理软件建议</li></ul><h1 id="定律四：双赢思维，知己知彼"><a href="#定律四：双赢思维，知己知彼" class="headerlink" title="定律四：双赢思维，知己知彼"></a>定律四：双赢思维，知己知彼</h1><ul><li>建立合作伙伴关系。</li><li>理解并利用团队优势。</li></ul><p>前三个定律涉及个人管理。第四定律转向团队管理，强调团队协作的重要性。</p><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><ul><li>双赢的核心：双赢不是无限制的，它有其前提和条件。</li><li>职体交流：关注团队成员之间的交流和合作。</li></ul><h2 id="双赢的实现"><a href="#双赢的实现" class="headerlink" title="双赢的实现"></a>双赢的实现</h2><ul><li>双赢要求双方的平衡和互利互惠。</li><li>强调相互尊重和信任。</li><li>共同目标和价值观是双赢的基础。</li></ul><h2 id="跨部门合作"><a href="#跨部门合作" class="headerlink" title="跨部门合作"></a>跨部门合作</h2><ul><li>合作的基础是共同的价值观和目标。</li><li>重视互利及平等的合作关系。</li><li>寻求共同点，尊重差异。</li></ul><h2 id="有效沟通"><a href="#有效沟通" class="headerlink" title="有效沟通"></a>有效沟通</h2><ul><li>采用双赢的沟通策略。</li><li>适用于团队内部及跨部门合作。</li><li>理解和尊重对方的立场和需求。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>双赢思维在团队管理和跨部门合作中的应用。</li><li>重视共情、理解对方需求，寻求共同点。</li><li>强调团队内部和部门间的协作与沟通。</li></ul><h1 id="定律五：统合宗旨，不断更新"><a href="#定律五：统合宗旨，不断更新" class="headerlink" title="定律五：统合宗旨，不断更新"></a>定律五：统合宗旨，不断更新</h1><ul><li>不断更新个人和团队策略。</li><li>适应变化，追求更高成就。</li></ul><h2 id="统合增效"><a href="#统合增效" class="headerlink" title="统合增效"></a>统合增效</h2><ul><li>概念理解：理解统合增效的基本概念，即通过团队协作创造的价值大于各部分之和。</li><li>案例分析：分析“管轩月坏”案例，展示如何通过团队合作克服单一部门的局限性，实现更丰富的月度成果。</li><li>实际应用：讨论如何在日常管理中实施统合增效，包括跨部门合作和内部协调。</li></ul><h2 id="团队目标设定"><a href="#团队目标设定" class="headerlink" title="团队目标设定"></a>团队目标设定</h2><ul><li>目标一致性：确保部门目标与公司整体目标一致。</li><li>目标实现：实现各部门目标的方法和策略，以及如何有效地监测和调整。</li></ul><h2 id="个人与团队发展"><a href="#个人与团队发展" class="headerlink" title="个人与团队发展"></a>个人与团队发展</h2><ul><li>四大领域的自我提升：身体健康、情感关系、专业知识、心态和情绪管理。</li><li>团队建设：如何通过团队活动和交流提高团队凝聚力和合作效率。</li></ul><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><ul><li>案例讨论：根据现实案例讨论团队管理的实际应用，包括跨部门合作和冲突解决。</li><li>角色扮演：通过角色扮演练习，模拟解决团队管理中的常见问题。</li></ul><h2 id="小结总结"><a href="#小结总结" class="headerlink" title="小结总结"></a>小结总结</h2><ul><li>关键要点回顾：回顾统合增效、团队目标设定、个人与团队发展的关键点。</li><li>实践建议：提供实际操作建议，帮助经理们将课程内容应用于日常管理工作。</li></ul>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理者的自我修养-自我管理01-管理概念基本认知</title>
    <link href="/manager-self-managment-01-basic/"/>
    <url>/manager-self-managment-01-basic/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="新经理的角色认知与定位"><a href="#新经理的角色认知与定位" class="headerlink" title="新经理的角色认知与定位"></a>新经理的角色认知与定位</h1><p>当我们从员工转变为新经理时，经常会面临一些挑战和恐惧。新任经理在成为经理之前大多数没有接受过管理技能培训。从个人贡献者转变为管理者，意味着角色、资源、技能、压力和责任的全面变化。</p><p>我们可能会担心：</p><ul><li>如何获得员工的尊重，尤其是面对资深员工。</li><li>如何提高员工的工作积极性。</li><li>如何在融入团队和保持经理威严之间找到平衡。</li><li>这些都是所有管理者面临的常见问题。</li></ul><h2 id="管理者的挑战与责任"><a href="#管理者的挑战与责任" class="headerlink" title="管理者的挑战与责任"></a>管理者的挑战与责任</h2><p>成为新经理后，要理解所谓的“能力陷阱”。业务能力不等于管理能力。管理是一个需要耐心和方法的慢过程。我们面对的是不确定性和多变性，因此必须培养良好的管理内功。</p><p>管理不仅仅是技术和招式，更重要的是理解管理原理。管理者需要关注团队和思考问题的方式，而不是仅仅依赖于技术或模型。</p><p>接下来论述成为合格管理者的内容概览分为五个模块：</p><ul><li>管理基本概念：介绍管理的基本定义和概念。</li><li>新经理的角色认知与定位：分析新经理作为下属和同级的角色。</li><li>新经理的上级角色认知与定位：探讨新经理作为上司的角色和定位。</li><li>管理技能：介绍作为上司的管理技能。</li><li>代人技能：讨论新经理的代理技能。</li></ul><p>管理学大师及其理论：</p><ul><li>弗雷德里克·泰勒：科学管理之父，重视工作效率和标准化。</li><li>彼得·德鲁克：管理学大师，强调目标管理、知识工作者的重要性。<br>我们将比较这两位大师的管理思想，探讨它们在工业时代和知识时代的应用。</li></ul><h1 id="新任管理者的角色理解"><a href="#新任管理者的角色理解" class="headerlink" title="新任管理者的角色理解"></a>新任管理者的角色理解</h1><h2 id="新管理者作为下属的角色认知"><a href="#新管理者作为下属的角色认知" class="headerlink" title="新管理者作为下属的角色认知"></a>新管理者作为下属的角色认知</h2><p>作为新任经理，重要的是理解上级的意图和期望。可能存在的问题包括：</p><ul><li>业务能力强，但上级不满意。</li><li>与上级缺乏有效沟通。</li><li>对上级的指示理解不足或不完全。</li><li>解决这些问题的关键是与上级保持有效沟通，理解其战略意图，并确保执行。</li></ul><h2 id="汇报与请示"><a href="#汇报与请示" class="headerlink" title="汇报与请示"></a>汇报与请示</h2><p>有效的汇报和请示是关键。我们提倡112原则：</p><ul><li>一多：多汇报，保持沟通。</li><li>一少：汇报时内容简洁，重点突出。</li><li>两不要：避免混杂请示和个人邀功。</li><li>请示时，关键是提出问题和可能的解决方案，以便上级做出选择。</li></ul><h2 id="新经理作为同级的角色认知"><a href="#新经理作为同级的角色认知" class="headerlink" title="新经理作为同级的角色认知"></a>新经理作为同级的角色认知</h2><p>部门间应建立“互为客户”的关系，理解和尊重彼此的角色和职责。部门间的协作对于整个组织的成功至关重要。</p><ul><li>互为客户关系的八要素</li><li>销售员心态：满足客户部门要求。</li><li>与客户沟通的态度：真诚、协商。</li><li>对输入部门提要求，如同对供应商。</li><li>签订合同：明确具体要求和期限。</li><li>及时信息反馈和调整。</li><li>重视同级部门的评价。</li><li>注重部门间关系协调。</li><li>互助互帮，实现共赢。</li></ul><h2 id="新经理作为上司的角色认知"><a href="#新经理作为上司的角色认知" class="headerlink" title="新经理作为上司的角色认知"></a>新经理作为上司的角色认知</h2><p>作为新任经理，你需要：</p><ul><li>明确自己的角色和职责。</li><li>理解并执行上级的战略意图。</li><li>有效地沟通和管理下属。</li></ul><h1 id="新经理的角色定位与职责"><a href="#新经理的角色定位与职责" class="headerlink" title="新经理的角色定位与职责"></a>新经理的角色定位与职责</h1><h2 id="新经理的角色回顾"><a href="#新经理的角色回顾" class="headerlink" title="新经理的角色回顾"></a>新经理的角色回顾</h2><ul><li>作为下属：上级职责的延伸，战略的执行者。</li><li>作为同级：部门的协同者，建立互为客户的关系。</li><li>新经理作为上司的挑战</li></ul><h2 id="成为新经理后，可能面临的挑战包括："><a href="#成为新经理后，可能面临的挑战包括：" class="headerlink" title="成为新经理后，可能面临的挑战包括："></a>成为新经理后，可能面临的挑战包括：</h2><ul><li>重复个人工作：由于缺乏管理经验，倾向于亲力亲为。</li><li>追求技术完美：忽略团队协作，过度关注个人技能。</li><li>过分谨慎：缺乏决策的果断性，可能错过重要时机。</li><li>自我中心：强调个人能力，忽略团队发展。</li></ul><h2 id="新经理角色变化"><a href="#新经理角色变化" class="headerlink" title="新经理角色变化"></a>新经理角色变化</h2><p>从个人贡献者转变为新经理，角色变化主要包括：</p><ul><li>从业务专家到团队协调者。</li><li>从明星球员到主教练。</li><li>从独立执行到通过他人完成任务。</li><li>从具体业务到考虑团队发展。</li></ul><h2 id="新经理的角色定位"><a href="#新经理的角色定位" class="headerlink" title="新经理的角色定位"></a>新经理的角色定位</h2><p>作为上司，新经理的角色定位有两个方面：</p><ul><li>业务的管理者：负责业务结果，制定目标和计划，有效行动，控制执行。</li><li>团队的领导者：以身作则，正确委派工作，反馈激励，合理授权。</li></ul><p>领导力的五个层次</p><ul><li>头衔领导：使用职位权力。</li><li>关系领导：基于人际关系。</li><li>结果领导：以业绩为导向。</li><li>人才培养领导：关注员工成长。</li><li>人格魅力领导：激发团队潜力。</li></ul><h1 id="新经理作为业务管理者的四大职责"><a href="#新经理作为业务管理者的四大职责" class="headerlink" title="新经理作为业务管理者的四大职责"></a>新经理作为业务管理者的四大职责</h1><h2 id="1-设定目标"><a href="#1-设定目标" class="headerlink" title="1. 设定目标"></a>1. 设定目标</h2><ul><li>目标管理概念：提出于50年代，关注于确定目标、行动方案及执行方法。</li><li>目标设定重点：理解老板的目标，然后进行目标分解。</li><li>目标的性质：目标不仅是为了实现，也具有指导性作用。</li><li>显性与隐性目标：显性目标可能是具体数字，而隐性目标包括团队成长、新工作方法等。</li></ul><h2 id="2-制定计划"><a href="#2-制定计划" class="headerlink" title="2. 制定计划"></a>2. 制定计划</h2><ul><li>计划制定的误解：许多新经理误认为计划是多余的。</li><li>计划的重要性：计划是为了应对变化，统一工作方向，降低风险。</li><li>计划制定过程：包括解读目标、激发团队思考、确保共识等。</li><li>计划制定步骤：包括明确目标、分解工作、匹配资源、确定程序、预防风险、沟通策略、计划更新。</li></ul><h2 id="3-有效行动"><a href="#3-有效行动" class="headerlink" title="3. 有效行动"></a>3. 有效行动</h2><ul><li>关注重要目标：识别并集中精力在关键任务上。</li><li>避免救火行为：不要陷入应急管理，而应专注于重要且有杠杆效应的任务。</li><li>每日规划：建立每日任务清单，确定优先顺序，逐项完成。</li></ul><h2 id="4-跟进检查"><a href="#4-跟进检查" class="headerlink" title="4. 跟进检查"></a>4. 跟进检查</h2><ul><li>检查阶段：包括确认任务开始、执行正确性、完成情况和质量评估。</li><li>检查方法：根据任务和员工的不同，采用适当的检查方式。</li><li>检查动机：确保检查是为了帮助员工，而不是仅为管理者自身目的。</li></ul><h1 id="业务管理者角色"><a href="#业务管理者角色" class="headerlink" title="业务管理者角色"></a>业务管理者角色</h1><h2 id="业务管理者的四大职责"><a href="#业务管理者的四大职责" class="headerlink" title="业务管理者的四大职责"></a>业务管理者的四大职责</h2><ol><li>设定目标<ul><li>目标管理的三步走：<ul><li>确定目标是什么。 </li><li>明确我们应该做什么。</li><li>探讨怎么做。</li></ul></li><li>注意力应集中在前两步，即明确目标和行动计划。</li></ul></li><li>制定计划<ul><li>区分目标与计划。</li><li>计划的重要性在于应对不确定性和变化。</li></ul></li><li>有效行动<ul><li>作为经理，需要聚焦于最重要的目标。</li><li>识别并执行关键任务。</li></ul></li><li>跟进检查<ul><li>监控任务的进展和质量。</li><li>确保任务的正确执行和完成。</li></ul></li></ol><h2 id="SMART-目标"><a href="#SMART-目标" class="headerlink" title="SMART 目标"></a>SMART 目标</h2><ul><li>具体性 (Specific)</li><li>可度量性 (Measurable)</li><li>可实现性 (Achievable)</li><li>相关性 (Relevant)</li><li>时间限制 (Time-bound)</li></ul><h2 id="制定计划的七个步骤"><a href="#制定计划的七个步骤" class="headerlink" title="制定计划的七个步骤"></a>制定计划的七个步骤</h2><ol><li>确定目标。</li><li>工作分解。</li><li>资源匹配。</li><li>工作流程。</li><li>风险管理。</li><li>沟通策略。</li><li>计划更新。</li></ol><h2 id="工作分解"><a href="#工作分解" class="headerlink" title="工作分解"></a>工作分解</h2><ul><li>将业务目标转化为具体的 SMART 目标。</li><li>将 SMART 目标分解为行为指标。</li></ul><h2 id="有效行动"><a href="#有效行动" class="headerlink" title="有效行动"></a>有效行动</h2><ul><li>确定并专注于重要目标。</li><li>避免将时间浪费在次要任务上。</li></ul><h2 id="跟进检查"><a href="#跟进检查" class="headerlink" title="跟进检查"></a>跟进检查</h2><ul><li>检查任务的进展、正确性、完成度和质量。</li><li>使用不同的检查方式，如微信、电话、邮件、现场查看等。</li></ul><h1 id="充当团队领导者的四大职责"><a href="#充当团队领导者的四大职责" class="headerlink" title="充当团队领导者的四大职责"></a>充当团队领导者的四大职责</h1><h2 id="一、以身作则"><a href="#一、以身作则" class="headerlink" title="一、以身作则"></a>一、以身作则</h2><ul><li>关键要素：能力成熟度、心智成熟度（管理情绪、容忍错误、理解他人、替他人着想等）</li><li>影响方式：区分Position Power（权位，如命令、威胁）和Personal Power（权威，如说服、榜样）</li></ul><h2 id="二、正确委派"><a href="#二、正确委派" class="headerlink" title="二、正确委派"></a>二、正确委派</h2><ul><li>前提：理解每个员工是独特的，有不同的优势和潜力</li><li>任务分派工具：使用工具如MBTI、Enneagram等来识别员工擅长领域</li><li>注意事项：识别每个人的擅长领域，避免将自己的价值观强加于员工</li></ul><h2 id="三、反馈激励"><a href="#三、反馈激励" class="headerlink" title="三、反馈激励"></a>三、反馈激励</h2><ul><li>激励方法：不仅仅依赖物质激励，更应关注精神层面（价值感、成就感、自主性）</li><li>反馈原则：<ul><li>立即具体：针对具体行为及时给予反馈</li><li>关注行为和结果：使用SBI（Situation-Behavior-Impact）模型</li><li>避免情绪化反馈：确保反馈在理智状态下进行</li></ul></li></ul><h2 id="四、合理授权"><a href="#四、合理授权" class="headerlink" title="四、合理授权"></a>四、合理授权</h2><ul><li>授权步骤：<ul><li>确定可授权工作</li><li>选择合适的员工</li><li>明确任务重要性和目标</li><li>界定工作权力和范围</li><li>设定限并确认理解</li><li>建立控制程序</li></ul></li></ul><p><strong>授权注意</strong>：授权并非放任，而是对最终结果负责，需要合理监督和调整</p>]]></content>
    
    
    <categories>
      
      <category>management</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何像天才一样说俏皮话？</title>
    <link href="/wisecracks-like-a-genius/"/>
    <url>/wisecracks-like-a-genius/</url>
    
    <content type="html"><![CDATA[<p><strong>本文是《俏皮话的力学原理，以及麦克斯韦妖》的2.0版，</strong></p><p>语言本身的样子，我们未必看得见。它不仅用于理解、误解这个世界，也作为这个世界的一部分，被理解、被误解。</p><p>文字本身，倘若具备了一点点如数学般对世界的解释能力，便呈现出某些经典力学结构，为这个愈发虚无的世界，带来些许安稳、和趣味。</p><p><strong>1、</strong></p><p>一句话基本的样子：</p><blockquote><p>“高盛、Visa、耐克（作为好公司）刚入选道指成分股。所以看起来是不是该买点儿他们的股票。”</p></blockquote><p>这句话是大部分话的样子，体现了一种逆来顺受的姿态。其结构大致如下：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-01.jpg"></p><p>95%的人，和95%的句子，都是使用这种“因为…所以…”的基本结构。</p><p><strong>其中，有些因果关系成立，有些因果关系只用于自我说服，有些因果关系尽管成立，但是被当事人所不知道的、其它的因果关系覆盖。</strong></p><p>寻常的样子，基于某种递进，也能呈现不寻常的力量。例如：</p><p>巴菲特说：</p><blockquote><p>如果你在小事上无原则，那么大事上一样没有原则。</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-02.jpg"></p><p>类似的，爱因斯坦说：</p><blockquote><p><strong>态度上的弱点会变成性格上的弱点。</strong></p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-03.jpg"></p><p>以上两句话的内在结构是“如果…那么…”。“小事”与“大事”对立，“态度（表面）”与“性格（内在）”对立，像两名对抗的橄榄球运动员，中间被一个大弹簧隔开。</p><p>巴菲特和爱因斯坦轻轻拿开弹簧，对立的概念撞击在一起，咔哒一声，犹如相机的机械快门，戏剧性和真理就这样迸发了。</p><p>智者、或者聪明人，话语呈现以下力学原理：</p><p>1、具备一个基本的静态结构A；</p><p>2、通过施加作用力，达到某个静态结构B；</p><p>3、在结构变化中，释放出逻辑的能量，或者构建了观念的张力；</p><p>4、形式上，以对称、相似性，实现话语的趣味性。</p><p><strong>2、</strong></p><p>跳回来。</p><p>2013年9月，道指在其成分股中增加了高盛、维萨和耐克，换掉了美铝（Alcoa）、美国银行（Bank of America）和惠普（Hewlett-Packard）。</p><p>结果，在这三只新加入的成分股中，只有耐克的表现优于被挤掉的三只股票中的一只，其股价上涨10%，高于美国银行7.5%的涨幅，而美铝暴涨66%，惠普暴涨59%。自9月23日被列入成分股以来，维萨上涨了7%，高盛则下跌了近2%。</p><p>由于道指传统上会增加表现出色的股票以替代股价走低的股票，只要一有迹象表明事情并没有原先担心的那么糟，那么那些被替代的股票的股价往往会迅速上涨，这一趋势让惠普和美铝这两支股票深受裨益。</p><p><strong>彼得林奇的“鸡尾酒会”理论</strong>： 他将自己作为基金经理在聚会上的待遇，分为由冷至热四个阶段，从无人搭理（该涨了），到被围观，到被吃瓜群众推荐股票（该跌了）。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-04.jpg"></p><p>以上两段，是极其带来低成本思考愉悦感的、关于逆向思考的案例和故事。</p><p>然而本文和投资、以及逆向思考都没关系。首先，作为用于投资的名词，逆向思考并无意义。</p><p>逆向，并不因为其名字牛B，就能真的牛B一点儿。</p><p>其它热乎乎的概念也是。</p><p>例如：美国小盘股在1928年11月见顶，到12月损失54%，到1930年12月又会损失38%，到1931年12月又将损失50%，最后到1932年6月再损失32%。假设1928年11月30日财富乘数是1倍，到1932年6月30日，财富乘数仅剩余0.1倍。</p><p>最喜闻乐见的逆向思考，是抄底。浪花套尽多少英雄。</p><p><strong>Swensen认为未经思考就轻率做出逆向回应的投资，会和顺势而为方法一样不尽如人意 。</strong>仅有少数具有价值鉴别能力的管理人加上具备经得起考验的资金配合才能使逆向投资避免尴尬处境。</p><p>顺势，是逆向的逆向。</p><p>大多数人会陷入痛苦的“逆向”–赌徒谬误与处置效应：赚的人卖得太早；亏的人持有太久。</p><p><strong>赌徒谬误</strong>（The Gambler’s Fallacy）亦称为蒙地卡罗谬误（The Monte Carlo Fallacy），是一种概率谬误，主张由于某事发生了很多次，因此接下来不太可能发生；或者由于某事很久没发生，因此接下来很可能会发生。</p><p>赌徒谬误的思维方式像是如此：抛一枚公平的硬币，连续出现越多次正面朝上，下次抛出正面的机率就越小，抛出反面的机率就越大。</p><p>事实并非如此。</p><p>行为金融学中<strong>处置效应</strong>(disposition effect)”, 是指投资者太长时间地持有亏损股票而太短时间地卖掉赢利股票的倾向。</p><p>LinkedIn创始人Reid Hoffman认为，<strong>逆向思考并不难，难的是逆向正确思考</strong>。</p><p>很多时候，当你周围的聪明人都不认同你的创业想法和模式时，要静下心来仔细分析他们为什么不认同，有没有你所了解的东西／价值点被他们所忽视。</p><p>当你确认那些被忽视的价值点时，你就很可能是对的。LinkedIn的起步就是很好的例子，当时他的朋友圈超过2／3的人都反对，不认同它的发展前景，而他确认看到了被忽视的专业人士社交网络的需求和价值点。</p><p>问题在于，当你知道你的思考是正确的时候，还算是“逆向”吗？（“正确”犹如一个黑匣子般的控制阀门。下面会提及这个位于原点的阀门。）</p><p><strong>3、</strong></p><p>逆向思维的三种类别：</p><p><strong>1、反向思维—-a、想下相反的事；b、用对立面来替代；c、假设反面是对的。</strong></p><p><strong>2、雅努斯式思维—-使事物的正反两个方面并存于大脑。</strong></p><p><strong>3、黑格尔式思维—-融合、混合、结合、整合、综合两个对立面使其产生出第三种实体。</strong></p><p>简而言之：1反、2并、3合。 </p><p>雅各比的一句话：“<strong>反过来想，总是反过来想</strong>”。</p><p>1、圆珠笔问世之初，漏油麻烦。一般的思路是提高其耐磨性来解决，但最终都失败了。后来，根据圆珠笔写20000个字开始漏油这一点，减少装油量，使其写字范围局限于15000个字左右，搞掂。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-05.jpg">（如上，我们大约能理解为什么很多创新者都是混球或者刺儿头。）</p><p>2、当年几乎所有人都在试图修正麦克斯韦的电磁定律，以便它能够符合牛顿的三大运动定律，然而<strong>爱因斯坦却转了个180度大弯</strong>，修正了牛顿的定律，让其符合麦克斯韦的定律，结果他发现了相对论。   </p><p>3、达尔文能够取得这样的成就，主要是因为他的工作方式；这种方式有悖于痛苦法则，而且还特别强调逆向思考：<strong>他总是致力于寻求证据来否定他已有的理论，无论他对这种理论有多么珍惜，无论这种理论是多么得之不易</strong>。</p><p>上面三个故事中的主角，都是弓箭高手，他们能够将困难、阻力，形成巨大张力，从而射出完美一箭。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-06.jpg"></p><p><strong>雅努斯式思维</strong>–在人的大脑里构想或引入事物的正反两个方面，并使它们同时并存于大脑里，考虑它们之间的关系，相似之处、正与反、相互作用等，然后创造出新事物。这种双面思维相当艰难，因为它要求保持两个对立面并存在你的大脑中，是一种大脑技能。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-07.jpg"></p><p>哈佛大学医学院教授艾伯特·罗森伯格在他的题为《崛起的女神：艺术、科学及其他领域的创造性过程》一书中提出该概念，他把这一过程描述为“<strong>同时积极地构想出两种或更多的反题</strong>”，并把这种方法称作雅努斯式思维。雅努斯是古罗马的门卫神，他头上长有两张脸，分别朝着对立方向。　　</p><p>在他所研究的艺术及科学领域里，几乎所有突破主要都是由于同时思考到两种或更多对立面后的结果。例如：</p><p>1、沃森和克里克发现脱氧核糖核酸是由呈对立的螺旋状连接在一起的两个相同分子结构链所组成。即<strong>两个东西是可以互为对立的，但又可以同时并存</strong>。</p><p>2、诺贝尔奖得主埃德温·麦克米伦正是因为考虑到粒子可能在同一时刻既可处于高能状态也可处于低能状态，于是才萌发了制造同步加速器的想法。同步加速器是一种高能粒子加速器，通过它人们得以发现亚原子粒子的存在。</p><p>又如：在旅店行业，“五星级大床，一星级大堂”的价值曲线变化曾经开创了快捷酒店的一片蓝海（如7天、如家、汉庭，不过后来只有大堂达标了）。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-08.jpg"></p><p>关于黑格尔式思维：融合、混合、结合、整合、综合两个对立面使其产生出第三种实体。举例如下：</p><p>爱因斯坦说：</p><blockquote><p>物理学家们说我是数学家，数学家们又把我归为物理工作者。我是一个完全孤立的人，虽然所有人都认识我，却没有多少人真正了解我。</p></blockquote><p>所以，爱因斯坦的成就是因为他是一名“数学物理学家”。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-09.jpg"></p><p>巴菲特说：</p><blockquote><p>因为我把自己当成是企业的经营者，所以我成为更优秀的投资人；而因为我把自己当成是投资人，所以我成为更优秀的企业经营者。</p></blockquote><p>所以，巴菲特成为首富，因为他是一位“企业家型投资人”。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-10.jpg"></p><p><strong>4、</strong></p><p>再跳开一下。</p><p>关于自相矛盾的妙语，爱因斯坦和巴菲特都说过类似的话。</p><p>爱因斯坦说：</p><blockquote><p>这世界最费解的，是它竟可被理解。</p></blockquote><p>巴菲特说：</p><blockquote><p>我在历史中学到的唯一东西就是：大众从未从历史中汲取教训。</p></blockquote><p><strong>与其说上面的话是“自相矛盾”，不如说是“互为弓箭”。</strong></p><p>第一步：拉开弓；</p><p>第二步：射出箭。</p><p>爱因斯坦可以只是这样说：这个世界竟可以理解。</p><p>巴菲特可以只是这样说：大众从未从历史中汲取教训。</p><p>即使同样100%表达了，即使他们是超级名人，这些话语也可能不再流芳百世，更糟的是，也不再有趣了。</p><p>这方面的高手，莫过于王尔德。他说：</p><blockquote><p>我可以抗拒一切，诱惑除外。</p><p>人生的悲剧只有两种：一种是没有得到自己想要的东西，另一种是得到自己想要的东西。</p></blockquote><p>上面这句话，几乎可以作为金句万金油，例如，罗曼.罗兰说：</p><blockquote><p>一个人的痛苦，无非来自两个方面，一是没有个性，另一个是个性太强。</p></blockquote><p>类似的万金油有几瓶，实乃居家必备。</p><p>王尔德还能将“矛盾”说得更加浑然一体：</p><blockquote><p>一个人总是可以善待他毫不在乎的人。</p><p>逢场作戏和终身不渝之间的区别只在于逢场作戏稍微长一些。</p></blockquote><p>自相矛盾的力量，不仅仅来自于弓箭逻辑，即，将弓拉得更开是为了将箭射得更远；也不仅仅是王尔德式的对读者的调戏，还可能来自力量的反转。</p><p>罗曼.罗兰说：</p><blockquote><p>一无所有的人是有福的，因为他们将获得一切！</p></blockquote><p>他还曾经反过来说：</p><blockquote><p>人生就像一条抛物线，幸运的顶点，往往是厄运的开端。</p></blockquote><p>罗曼.罗兰的“自相矛盾+现实主义+乐观精神”，集中体现于下面这句话：</p><blockquote><p>生活中只有一种英雄主义，那就是认清生活的真相之后依然热爱生活。</p></blockquote><p>罗曼.罗兰昭示我们，美妙的句子是美妙思想的结果，而不是反过来。他的流传世间的话语，是深挖地底最黑暗之处后突现的光亮，仿佛命运交响曲狂风骤雨后的顿悟，如巨大铁锤般砸出硬核之内的秘密。</p><p>而王尔德则是在放烟花，他的手术刀精确地划过凡世，毫厘不差地指向心脏，却不打算、也不屑于深入下去。</p><p>人生本来充满了悖论。就像超级英雄最伟大的时刻，是那些脆弱、或者牺牲的瞬间。</p><p>罗曼.罗兰和王尔德既是解构者，又是绝境中的构建者。</p><p><strong>5、</strong></p><p>悖论是王尔德的看家武器。</p><p>悖论是表面上同一命题或推理中隐含着两个对立的结论，而这两个结论都能自圆其说。</p><p>《悖论：破解科学史上最复杂的9大谜团》一书说：</p><p>悖论（ paradox，亦可译为诡论、谬论、诡局、佯谬、吊诡或矛盾）以各种不同的形式和难度出现。</p><p>有些只是简单的逻辑矛盾，没有深入探讨的价值。例如：</p><blockquote><p>“这句话是假的。”</p></blockquote><p>假如这句话是假的，那么这句话为真；如果这句话是真的，那么这句话是假的。</p><p>有些则像是冰山的尖顶，底下是整座冰山的科学知识。</p><p>许多悖论可以透过谨慎思考，找出基本假设当中一个或多个漏洞来攻破，这种严格来说算不上是悖论，因为症结点一旦突破，它就不再是悖论了。</p><blockquote><p>“每一位南下到英格兰的苏格兰人，都提高了两个国家的平均智商”。</p></blockquote><p>这句话真的是自恋的苏格兰人对英格兰人有趣的羞辱。</p><p>通常从逻辑上无法判断正确或错误称为悖论，似非而是称为佯谬；有时候违背直觉的正确论断也称为悖论。</p><p>悖论的英文paradox一词，来自希腊语παράδοξος ，paradoxos，意思是“未预料到的”，“奇怪的”。 如果承认它是真的，经过一系列正确的推理，却又得出它是假的；如果承认它是假的，经过一系列正确的推理，却又得出它是真的。</p><p>古今中外有不少著名的悖论，它们震撼了逻辑和数学的基础，激发了人们求知和精密的思考，吸引了古往今来许多思想家和爱好者的注意力。解决悖论难题需要创造性的思考，悖论的解决又往往可以给人带来全新的观念。（摘自维基百科）</p><p>人生的焦虑，大多源自对悖论过于执着。小说或电影，可恣意放大这悖论以求消解现实。</p><p>电影《致命ID》的开篇：</p><blockquote><p>“我走上楼梯，看见一个不在那儿的人。他今天也不在，我希望他离去。”</p></blockquote><p>这开场让我头皮麻了很久。</p><p>《我曾侍候过英国国王》的开篇：</p><blockquote><p>“…我的幸福，往往来自我所遭遇的不幸。”</p></blockquote><p>电影有时比文字更易剪辑时间及分裂。</p><p><strong>6、</strong></p><p>王尔德在碎片时代因为“段子手鼻祖”而再度走红，既不幸又幸。</p><p>他绝非所谓俏皮话专家，也不只是以悖论魅惑人心，他深刻揭示了人类为世间巨大的不确定性而虚构的文化、文明之荒唐、笨拙、乃至虚伪。他说：</p><blockquote><p>每个人生来都是君王，但大多数在流亡中死去。</p><p>圣人皆有过往，罪人亦有未来。</p></blockquote><p>从王尔德对庄子的推崇，可以看出他的内心：</p><p>“庄子毕生推崇‘无为’的伟大信条，并且指出一切有用之物的无用……将行动化为思考，将思考化为抽象，这就是他狡黠而玄妙的目标。”</p><p>他推崇庄子对追求功利的反感：“世上的奖赏像世上的惩罚一样使人们堕落。崇拜成功的时代就是堕落的时代。”</p><p>在《王尔德眼里的庄子》一文，肖聿写到：</p><blockquote><p>庄子面对世俗的污浊，敢于等生死、齐万物，颠倒正统的价值观念；王尔德则敢于以他的机智与佯谬，使道貌岸然的“体面人”如芒在背，出乖露丑。</p></blockquote><p>王尔德是人性的预言家。千年以来，科学技术的进步令世界面目全非，然而人性似乎只是放大而已。这一悖论在数字化碎片时代加速传染开来。</p><p>即使如此，大师与普通人之间的文字差距有多大呢？</p><p>在史蒂芬.平克看来，极小。</p><p>语言是一种本能。他在《语言本能》中写道：</p><blockquote><p>语言并不是文化的产物，语言能力的获得不同于一般的学习模式（如学习辨认时钟或了解美国联邦政府的运作模式）。相反，语言是人类大脑组织中的一个独特构件。</p><p>一个人在儿童时期就能掌握语言这门复杂精专的技能，不用刻意学习，也无须正规教导。人们可以自如地运用语言，而不必了解其背后的逻辑和原理，而且每个人的水平都大致相当，没有质的区别，这显然有别于其他一些常见的信息处理或智能操作的能力。</p></blockquote><p>史蒂芬.平克认为：“从科学的角度来看，精密复杂的语言能力是我们与生俱来的一种生物属性，它并非源于父母的教导或学校的培养……”</p><p>他引用了王尔德的话：“教育是令人羡慕的东西，但要时刻记住：凡是值得知道的，没有一个是能够被教会的。”</p><p>史蒂芬.平克写道：一名学龄前儿童所具备的隐性语法知识远比最为厚实的写作指南或最为先进的计算机语言系统复杂得多，而且，所有健全的人都具有这一特征，即便是那些说起话来支离破碎、含混不清的职业运动员或者不善言辞的滑板少年也是一样。</p><p>换而言之，人人都是语言天才。</p><p>在外星人看来，任何人之间的差别，就像沙漠中沙子间的差别那么小。</p><p>但在沙子眼里，西施沙子和东施沙子实乃天壤之别。</p><p><strong>7、</strong></p><p>让我们像小孩儿玩儿泥巴一样，来探寻文字的趣味结构。</p><p><strong>第一类：平行递进式</strong></p><p>我妈妈喜欢说：逢翘不撵，逢贱不丢。（意思是不要追涨杀跌）</p><p>其结构如下：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-11.jpg"></p><p>又如王尔德说：</p><blockquote><p>可爱者不可信，可信者不可爱。</p></blockquote><p><strong>第二类：打破平行</strong></p><p>你的“好事儿”大多是因为运气好，但你的“坏事儿”大多不是因为运气差。</p><p>“造成巨大损失的，通常是一手看起来相当不错的牌。”一位德州扑克爱好者在谈论股票时说。</p><p>其结构类似，但打破了平行的推理，令人猝不及防。</p><p>一正一反，从而有了某种跳跃趣味。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-12.jpg"></p><p><strong>第三类：魔术般</strong></p><p>王尔德是这方面的高手。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-13.jpg"></p><p>他说过：</p><blockquote><p>一个男人只要和一个他不爱的女人在一起，就会很快乐。</p></blockquote><p>他做了一个45度的思维劈叉。如下：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-14.jpg"></p><p>王尔德的套路是：</p><p><strong>先一个动作，让你以为他下来会怎么样，其实出其不意–不按理出牌，但又击中要害。</strong></p><p>他纯熟地应用：</p><blockquote><p>“我们都在阴沟里，但仍有人仰望星空。”</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-15.jpg"></p><blockquote><p>“一个人总是可以善待他毫不在意的人。”</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-16.jpg"></p><blockquote><p>“永远宽恕你的敌人，没有什么能比这个更让他们恼怒的了。”</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-17.jpg"></p><p>再进一步。例如：</p><blockquote><p>“不够真诚是危险的，太真诚则绝对是致命的。”</p></blockquote><p>其结构如下：</p><p><strong>45度思维劈叉+人生死活都这鸟样。</strong></p><p>45度思维劈叉，负责跳跃和出其不意；</p><p>人生死活都这鸟样，负责毒舌和解构。</p><p>下面的魔术更近一步。</p><p>魔术师的秘密是障眼法。前面一大段，都是迷惑你，引诱你，让你确认自己的“以为”是正确的。</p><p>随后再制造出其不意的效果。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-18.jpg"></p><blockquote><p>“年轻的时候我以为钱就是一切，现在老了才知道，确实如此。”</p></blockquote><p>“年轻的时候我以为钱就是一切”，这是魔术师的障眼法；</p><p>“现在老了才知道，确实如此”，这是魔术师的抖包袱。</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-19.jpg"></p><blockquote><p>“世界上只有一件事比被人议论还要糟糕，那就是不被议论。”</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-20.jpg"></p><p>下面几个一样如上结构：</p><blockquote><ul><li><p>美好的肉体是为了享乐，美好的灵魂是为了痛苦。 </p></li><li><p>人生就是一件蠢事追着另一件蠢事而来，而爱情则是两个蠢东西追来追去。</p></li><li><p>恨是盲目的，爱亦然。</p></li></ul></blockquote><p>也有非王尔德这么毒舌结构的。</p><p>例如，孟子说：</p><blockquote><p>穷则独善其身，达则兼济天下。</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-21.jpg"></p><p>也是45度思维劈叉，但表达的是“<strong>本人死活都是很牛逼的</strong>”意思。</p><p>王尔德还有如下句式：</p><blockquote><ul><li><p>只有两种人最具有吸引力，一种是无所不知的人，一种是一无所知的人。</p></li><li><p>男人结婚是因为疲惫，女人结婚是因为好奇，结果双方都大失所望。</p></li><li><p>结婚是想象战胜了理智，再婚是希望战胜了经验。</p></li><li><p>我喜欢有未来的男人和有过去的女人。</p></li></ul></blockquote><p>你只消画出上述话语的力学结构图，稍加练习，很快就可以如王尔德般说俏皮话、并泡妞、或者泡帅哥了。（王尔德是两种都泡的。）</p><p>如果你足够智慧的话，你还可以双重使用这一结构。就像爱因斯坦说：</p><blockquote><p>任何一个有智力的笨蛋都可以把事情搞得更大，更复杂，也更激烈。往相反的方向前进则需要天份，以及很大的勇气。</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-22.jpg"></p><p>爱因斯坦这句话够复杂的，其结构图如上。</p><p>好吧，我以身试法，亲自作为有智力的笨蛋，以一种更大更复杂的方式，来示范了爱因斯坦的名言的力学结构。</p><p><strong>8、</strong></p><p>**<br>**</p><p><strong>文字适合抒情，但并不适合思考。我本人并非文字爱好者，而是用文字来表达思考爱好者。</strong></p><p><strong>文字是符号、工具、偶然发生器、逆向灵感赋予者、催稿人，更多的时候是思考的负累。</strong></p><p>这方面我和爱因斯坦一样。他说：</p><blockquote><p>我很少用语言来思考。想法产生后，我才会设法用语言来表述。</p></blockquote><p>基于以上，写超短的句子，是我沉溺于思考游戏、又逃避文字负累的有效手段。</p><p>同时，那些短句子最初从来都不是语言的样子，而是作为某种结构、冲突、悖论、振动、危机、绝望，如蝙蝠般在脑海中掠过。我捕获它，随后才用句子描绘出来。</p><p>思维游戏，和文字游戏，全然不同。即使思维游戏以文字游戏的面貌呈现，也有巨大的智商与趣味上的差异。</p><p>例如我的这句话：</p><blockquote><p>人像照片分四种：比本人漂亮的，比本人还漂亮的，比本人丑的，比本人还丑的。</p></blockquote><p>两个“还”字，精确地绘制出下面这个结构：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-23.jpg"></p><p>又例如我写的这段：</p><blockquote><p>心灵开放度有8种。</p><p>其结构：外层是花园，中间客厅，里面卧室。</p><p>有人花园花枝招展欲醉人，但你压根难进大门；</p><p>有人一路开放到沙发，卧室则紧锁；</p><p>有人花园里养狗但不咬人，大门厚重但不上锁，卧室门还虚掩着，看似拒人千里，一旦进入犹如老房子着火。</p><p>开关×开关×开关，是为8种。</p><p>可每种最后都还有个保险柜。</p></blockquote><p>这段不是短句子了。我自己是个社交白痴，经常看不出别人脸色，听不懂话后的话。不过这段对人的社交属性剖析，不可谓不精彩。</p><p>有人问：为什么是8种呢？如下图：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-24.jpg"></p><p>寥寥数语，绘出一个结构完美、逻辑缜密、精确量化的模型，并且重温了排列组合，为计算概率奠定了基础。</p><p><strong>9、</strong></p><p>语言本身的样子，我们未必看得见。</p><p><strong>首先，它们普遍具有某种力学意义上的结构。</strong></p><p>屈原说：“举世皆浊我独清，众人皆醉我独醒。”</p><p>巴菲特说：“在别人贪婪时恐惧，在别人恐惧时贪婪。”</p><p>他们当然不是靠依照某个力学结构而创造言语和思想，但就结构而言，那些言语和思想都符合某种经典力学原理。</p><p><strong>其次，字眼本身并无生命，惟有当其运动时。</strong></p><p>看王尔德魔术师般，1、2、3（咔啪一声）。好玩儿的句子，经常可以用非常简单的词汇，好比剑神只用木枝。</p><p><strong>虽然，大多时候，从“可操作性”看，似乎毫无用处。</strong></p><p>但它们可以让真理更为鲜活、有趣。而且，若没有它们，我们就只剩下用处。</p><p><strong>但是，它们在这虚妄的世间比绝大多数事物更久远。</strong></p><p>仿佛飘浮在人类思维星空的永动机。</p><p><strong>10、</strong></p><p>弗.斯科特.菲茨杰拉德说：</p><blockquote><p>“一流智商取决于头脑中同时存有两个相互矛盾的想法而继续思考的能力。”</p></blockquote><p>比如，人们应当在看到事情已经没有希望的时候，仍然决心扭转局势。</p><p>这个概念可以再延展开去。</p><p>例如：亦正亦邪的魅力。可爱的傻B，温柔的刽子手，绅士是有耐心的狼，诸如此类。又如我的大脑碎片的句子：</p><blockquote><p>女人偶尔会迷惑于白玫瑰或红玫瑰的角色定位，可现实中最终搞掂男人的，都是泛红的白玫瑰，或发白的红玫瑰。</p></blockquote><p>小说《飘》里写女主角：</p><blockquote><p>斯佳丽·奥哈拉长得并不漂亮，但是男人们像塔尔顿家那对孪生兄弟为她的魅力所迷住时，就不会这样想了。</p><p>她脸上有着两种特征：</p><p>一种是她母亲的娇柔，来自法兰 西血统的海滨贵族。</p><p>一种是她父亲的粗犷，来自浮华俗气的爱尔兰人。</p></blockquote><p><strong>这是一种有弓般张力的结构。</strong></p><p>例如：仁慈的暴君，慷慨的小气鬼，等等。</p><p>如爱因斯坦说：在混乱之中发现单纯。</p><p>牛顿第三定律：两个物体之间的作用力和反作用力，总是同时在一条直线上，大小相等，方向相反。</p><p>举例如下：</p><blockquote><p>“最高境界的处世艺术是不妥协却能适应现实，极端不幸的个人素质是不断妥协却还不能适应现实。”–齐美尔</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-25.jpg"></p><blockquote><p>“Think like a man of action, act like a man of thought. 要像行动者那样思考，要像思考者那样行动。”–亨利·柏格森</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-26.jpg"></p><blockquote><p>“男子的美在于刚中有柔，女子的美在于柔中有刚。”～苏珊.桑塔格</p></blockquote><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-27.jpg"></p><p>这一模型呈现了一种稳定的十字结构，比星座、八字、门户、家产，更能决定一对情侣的牢靠程度。</p><p>即：一方是外表S，心底实则M；另一方是外表M，心底实则M。</p><p><strong>S型M + M型S = 真爱到永远。</strong></p><p>那些虐来恋去的爱，最坚不可摧了。</p><p>然而，还不够。</p><p><strong>11、</strong></p><p>四格结构+弓形张力，能产生智慧与幽默。</p><p>丘吉尔擅长利用该结构张力，营造扭转的戏剧性，或构建了某个结构，或解决了某个问题。他说：</p><blockquote><p>“悲观主义者在每个机会里看到困难。乐观主义者在每个困难里看到机会。”</p></blockquote><p>至暗时刻的丘吉尔，并无多少支持者。是牺牲万千英国青年的性命，去打一场明显处于劣势的战争，还是主动求和获得“和平”？</p><p>支撑他的，除了洞察、信念、坚毅，还有上面句子里蕴含着的强大张力。丘吉尔将这力量种植于演讲当中，通过演讲复制开来，成为人类危难时刻最伟大的抵抗势力。</p><p>又如张爱玲说：</p><blockquote><p>“男人总是在一夫一妻的法律下寻求着一夫多妻的痛苦；女人总是在一夫多妻的事实下维护着一夫一妻的道德。”</p></blockquote><p>丘吉尔擅长在四格结构中穿梭自如。他的套路是：</p><p>第一步：顺势接球；</p><p>第二步：原地旋转360度，犹如铁饼运动员；</p><p>第三步：甩回去，砸向抛球者。</p><p>巧妙，幽默，借力，像太极张三丰。例如：</p><blockquote><p>阿斯特女士：如果你是我老公，我就在你酒里下毒。</p><p>丘吉尔：如果你是我老婆，我毫不犹豫喝下去。</p></blockquote><p>他教我们如何生成深刻的俏皮话：</p><blockquote><ul><li><p>他的美德我都不喜欢。我喜欢的坏他也都没有。</p></li><li><p>伟大的事情总是简单，最伟大的事情只有一个词：自游，正义，荣誉，责任，仁慈，希望。 　</p></li></ul></blockquote><p><strong>12、</strong></p><p>无论王尔德们的文字手术刀有多么精确，毕竟仍属定性范畴。为什么丘吉尔、巴菲特这些要以重大决策决定生死的高手，也要玩儿这种看起来“模棱两可、自相矛盾”的文字游戏呢？</p><p>回到“逆向思维”这个话题。</p><p>反过来其实并没有用。因为反过来是反过来的反过来。</p><p>一条真理的背后也是一条真理。人们通常都是被这一正一反两条真理夹死的。</p><p>四格结构，大多时候似乎只是一种智力的炫耀。然而，天才如王尔德，也未能游刃有余于世间。</p><blockquote><p>人生的一部分烦恼来自不懂得放弃，一部分烦恼来自过早放弃。而人生的主要烦恼来自如何识别以上二者。</p></blockquote><p>真理并无说明书。</p><p>例如本人胡扯之真理：<strong>S型M + M型S = 真爱到永远</strong>。如图：</p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-28.jpg"></p><p>解释如下：</p><p>1、平时男性霸道总裁，女性小鸟依人；</p><p>2、总裁有时很脆弱，小鸟瞬间变母鸡。</p><p>道理大家都懂，现实很残忍：霸道总裁总是遇见凶残母鸡。</p><p><strong>即：即使男女双方完美符合“S型M + M型S”，但在现实中，如果男方的外S，撞到了女方的内S，就会爆发战争；如果女方的外M，遇见男方的内M，就会性冷淡；</strong></p><p><strong>多不容易啊，双方茫茫人海中，不远万里走到一起，八字相合，星座匹配，SM内外和谐，可是，还是要苦心经营，他S时你赶紧调节到M，她M时你硬撑也得S。</strong></p><p><strong>（认真看了上面这两段并懂了的，智商在135以上。）</strong></p><p>这就是爱啊。</p><p>所以，如上图，一段持久的爱，不仅需要十字锁结构，还需要：</p><p><strong>位于原点的调节阀。</strong></p><p>1867年，麦克斯韦设想：一个能观察到所有分子速度的小精灵把守着一个容器中间隔板上小阀门，当看到右边的高速分子来到阀门时就打开让高速分子进入左室，当看到左边低速分子来到阀门时也打开让低速分子进入右室。设想阀门无摩擦，于是一个小精灵无需做功可使左室越来越热，右室越来越冷，从而使整个容器的熵降低了。</p><p><strong>这个小精灵被人们称为麦克斯韦妖。</strong></p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-29.jpg"></p><p>该模型似乎违背了热力学第二定律（熵增原理）。1929年，希拉德分析妖精若想控制开关，必须获得信息，而为获得信息所付出的代价就是系统熵的产生，而这额外的熵的产生抵消了整个容器的熵的减少，<strong>总的说起来，总的熵还是增加的。此时信息表征为负熵。</strong></p><p>在上上图中男女sm真爱四格结构的原点，亦存在这样一个“麦克斯韦妖”。男s时将女调为m，女s时将男调为m。</p><p><strong>智者的名言里，从来不提供这个黑匣子里的操作指南。</strong></p><p><img src="/assets/wisecracks-like-a-genius/2018-05-30-30.jpg"></p><p>如上图，在彼得林奇的鸡尾酒理论中，简单的逆向思维，是没有意义的。即使无人搭理，你也可能因为抄底而死。</p><p>凯恩斯说：市场保持非理性状态的时间可能比你保持不破产的时间更长。</p><p>你仍然需要一个“独立思考”的原点黑匣子。你和麦克斯韦妖一样，需要“信息”。</p><p>完美的真理，生动的案例，激动人心的经验，假如没有“麦克斯韦妖”，对你毫无帮助。</p><p>所以，当下的各种学习，只是制造幻觉、缓解焦虑罢了。哪里有什么认知升级。连电脑都不换芯片了，落伍了只会被扔掉。</p><p><strong>上帝并不提供一个你无需参与的真理。这可能是某种真正意义上的自由意志。</strong></p><p>如布尼尔祈的著名祷文： </p><blockquote><p>上帝，</p><p>请赐予我平静，去接受我无法改变的；</p><p>请给予我勇气，去改变我能改变的；</p><p>请赋予我智慧，分辨这两者的区别。</p></blockquote><p>分辨这两者的区别，需要一个调节阀，有一只。</p><p>上帝不予我们这具体的智慧，即赋予我们以人类的意识。</p><p><strong>我们的大脑，就是那只麦克斯韦妖。</strong></p><p><strong>最后</strong></p><p>语言本身的样子，我们未必看得见。它不仅用于理解、误解这个世界，也作为这个世界的一部分，被理解、被误解。</p><p>它不该陷入我们现实生活中的不堪泥潭，不该是我们卑微欲望的喋喋不休。犹如世间万物，符合宇宙间最伟大的定律。</p><p>它用于阐述一切阶段性真、阶段性伪的真理。</p><p>我们用它判天地之美，析万物之理；用它的虚无，来化解虚无。</p>]]></content>
    
    
    <categories>
      
      <category>它山之石</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Publishing cli-package to npm repository</title>
    <link href="/node-publish-npm-pkg/"/>
    <url>/node-publish-npm-pkg/</url>
    
    <content type="html"><![CDATA[<p>好奇一些第三方的 node 命令行工具是如何制作与发布的，于是研究了下以便以后发布自己的命令行工具作为参考</p><span id="more"></span><h2 id="首先在-package-json-中定义几个必要的字段"><a href="#首先在-package-json-中定义几个必要的字段" class="headerlink" title="首先在 package.json 中定义几个必要的字段"></a>首先在 <code>package.json</code> 中定义几个必要的字段</h2><ul><li>cli 名称定义为 <code>sepcontacto</code></li><li>版本号 <code>1.0.0</code></li><li>指定 cli 入口 <code>&quot;bin&quot;: &quot;./contact.js&quot;</code></li><li>设置 preferGlobal</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;sepcontacto&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;A command-line contact management system&quot;</span>,<br>  <span class="hljs-string">&quot;preferGlobal&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;bin&quot;</span>: <span class="hljs-string">&quot;./contact.js&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;commander&quot;</span>: <span class="hljs-string">&quot;^2.15.1&quot;</span>,<br>    <span class="hljs-string">&quot;inquirer&quot;</span>: <span class="hljs-string">&quot;^5.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;mongoose&quot;</span>: <span class="hljs-string">&quot;^4.9.2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>在 npmjs.com 注册账号</p><p>同时可以在 <a href="https://www.npmjs.com/~septenary">https://www.npmjs.com/~septenary</a> 可以查看自己账号下发布的 package</p><h2 id="给-npm-配置账号信息"><a href="#给-npm-配置账号信息" class="headerlink" title="给 npm 配置账号信息"></a>给 npm 配置账号信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm adduser<br></code></pre></td></tr></table></figure><h2 id="发布-package"><a href="#发布-package" class="headerlink" title="发布 package"></a>发布 package</h2><p>cd 到要发布的 package 目录下，执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm publish<br></code></pre></td></tr></table></figure><p>再去 <a href="https://www.npmjs.com/~septenary">https://www.npmjs.com/~septenary</a> 可以看到 package 已经发布成功</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>发布成功后，就可以像普通 package 那样安装自己的包了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install sepcontacto -g<br></code></pre></td></tr></table></figure><p>你会看到 我们的 cli 添加到了 /usr/local/bin 中</p><blockquote><p>/usr/local/bin/sepcontacto</p></blockquote><p>接下来就可以愉快玩耍 cli 了</p><hr><p>参考: </p><ul><li><a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">https://docs.npmjs.com/getting-started/publishing-npm-packages</a></li><li><a href="https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs">https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactNative Tutorial</title>
    <link href="/react-native-tutorial/"/>
    <url>/react-native-tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id="ReactNative-Tutorial"><a href="#ReactNative-Tutorial" class="headerlink" title="ReactNative Tutorial"></a>ReactNative Tutorial</h1><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>1.<strong>nodejs</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install node<br></code></pre></td></tr></table></figure><p>2.<strong>npm4</strong>  <a href="https://github.com/facebook/react-native/issues/14767">why not npm5?</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g npm@4<br></code></pre></td></tr></table></figure><p>3.<strong>yarn</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install yarn<br></code></pre></td></tr></table></figure><p>4.<strong>watchman</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install watchman<br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions/16450503">watchman permission</a> : <code>sudo chown -R $(whoami) $(brew --prefix)/*</code></p><p>5.<strong>react-native-cli</strong>  or  <del>create-react-native-app</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g react-native-cli<br></code></pre></td></tr></table></figure><h3 id="Run-it"><a href="#Run-it" class="headerlink" title="Run it"></a>Run it</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">react-native init ReactNativeTutorial<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">react-native run-ios<br>react-native run-android<br></code></pre></td></tr></table></figure><p><strong>Android issue</strong></p><ul><li>./android/gradle/wrapper/gradle-wrapper.properties</li><li>./android/build.gradle</li><li>./android/app/build.gradle</li><li>./android/local.properties</li><li>touch ~/.gradle/gradle.properties &amp;&amp; echo “org.gradle.daemon=true” &gt;&gt; ~/.gradle/gradle.properties</li></ul><p><strong>iOS issue</strong></p><ul><li><a href="https://stackoverflow.com/questions/39778607/error-running-react-native-app-from-terminal-ios">xcrun: error</a> :  <em>Xcode/Setting/Location</em> -&gt; Command Line Tools</li></ul><h3 id="Developer-Menu"><a href="#Developer-Menu" class="headerlink" title="Developer Menu"></a>Developer Menu</h3><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15135035648483.jpg"></p><h2 id="ES6-标准"><a href="#ES6-标准" class="headerlink" title="ES6 标准"></a>ES6 标准</h2><p><a href="http://es6.ruanyifeng.com/">参考-1</a><br><a href="http://blog.kdchang.cc/2016/04/04/react-react-native-es5-es6-cheat-sheet">参考-2</a></p><p> <strong>Modules</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> MyComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MyComponent&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;parseData&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./xxx&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> APIs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../constants/ServerAPIs&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Compoent</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseData</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Classes &amp; Method</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Photo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params">event</span>)</span> &#123;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Property initializers</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br>Todo.defaultProps = &#123;<br>    <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">maxLength</span>: <span class="hljs-number">10</span>,<br>&#125;;<br>Todo.propTypes = &#123;<br>    <span class="hljs-attr">checked</span>: React.PropTypes.bool.isRequired,<br>    <span class="hljs-attr">maxLength</span>: React.PropTypes.number.isRequired,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>State</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    state = &#123;<br>        <span class="hljs-attr">maxLength</span>: <span class="hljs-built_in">this</span>.props.maxLength,<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">maxLength</span>: <span class="hljs-built_in">this</span>.props.maxLength,<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Arrow functions</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TouchableOpacity</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> console.log(&quot;Arrow function called&quot;) &#125;&#125;/&gt;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dynamic property names &amp; template strings</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Bob&quot;</span>, time = <span class="hljs-string">&quot;today&quot;</span>;<br><span class="hljs-keyword">let</span> msg = <span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>, how are you <span class="hljs-subst">$&#123;time&#125;</span>?`</span><br><br><span class="hljs-keyword">const</span> stateName = <span class="hljs-string">&quot;toggle&quot;</span><br><span class="hljs-built_in">this</span>.setState(&#123; [<span class="hljs-string">`<span class="hljs-subst">$&#123;stateName&#125;</span>Value`</span>]: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><p><strong>Destructuring &amp; spread attributes</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> &#123;<br>      className,<br>      ...others,  <span class="hljs-comment">// ...others 包含 this.props 除了 className 外所有值。this.props = &#123;value: &#x27;true&#x27;, title: &#x27;header&#x27;, className: &#x27;content&#x27;&#125;</span><br>    &#125; = <span class="hljs-built_in">this</span>.props;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TodoList</span> &#123;<span class="hljs-attr">...others</span>&#125; /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleLoadMoreClick&#125;</span>&gt;</span>Load more<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Default Parameters</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">height = <span class="hljs-number">50</span>, color = <span class="hljs-string">&#x27;red&#x27;</span></span>) </span>&#123;  <br>  ...  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;  <br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>This is a title!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>This is a Summary<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="props-amp-state"><a href="#props-amp-state" class="headerlink" title="props &amp; state"></a>props &amp; state</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 父组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            childName = <span class="hljs-string">&quot;子组件&quot;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.childName&#125;</span>&gt;</span></span><br><span class="xml">        )</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"></span><br><span class="xml">// 子组件</span><br><span class="xml">class ChildComponent extends Component&#123;</span><br><span class="xml">    render()&#123;</span><br><span class="xml">        return(</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">        )</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138721832230.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组件开始装载之前调用，在一次生命周期中只会执行一次。</span><br>componentWillMount()<br><br><span class="hljs-comment">// 组件完成装载之后调用，在一次生命周期中只会执行一次，从这里开始就可以对组件进行各种操作了，比如在组件装载完成后要显示的时候执行动画。</span><br>componentDidMount()<br><br><span class="hljs-comment">// 组件属性更新之前调用，每一次属性更新都会调用</span><br>componentWillUpdate(object nextProps, object nextState)<br><br><br><span class="hljs-comment">// 组件属性更新之后调用，每次属性更新都会调用</span><br>componentDidUpdate(object prevProps, object prevState)<br><br><span class="hljs-comment">// 组件卸载之前调用</span><br>componentWillUnmount()<br></code></pre></td></tr></table></figure><h3 id="Style-amp-FlexBox"><a href="#Style-amp-FlexBox" class="headerlink" title="Style &amp; FlexBox"></a>Style &amp; FlexBox</h3><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138754176654.png"></p><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p><strong>本地图片</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;Image source=&#123;<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./assets/email.png&#x27;</span>)&#125;/&gt;<br></code></pre></td></tr></table></figure><p>Packager 会打包所有的图片并且依据屏幕精度提供对应的资源。比如: <strong>iPhone 6</strong> 会使用 <a href="mailto:&#101;&#109;&#x61;&#x69;&#x6c;&#64;&#x32;&#120;&#46;&#112;&#x6e;&#x67;">&#101;&#109;&#x61;&#x69;&#x6c;&#64;&#x32;&#120;&#46;&#112;&#x6e;&#x67;</a>，而 <strong>Pixel</strong> 上则会使用 <a href="mailto:&#x65;&#x6d;&#97;&#x69;&#108;&#x40;&#x33;&#120;&#46;&#112;&#110;&#103;">&#x65;&#x6d;&#97;&#x69;&#108;&#x40;&#x33;&#120;&#46;&#112;&#110;&#103;</a>。如果没有图片恰好满足屏幕分辨率，则会自动选中最接近的一个图片。</p><p><strong>网络图片</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;Image source=&#123;&#123; <span class="hljs-attr">uri</span>: <span class="hljs-string">&#x27;https//assets.domain/xxx.jpg&#x27;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000002933776">ATS issue</a><br><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138869293237.jpg"></p><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascripts">&lt;ListView<br>    dataSource=&#123;...&#125;<br>    renderRow=&#123;...&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p><a href="http://www.alloyteam.com/2016/01/reactnative-animated/">参考</a></p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>React Native 提供了和 web 标准一致的Fetch API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascripts"><br>fetch(&#x27;https://mywebsite.com/endpoint/&#x27;, &#123;<br>  method: &#x27;POST&#x27;,<br>  headers: &#123;<br>    &#x27;Accept&#x27;: &#x27;application/json&#x27;,<br>    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,<br>  &#125;,<br>  body: JSON.stringify(&#123;<br>    firstParam: &#x27;yourValue&#x27;,<br>    secondParam: &#x27;yourOtherValue&#x27;,<br>  &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="AsyncStorage"><a href="#AsyncStorage" class="headerlink" title="AsyncStorage"></a>AsyncStorage</h2><p>是一个简单的、异步的、持久化的 <strong>key-value</strong> 存储系统，它对于App来说是全局性的。它用来代替 <strong>LocalStorage</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascripts">async saveUserName(account: String) &#123;<br>    let key = &#x27;@key-user-name&#x27;;<br>    try &#123;<br>        await AsyncStorage.setItem(key, account);<br>    &#125; catch (error) &#123;<br>        console.warn(error)<br>    &#125;<br>&#125;;<br><br>async getUserName() &#123;<br>    let key = &#x27;@key-user-name&#x27;;<br>    try &#123;<br>        return await AsyncStorage.getItem(key);<br>    &#125; catch (error) &#123;<br>        console.warn(error)<br>    &#125;<br>    return null;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="NativeBridge"><a href="#NativeBridge" class="headerlink" title="NativeBridge"></a>NativeBridge</h2><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138857931917.jpg"></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>1.执行打包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">react-native bundle --entry-file index.js --platform ios --dev false --bundle-output release_ios/main.jsbundle --assets-dest release_ios/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138868113330.jpg"></p><p>2.将 <strong>assets</strong> 与 <strong>main.jsbundle</strong> 添加到项目中<br><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138870589984.jpg"></p><p>3.修改 <strong>AppDelegate.m</strong>，让 React Native 去使用我们刚才导入的 <strong>jsbundle</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions<br>&#123;<br>    <br>  NSURL *jsCodeLocation;<br> //jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];<br> +jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];<br>#endif<br>...<br>  return YES;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在 <a href="https://itunesconnect.apple.com/">iTunes Connect</a> 创建应用 ➜ 打包程序 ➜ 将应用提交到app store</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p><a href="https://developer.android.com/studio/publish/app-signing.html">参考</a></p><ol><li>生成证书</li><li>配置gradle</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;      <br>    signingConfigs &#123;  <br>        release &#123;  <br>            storeFile file_dir<br>            storePassword store_assword<br>            keyAlias alias<br>            keyPassword keyp_assword  <br>        &#125;  <br>    &#125;  <br>    buildTypes &#123;  <br>        release &#123;   <br>            signingConfig signingConfigs.release  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>3.打包 APK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./gradlew assembleRelease<br></code></pre></td></tr></table></figure><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><h3 id="codepush"><a href="#codepush" class="headerlink" title="codepush"></a>codepush</h3><p><a href="https://microsoft.github.io/code-push/">https://microsoft.github.io/code-push/</a></p><h3 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h3><p><a href="http://www.lcode.org/react-native-hot-update/">参考1</a><br><a href="http://www.jianshu.com/p/2cb3eb9604ca">参考2</a></p><p>以 Android 为例</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">react-native bundle <span class="hljs-params">--entry-file</span> index.js <span class="hljs-params">--platform</span> android <span class="hljs-params">--dev</span> <span class="hljs-literal">false</span> <span class="hljs-params">--bundle-output</span> release_android/main.jsbundle <span class="hljs-params">--assets-dest</span> release_android/<br></code></pre></td></tr></table></figure><ul><li>1.初始项目发布时，生成并保留一份 <strong>bundle</strong> 文件。</li><li>2.有版本更新时，生成新的  <strong>bundle</strong> 文件，</li><li>3.使用 <strong>google-diff-match-patch</strong> 对比两个文件，并生成差异补丁文件。</li><li>4.App 下载补丁文件，再使用 <strong>google-diff-match-patch</strong> 和 assets 目录下的初始版本合并，生成新的 <strong>bundle</strong> 文件。</li></ul><p><img src="https://raw.githubusercontent.com/oksep/ReactNativeTutorial/master/art/15138880360088.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch 定期删除过期索引</title>
    <link href="/elasticsearch-delete-indices-period/"/>
    <url>/elasticsearch-delete-indices-period/</url>
    
    <content type="html"><![CDATA[<h1 id="索引管理工具-curator"><a href="#索引管理工具-curator" class="headerlink" title="索引管理工具 curator"></a>索引管理工具 curator</h1><p>安装 curator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install elasticsearch-curator<br></code></pre></td></tr></table></figure><p>curator 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curator [--config CONFIG.YML] [--dry-run] ACTION_FILE.YML<br></code></pre></td></tr></table></figure><p>需要配置两个文件 <code>CONFIG.YML</code> 和 <code>ACTION_FILE.YML</code>， 若果不设置 <code>--config CONFIG.YML</code> 则读取默认路径配置 <code>~/.curator/curator.yml</code>，<code>--dry-run</code> 为调试模式，模拟删除，不做真实处理</p><p>下面是两个配置文件的具体内容</p><p><em>config.yaml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">client:</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>  <span class="hljs-attr">url_prefix:</span><br>  <span class="hljs-attr">use_ssl:</span> <span class="hljs-literal">False</span><br>  <span class="hljs-attr">certificate:</span><br>  <span class="hljs-attr">client_cert:</span><br>  <span class="hljs-attr">client_key:</span><br>  <span class="hljs-attr">ssl_no_validate:</span> <span class="hljs-literal">False</span><br>  <span class="hljs-attr">http_auth:</span><br>  <span class="hljs-attr">timeout:</span><br>  <span class="hljs-attr">master_only:</span> <span class="hljs-literal">True</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">loglevel:</span> <span class="hljs-string">INFO</span><br>  <span class="hljs-attr">logfile:</span><br>  <span class="hljs-attr">logformat:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p><em>action.yaml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">actions:</span><br>  <span class="hljs-attr">1:</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">delete_indices</span><br>    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Base on index name, delete indices which prefix is logstash-android- and is older than 90 days. ref: https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html&#x27;</span><br>    <span class="hljs-attr">options:</span><br>      <span class="hljs-attr">ignore_empty_list:</span> <span class="hljs-literal">True</span><br>      <span class="hljs-attr">timeout_override:</span> <span class="hljs-number">3600</span><br>      <span class="hljs-attr">continue_if_exception:</span> <span class="hljs-literal">False</span><br>      <span class="hljs-attr">disable_action:</span> <span class="hljs-literal">False</span><br>    <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">filtertype:</span> <span class="hljs-string">pattern</span><br>        <span class="hljs-attr">kind:</span> <span class="hljs-string">prefix</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">logstash-android-</span><br>        <span class="hljs-attr">exclude:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">filtertype:</span> <span class="hljs-string">age</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">name</span><br>        <span class="hljs-attr">direction:</span> <span class="hljs-string">older</span><br>        <span class="hljs-attr">timestring:</span> <span class="hljs-string">&#x27;%Y.%m.%d&#x27;</span><br>        <span class="hljs-attr">unit:</span> <span class="hljs-string">days</span><br>        <span class="hljs-attr">unit_count:</span> <span class="hljs-number">90</span><br>        <span class="hljs-attr">exclude:</span><br></code></pre></td></tr></table></figure><h1 id="定期任务工具-crontab"><a href="#定期任务工具-crontab" class="headerlink" title="定期任务工具 crontab"></a>定期任务工具 crontab</h1><p>1.定期任务需要 crontab 命令，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -e <br></code></pre></td></tr></table></figure><p>2.编写脚本任务 <strong>clean_expired_indices.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd `dirname $0`<br>echo `pwd`<br><span class="hljs-meta">#</span><span class="bash"> curator --config config_file.yml --dry-run action_file.yml</span><br>curator --config config_file.yml action_file.yml<br></code></pre></td></tr></table></figure><ol start="2"><li>进入 vi 界面后，添加一行命令，每天凌晨 2 点执行清理脚本，保存退出</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">0 2 * * *  /bin/sh /path/to/clean_expired_indices.sh &gt;&gt; /var/log/clean_expired_indices.log<br></code></pre></td></tr></table></figure><ol start="3"><li>查看是否生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -l <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash Mapping 配置</title>
    <link href="/logstash-mapping-config/"/>
    <url>/logstash-mapping-config/</url>
    
    <content type="html"><![CDATA[<p>现在有两组 JSON 日志需要上报到 Elasticsearch</p><ul><li>下载失败日志</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">&quot;Topic&quot;</span>: <span class="hljs-string">&quot;download_failed&quot;</span>,<br> <span class="hljs-attr">&quot;Source&quot;</span>: <span class="hljs-string">&quot;192.168.1.158&quot;</span>,<br> <span class="hljs-attr">&quot;FailCode&quot;</span>: <span class="hljs-string">&quot;0500&quot;</span>,<br> <span class="hljs-attr">&quot;Title&quot;</span>: <span class="hljs-string">&quot;多米尼克大战&quot;</span>,<br> <span class="hljs-attr">&quot;Space&quot;</span>: <span class="hljs-number">0</span>,<br> <span class="hljs-attr">&quot;Time&quot;</span>: <span class="hljs-number">1494023823</span>,<br> <span class="hljs-attr">&quot;Speed&quot;</span>: <span class="hljs-string">&quot;84.82267&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>下载成功日志</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">&quot;Topic&quot;</span>: <span class="hljs-string">&quot;download_success&quot;</span>,<br> <span class="hljs-attr">&quot;Source&quot;</span>: <span class="hljs-string">&quot;192.168.1.158&quot;</span>,<br> <span class="hljs-attr">&quot;Title&quot;</span>: <span class="hljs-string">&quot;爱送书&quot;</span>,<br> <span class="hljs-attr">&quot;Space&quot;</span>: <span class="hljs-number">1028</span>,<br> <span class="hljs-attr">&quot;Time&quot;</span>: <span class="hljs-number">1494090811</span>,<br> <span class="hljs-attr">&quot;Speed&quot;</span>: <span class="hljs-string">&quot;120.82&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="filter配置"><a href="#filter配置" class="headerlink" title="filter配置"></a>filter配置</h1><p>配置好 <strong>logstash pipeline</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">input &#123;<br>   stdin&#123;<br>       codec =&gt; json<br>   &#125;<br>&#125;<br>    <br>filter&#123;  <br><span class="hljs-meta">   #</span><span class="bash"> @timestamp 取 stdin 传入的 __time__ 字段</span><br>   date &#123;<br>       match =&gt; [&quot;Time&quot;, &quot;UNIX&quot;]<br>   &#125;<br>   <br><span class="hljs-meta">   #</span><span class="bash"> 经纬度转换</span><br>   geoip &#123; <br>       source =&gt; &quot;Source&quot; <br>   &#125;<br>&#125;<br>    <br>output &#123;<br>   elasticsearch &#123;<br>       hosts =&gt; [&quot;http://localhost:9200&quot;]<br>       index =&gt; &quot;logstash-android-%&#123;+YYYY.MM.dd&#125;&quot;<br>       document_type =&gt; &quot;%&#123;Topic&#125;&quot;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.上面看到 投递到 Elasticsearch 的索引是 logstash- 为前缀，是为了让 geoIp 处理后的经纬度符合 geopint 类型，相关参考: <a href="https://github.com/elastic/logstash/issues/3137">https://github.com/elastic/logstash/issues/3137</a></p><p>2.将这两条日志通过 pipeline 投递到 Elasticsearch 时会自动创建 mapping，可以在 <strong>kibana</strong> &gt; <strong>Dev Tools</strong> 通过命令查看 mapping</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET logstash-android-*/_mapping<br></code></pre></td></tr></table></figure><p>如果你的 mapping 类型和你预期的不符合，可以调整filter，比如 原始数据 Speed 字段是 string 类型，而你想要 float 类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mutate &#123;<br>convert =&gt; &#123;<br>&quot;Space&quot; =&gt; &quot;integer&quot;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="template-配置"><a href="#template-配置" class="headerlink" title="template 配置"></a>template 配置</h1><ul><li><input checked="" disabled="" type="checkbox"> TODO</li></ul>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash Pipeline 配置</title>
    <link href="/logstash-pipeline-config/"/>
    <url>/logstash-pipeline-config/</url>
    
    <content type="html"><![CDATA[<h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><ul><li><strong>-e</strong> 立即执行配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -e &#x27;input &#123; stdint&#123;&#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li><strong>-f</strong> 指定配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -f xxx.logstash.conf<br></code></pre></td></tr></table></figure><ul><li><strong>-t</strong> 测试配置语法并退出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -f test2.logstash.conf -t<br></code></pre></td></tr></table></figure><ul><li><strong>-l</strong> logstash 默认将日志输出到标准错误，生产环境可指定日志输出位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -l /var/logs/logstash.log<br></code></pre></td></tr></table></figure><ul><li><strong>-w</strong> 过滤器线程数量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -w 5<br></code></pre></td></tr></table></figure><ul><li><strong>-r</strong> 更改配置文件后自动重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -f xxx.logstash.conf -r<br></code></pre></td></tr></table></figure><h1 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h1><p>logstash 设计了一套自己的 DSL 语法，包括以下部分</p><h2 id="区段"><a href="#区段" class="headerlink" title="区段"></a>区段</h2><p>一个标准配置有三个区段，其中 <strong>stdin, mutate, stdout</strong> 都是标准插件，想要自定义一个插件可以参考这篇文章 <a href="/2017/03/24/logstash-intergration-aliyun-oss-plugin/">Logstash 集成 aliyun/oss 插件</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">input&#123;<br>    stdin&#123;&#125;<br>&#125;<br><br>filter&#123;<br>    mutate&#123;&#125;<br>&#125;<br><br>output&#123;<br>    sdtout&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h2><ul><li>array</li><li>boolean</li><li>bytes</li><li>Codec</li><li>hash</li><li>number</li><li>password</li><li>path</li><li>string</li></ul><h2 id="引用字段"><a href="#引用字段" class="headerlink" title="引用字段"></a>引用字段</h2><p>[filed] 即引用了一个字段，如果是顶级字段可以省略 [] 即 filed，如果是嵌套字段需要这样写[outer_filed][inner_filed]</p><p>像下面的数据结构引用 <strong>ip</strong> 字段: <code>[ip] 或 ip</code> ，引用 <strong>os</strong> 字段: <code>[ua][os]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>  &quot;agent&quot;: &quot;Mozilla/5.0 (compatible; MSIE 9.0)&quot;,<br>  &quot;ip&quot;: &quot;192.168.24.44&quot;,<br>  &quot;request&quot;: &quot;/index.html&quot;<br>  &quot;response&quot;: &#123;<br>    &quot;status&quot;: 200,<br>    &quot;bytes&quot;: 52353<br>  &#125;,<br>  &quot;ua&quot;: &#123;<br>    &quot;os&quot;: &quot;Windows 7&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="环境变量引用"><a href="#环境变量引用" class="headerlink" title="环境变量引用"></a>环境变量引用</h2><p>如下，引用环境变量 <code>$&#123;TCP_PORT&#125;</code> , 可以添加默认值 <code>$&#123;TCP_PORT:3100&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">input &#123;<br>    tcp &#123;<br>        port =&gt; &quot;$&#123;TCP_PORT:3100&#125;&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sprintf-格式"><a href="#sprintf-格式" class="headerlink" title="sprintf 格式"></a>sprintf 格式</h2><p>引用的字段可以应用于 <strong>sprintf</strong> 格式，如下 <code>%&#123;&#125;</code> 包装字段引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">filter&#123;<br>mutate &#123;<br>add_tag =&gt; &quot;new tag %&#123;[field]&#125;&quot;<br>&#125;<br>&#125;<br>output &#123;<br>  file &#123;<br>    path =&gt; &quot;/var/log/%&#123;type&#125;.%&#123;+yyyy.MM.dd.HH&#125;&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>使用条件判断可以控制在区段内处理特定的事件，条件判断语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">if EXPRESSION &#123;<br>  ...<br>&#125; else if EXPRESSION &#123;<br>  ...<br>&#125; else &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>常见操作有</p><ul><li><strong>==, !=, &lt;, &gt;, &lt;=, &gt;=</strong> 等于操作</li><li><strong>=<del>, !</del></strong>  正则匹配</li><li><strong>in, not in</strong> 包含</li><li><strong>and, or, nand, xor</strong> 与或非</li><li><strong>!</strong> 取反</li></ul><p>举个例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在过滤器中，action 字段为 login 时，删除 secret</span><br>filter &#123;<br>    if [action] == &quot;login&quot; &#123;<br>        mutate &#123; remove =&gt; &quot;secret&quot; &#125;<br>    &#125;<br>&#125;<br>output &#123;<br>    # 发送消息到 pagerduty<br>    if [loglevel] == &quot;ERROR&quot; and [deployment] == &quot;production&quot; &#123;<br>        pagerduty &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注意: 字段引用、sprintf 格式、条件判断只能用于 filter 和 output，不能用于input</em></p><h2 id="metadata"><a href="#metadata" class="headerlink" title="@metadata"></a>@metadata</h2><p>最常见的用法是在 filter 中指定 <strong>@metadata</strong>，控制输出逻辑，**@metadata** 作为元数据并不会随数据一并输出，可视为临时变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">input &#123; stdin &#123; &#125; &#125;<br><br>filter &#123;<br>    mutate &#123; add_field =&gt; &#123; &quot;show&quot; =&gt; &quot;This data will be in the output&quot; &#125; &#125;<br>    mutate &#123; add_field =&gt; &#123; &quot;[@metadata][output]&quot; =&gt; &quot;stdout&quot; &#125; &#125;<br>    mutate &#123; add_field =&gt; &#123; &quot;[@metadata][output]&quot; =&gt; &quot;file&quot; &#125; &#125;<br>&#125;<br><br>output &#123;<br>    if [@metadata][output] == &quot;stdout&quot; &#123;<br>        stdout &#123; codec =&gt; rubydebug &#125;<br>    &#125; else if [@metadata][output] == &quot;file&quot; &#123;<br>        file &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若想输出 <strong>@metadata</strong> 字段，需要设置 <code>metadata =&gt; true</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stdout &#123; codec =&gt; rubydebug &#123; metadata =&gt; true &#125; &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mean.septenary.cn 搭建之登录逻辑梳理</title>
    <link href="/mean-login-module/"/>
    <url>/mean-login-module/</url>
    
    <content type="html"><![CDATA[<h1 id="1-通常登录方式都有哪些"><a href="#1-通常登录方式都有哪些" class="headerlink" title="1.通常登录方式都有哪些?"></a>1.通常登录方式都有哪些?</h1><p><a href="https://cnodejs.org/topic/5671441a1d2912ce2a35aaa1">登录那些事儿</a></p><h1 id="2-restful-API-形式的-登录服务-passport-jwt"><a href="#2-restful-API-形式的-登录服务-passport-jwt" class="headerlink" title="2.restful API 形式的 登录服务 passport-jwt"></a>2.restful API 形式的 登录服务 passport-jwt</h1><ul><li><a href="http://www.jianshu.com/p/576dbf44b2ae">什么是 JWT – JSON WEB TOKEN</a></li><li><a href="http://blog.csdn.net/ljinddlj/article/details/53108261">OAuth 2和JWT - 如何设计安全的API</a></li><li><a href="https://medium.com/@blacksonic86/angular-2-authentication-revisited-611bf7373bf9#.5mixgxid0">Angular authentication revisited</a></li><li><a href="http://jasonwatmore.com/post/2016/08/16/angular-2-jwt-authentication-example-tutorial">angular2-jwt-auth-example</a></li><li><a href="https://blog.jscrambler.com/implementing-jwt-using-passport/">express-jwt-server</a></li><li><a href="https://yq.aliyun.com/articles/59043">使用Json Web Token设计Passport系统</a></li><li><a href="http://blog.slatepeak.com/creating-a-simple-node-express-api-authentication-system-with-passport-and-jwt/">Creating a Simple Node/Express API Authentication System with Passport and JWT</a></li><li><a href="http://blog.slatepeak.com/building-a-basic-restful-api-for-a-chat-system/">Building a Basic RESTful API for a Chat System</a></li></ul><h2 id="jwt-如何保证在浏览器中的安全存储"><a href="#jwt-如何保证在浏览器中的安全存储" class="headerlink" title="jwt 如何保证在浏览器中的安全存储"></a>jwt 如何保证在浏览器中的安全存储</h2><ol><li>Set-Cookie (http only)</li><li>LocalStorage: JWT 在浏览器中以加密方式存储在 localStorage 中，但 localStorage 无法防范 XSS 攻击，好在 Angular2 有”跨站脚本安全模型”, 可按照<a href="https://angular.cn/docs/ts/latest/guide/security.html#!#xss">文档</a></li></ol><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p>需要用到的库</p><ul><li>jwt-simple (jwt encode decode）</li><li>moment</li><li>passport</li><li>passport-jwt</li></ul><p>1.验证用户名密码后，响应生成的 jwt</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> me = &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;seven__up@sina.cn&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;admin&#x27;</span>&#125;;<br><span class="hljs-keyword">const</span> SECRET = <span class="hljs-string">&#x27;my-jwt-secret&#x27;</span>;<br><br>app.post(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> email = req.body.email;<br>    <span class="hljs-keyword">let</span> password = req.body.password;<br>    <span class="hljs-keyword">if</span> (me.email == email &amp;&amp; me.password &amp;&amp; password) &#123;<br>        <span class="hljs-keyword">let</span> payload = &#123;<br>            <span class="hljs-attr">id</span>: me.id,<br>            <span class="hljs-attr">role</span>: me.role,<br>            <span class="hljs-attr">iat</span>: moment().unix(), <span class="hljs-comment">// 签发时间</span><br>            <span class="hljs-attr">exp</span>: moment().add(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;minute&#x27;</span>).unix() <span class="hljs-comment">// 过期时间</span><br>        &#125;;<br>        res.json(&#123;<br>            <span class="hljs-attr">token</span>: jwt.encode(payload, SECRET);<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.sendStatus(<span class="hljs-number">401</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>2.受限 API 的访问</p><p>route:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.get(<span class="hljs-string">&quot;/user&quot;</span>, auth.authenticate(), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <br>    res.json(users[<span class="hljs-number">0</span>]);<br>&#125;);<br></code></pre></td></tr></table></figure><p>authenticate:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <br>    <span class="hljs-keyword">var</span> strategy = <span class="hljs-keyword">new</span> Strategy(params, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, payload, done</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> user = users[payload.id] || <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (user) &#123;<br>            <span class="hljs-keyword">return</span> done(<span class="hljs-literal">null</span>, &#123;<br>                <span class="hljs-attr">id</span>: user.id<br>            &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> done(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;User not found&quot;</span>), <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;);<br>    passport.use(<span class="hljs-string">&#x27;jwt&#x27;</span>, strategy);<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">initialize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> passport.initialize();<br>        &#125;,<br>        <span class="hljs-attr">authenticate</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> passport.authenticate(<span class="hljs-string">&#x27;jwt&#x27;</span>, cfg.jwtSession);<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>get token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;email&quot;:&quot;seven__up@sina.cn&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27; http://localhost:4300/api/auth/login<br></code></pre></td></tr></table></figure><p>request with token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -I --header &quot;Authorization:JWT TOKEN&quot; localhost:4300/api/user<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Logstash 集成 aliyun/oss 插件</title>
    <link href="/logstash-intergration-aliyun-oss-plugin/"/>
    <url>/logstash-intergration-aliyun-oss-plugin/</url>
    
    <content type="html"><![CDATA[<h1 id="安装使用-jruby"><a href="#安装使用-jruby" class="headerlink" title="安装使用 jruby"></a>安装使用 <strong>jruby</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rvm install jruby-9.1.7.0<br>rvm use jruby-9.1.7.0 --default<br></code></pre></td></tr></table></figure><h1 id="安装-bundler"><a href="#安装-bundler" class="headerlink" title="安装 bundler"></a>安装 <strong>bundler</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install bundler<br></code></pre></td></tr></table></figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>用工具生成项目模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin generate --type input --name alioss --path ./<br></code></pre></td></tr></table></figure><p>当前目录下创建了一个名为 logstash-input-alioss 的工程，目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">|____CHANGELOG.md<br>|____CONTRIBUTORS<br>|____DEVELOPER.md<br>|____Gemfile<br>|____Gemfile.lock<br>|____lib<br>| |____logstash<br>| | |____inputs<br>| | | |____alioss.rb<br>|____LICENSE<br>|____logstash-input-alioss.gemspec<br>|____Rakefile<br>|____README.md<br>|____spec<br>| |____inputs<br>| | |____alioss_spec.rb<br></code></pre></td></tr></table></figure><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>使用 <strong>gem</strong> 安装 <strong>aliyun-sdk</strong>、<strong>snappy</strong> 。注意: <strong>aliyun-sdk</strong> 并未使用最新版本，而是使用 0.3.6, 详情戳这里 <a href="https://github.com/aliyun/aliyun-oss-ruby-sdk/issues/40">issue</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install -v 0.3.6 aliyun-sdk<br>gem install snappy<br></code></pre></td></tr></table></figure><h1 id="集成-aliyun-sdk"><a href="#集成-aliyun-sdk" class="headerlink" title="集成 aliyun-sdk"></a>集成 <strong>aliyun-sdk</strong></h1><p>编辑 _logstash-input-alioss.gemspec_，添加依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">s.add_runtime_dependency &#x27;aliyun-sdk&#x27;, &#x27;~&gt; 0.3.6&#x27;<br>s.add_runtime_dependency &#x27;snappy&#x27;<br></code></pre></td></tr></table></figure><h1 id="打包工程"><a href="#打包工程" class="headerlink" title="打包工程"></a>打包工程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bundle install<br></code></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>安装插件可以分成两种，开发模式、生产模式。参考<a href="https://github.com/Wondermall/logstash-input-google-cloud-pubsub">这里</a></p><h2 id="1-开发模式"><a href="#1-开发模式" class="headerlink" title="1. 开发模式"></a>1. 开发模式</h2><p>修改 <em>logstash/Gemfile</em> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;gem &quot;logstash-input-alioss&quot;, :path =&gt; &quot;logstash-input-alioss绝对路径&quot;&#x27; &gt;&gt; logstash路径/Gemfile<br></code></pre></td></tr></table></figure><p>命令行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin install --no-verify<br></code></pre></td></tr></table></figure><h2 id="2-生产模式"><a href="#2-生产模式" class="headerlink" title="2. 生产模式"></a>2. 生产模式</h2><p>执行下面命令，会在工程下生成 <em>logstash-input-alioss-0.1.0.gem</em> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem build logstash-input-alioss.gemspec<br></code></pre></td></tr></table></figure><p>命令行安装 (别急，这个过程可能会需要多等一会)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin install /path/to/logstash-input-alioss-0.1.0.gem<br></code></pre></td></tr></table></figure><h2 id="3-检查插件是否安装成功"><a href="#3-检查插件是否安装成功" class="headerlink" title="3. 检查插件是否安装成功"></a>3. 检查插件是否安装成功</h2><p>不论以上哪种方法，安装成功的话都会出现在列表中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin list --group input<br></code></pre></td></tr></table></figure><h1 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h1><p><em>alioss.logstash.conf</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input &#123;<br>    alioss &#123;<br>        endpoint =&gt; <span class="hljs-string">&#x27;your endpoint&#x27;</span><br>        access_key_id =&gt; <span class="hljs-string">&#x27;your access_key_id&#x27;</span><br>        access_key_secret =&gt; <span class="hljs-string">&#x27;your access_key_secret&#x27;</span><br>        bucket =&gt; <span class="hljs-string">&#x27;your bucket&#x27;</span><br>        interval =&gt; <span class="hljs-number">60</span><br>        codec =&gt; json<br>    &#125;<br>&#125;<br><br>output &#123;<br>    stdout &#123;<br>        codec=&gt;rubydebug<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -f alioss.logstash.conf<br></code></pre></td></tr></table></figure><h1 id="介绍一个以-aliyun-oss-做为数据源处理日志的插件"><a href="#介绍一个以-aliyun-oss-做为数据源处理日志的插件" class="headerlink" title="介绍一个以 aliyun/oss 做为数据源处理日志的插件"></a>介绍一个以 aliyun/oss 做为数据源处理日志的插件</h1><p><a href="https://github.com/oksep/logstash-input-alioss">https://github.com/oksep/logstash-input-alioss</a></p>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash 之 filebeats</title>
    <link href="/filebeats-in-logstash/"/>
    <url>/filebeats-in-logstash/</url>
    
    <content type="html"><![CDATA[<h1 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h1><ol><li><p><a href="https://www.elastic.co/downloads/beats/filebeat">Download filebeats</a></p></li><li><p>配置 filebeat.yml</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">filebeat.<span class="hljs-symbol">prospectors:</span><br>- <span class="hljs-symbol">input_type:</span> log<br><span class="hljs-symbol">paths:</span><br>- <span class="hljs-regexp">/var/log</span><span class="hljs-regexp">/simple.log</span><br><span class="hljs-regexp">output.logstash:</span><br><span class="hljs-regexp">hosts: [&quot;localhost:5043&quot;]</span><br></code></pre></td></tr></table></figure></li><li><p>执行 <code>sudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code>， <strong>filebeat</strong> 会一直尝试连接 5043 端口</p></li><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input &#123;<br>beats &#123;<br>port =&gt; <span class="hljs-string">&quot;5043&quot;</span><br>&#125;<br>&#125;<br>output &#123;<br>stdout &#123; codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>验证配置是否合法 <code>logstash -f logstash.conf --config.test_and_exit</code></p></li><li><p>启动 Logstash <code>logstash -f logstash.conf --config.reload.automatic</code>，这时会看到 <strong>simple.log</strong> 的日志被逐个输出<br>添加 <code>--config.reload.automatic</code> 参数，当修改 <code>logstash.conf</code> 时，logstash 会自动重启</p></li><li><p>向 <strong>simple.log</strong> 追加一条日志 <code>echo &quot;这是一条追加日志&quot; &gt;&gt; logstash-tutorial.log</code>，可以看到 logstash 输出了新追加的内容</p></li></ol><h1 id="Apache-日志加工"><a href="#Apache-日志加工" class="headerlink" title="Apache 日志加工"></a>Apache 日志加工</h1><ol><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input &#123;<br>beats &#123;<br>port =&gt; <span class="hljs-string">&quot;5043&quot;</span><br>&#125;<br>&#125;<br><br>filter &#123;<br><span class="hljs-comment"># apache 日志过滤</span><br>grok &#123;<br>match =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;COMBINEDAPACHELOG&#125;&quot;</span>&#125;<br>&#125;<br><span class="hljs-comment"># 通过 ip 确认经纬度</span><br>geoip &#123;<br>source =&gt; <span class="hljs-string">&quot;clientip&quot;</span><br>&#125;<br>&#125;<br><br>output &#123;<br>stdout &#123; codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>停止 filebeat ，删除 filebeat/data 文件，该文件记录了之前读取记录，所以需要删除掉</p></li><li><p>重新启动 filebeat <code>sudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code></p></li><li><p>向 <strong>simple.log</strong> 追加一条 apache 日志    </p> <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.63.9.126</span> - - <span class="hljs-string">[04/Jan/2016:05:13:42 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span> /septenary/api/user/update HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">203023</span> <span class="hljs-string">&quot;http://septenary.cn/&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>logstash 输出类似以下内容</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&#123;<br><span class="hljs-string">&quot;request&quot;</span> =&gt; <span class="hljs-string">&quot;/presentations/logstash-monitorama-2013/images/kibana-search.png&quot;</span>,<br><span class="hljs-string">&quot;agent&quot;</span> =&gt; <span class="hljs-string">&quot;\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\&quot;&quot;</span>,<br><span class="hljs-string">&quot;geoip&quot;</span> =&gt; &#123;<br><span class="hljs-string">&quot;timezone&quot;</span> =&gt; <span class="hljs-string">&quot;Europe/Moscow&quot;</span>,<br><span class="hljs-string">&quot;ip&quot;</span> =&gt; <span class="hljs-string">&quot;83.149.9.216&quot;</span>,<br><span class="hljs-string">&quot;latitude&quot;</span> =&gt; <span class="hljs-number">55.7485</span>,<br><span class="hljs-string">&quot;continent_code&quot;</span> =&gt; <span class="hljs-string">&quot;EU&quot;</span>,<br><span class="hljs-string">&quot;city_name&quot;</span> =&gt; <span class="hljs-string">&quot;Moscow&quot;</span>,<br><span class="hljs-string">&quot;country_code2&quot;</span> =&gt; <span class="hljs-string">&quot;RU&quot;</span>,<br><span class="hljs-string">&quot;country_name&quot;</span> =&gt; <span class="hljs-string">&quot;Russia&quot;</span>,<br><span class="hljs-string">&quot;country_code3&quot;</span> =&gt; <span class="hljs-string">&quot;RU&quot;</span>,<br><span class="hljs-string">&quot;region_name&quot;</span> =&gt; <span class="hljs-string">&quot;Moscow&quot;</span>,<br><span class="hljs-string">&quot;location&quot;</span> =&gt; [<br>[<span class="hljs-number">0</span>] <span class="hljs-number">37.6184</span>,<br>[<span class="hljs-number">1</span>] <span class="hljs-number">55.7485</span><br>],<br><span class="hljs-string">&quot;postal_code&quot;</span> =&gt; <span class="hljs-string">&quot;101194&quot;</span>,<br><span class="hljs-string">&quot;longitude&quot;</span> =&gt; <span class="hljs-number">37.6184</span>,<br><span class="hljs-string">&quot;region_code&quot;</span> =&gt; <span class="hljs-string">&quot;MOW&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;offset&quot;</span> =&gt; <span class="hljs-number">650</span>,<br><span class="hljs-string">&quot;auth&quot;</span> =&gt; <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;ident&quot;</span> =&gt; <span class="hljs-string">&quot;-&quot;</span>,<br><span class="hljs-string">&quot;input_type&quot;</span> =&gt; <span class="hljs-string">&quot;log&quot;</span>,<br><span class="hljs-string">&quot;verb&quot;</span> =&gt; <span class="hljs-string">&quot;GET&quot;</span>,<br><span class="hljs-string">&quot;source&quot;</span> =&gt; <span class="hljs-string">&quot;/Users/renyufeng/Documents/ES/practice-logstash/log/simple.log&quot;</span>,<br><span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;83.149.9.216 - - [04/Jan/2015:05:13:42 +0000] \&quot;GET /presentations/logstash-monitorama-2013/images/kibana-search.png HTTP/1.1\&quot; 200 203023 \&quot;http://semicomplete.com/presentations/logstash-monitorama-2013/\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\&quot;&quot;</span>,<br><span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;log&quot;</span>,<br><span class="hljs-string">&quot;tags&quot;</span> =&gt; [<br>[<span class="hljs-number">0</span>] <span class="hljs-string">&quot;beats_input_codec_plain_applied&quot;</span><br>],<br><span class="hljs-string">&quot;referrer&quot;</span> =&gt; <span class="hljs-string">&quot;\&quot;http://semicomplete.com/presentations/logstash-monitorama-2013/\&quot;&quot;</span>,<br><span class="hljs-string">&quot;@timestamp&quot;</span> =&gt; <span class="hljs-number">2017</span>-<span class="hljs-number">03</span>-10<span class="hljs-symbol">T08:</span>09<span class="hljs-symbol">:</span><span class="hljs-number">49</span>.065Z,<br><span class="hljs-string">&quot;response&quot;</span> =&gt; <span class="hljs-string">&quot;200&quot;</span>,<br><span class="hljs-string">&quot;bytes&quot;</span> =&gt; <span class="hljs-string">&quot;203023&quot;</span>,<br><span class="hljs-string">&quot;clientip&quot;</span> =&gt; <span class="hljs-string">&quot;83.149.9.216&quot;</span>,<br><span class="hljs-string">&quot;@version&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;beat&quot;</span> =&gt; &#123;<br><span class="hljs-string">&quot;hostname&quot;</span> =&gt; <span class="hljs-string">&quot;renyufengdeMacBook-Pro.local&quot;</span>,<br><span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;renyufengdeMacBook-Pro.local&quot;</span>,<br><span class="hljs-string">&quot;version&quot;</span> =&gt; <span class="hljs-string">&quot;5.2.2&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;host&quot;</span> =&gt; <span class="hljs-string">&quot;renyufengdeMacBook-Pro.local&quot;</span>,<br><span class="hljs-string">&quot;httpversion&quot;</span> =&gt; <span class="hljs-string">&quot;1.1&quot;</span>,<br><span class="hljs-string">&quot;timestamp&quot;</span> =&gt; <span class="hljs-string">&quot;04/Jan/2015:05:13:42 +0000&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="索引日志到-ElasticSearch-中"><a href="#索引日志到-ElasticSearch-中" class="headerlink" title="索引日志到 ElasticSearch 中"></a>索引日志到 ElasticSearch 中</h1><ol><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input &#123;<br>beats &#123;<br>port =&gt; <span class="hljs-string">&quot;5043&quot;</span><br>&#125;<br>&#125;<br><br>filter &#123;<br>grok &#123;<br>match =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;COMBINEDAPACHELOG&#125;&quot;</span>&#125;<br>&#125;<br>geoip &#123;<br>source =&gt; <span class="hljs-string">&quot;clientip&quot;</span><br>&#125;<br>&#125;<br><br>output &#123;<br>stdout &#123; codec =&gt; rubydebug &#125;<br>elasticsearch &#123;<br>hosts =&gt; [ <span class="hljs-string">&quot;localhost:9200&quot;</span> ]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动以下服务</p><ul><li>重启 filebeat</li><li>启动 elasticsearch</li><li>启动 kibana</li></ul></li><li><p>此时运行的服务如下图<br><img src="http://assets.septenary.cn/user/1/image/0759c26c-01f2-4867-dd9d-6d4917eee384"></p></li><li><p>查看 elasticsearch 所有索引 <code>curl -XGET &#39;localhost:9200/_cat/indices?v&amp;pretty&#39;</code></p></li><li><p>通过索引名查询入库的日志 <code>curl -XGET &#39;localhost:9200/logstash-2017.03.10/_search?pretty&#39;</code></p></li><li><p>同样可以在 kibana 上查看</p></li></ol><p><a href="https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html">官方指南</a></p>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash 插件集成</title>
    <link href="/how-to-intergration-logstash-plugin-2/"/>
    <url>/how-to-intergration-logstash-plugin-2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-模板工具生成插件项目"><a href="#1-模板工具生成插件项目" class="headerlink" title="1.模板工具生成插件项目"></a>1.模板工具生成插件项目</h1><p><code>logstash-plugin generate --type input --name alioss --path ./</code></p><p>目录结构如下:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">____CHANGELOG.md</span><br><span class="hljs-string"></span>|____CONTRIBUTORS<br>|<span class="hljs-string">____DEVELOPER.md</span><br><span class="hljs-string"></span>|____Gemfile<br>|<span class="hljs-string">____Gemfile.lock</span><br><span class="hljs-string"></span>|____lib<br>|<span class="hljs-string"> </span>|____logstash<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|____inputs<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string">____alioss.rb</span><br><span class="hljs-string"></span>|____LICENSE<br>|<span class="hljs-string">____logstash-input-alioss.gemspec</span><br><span class="hljs-string"></span>|____Rakefile<br>|<span class="hljs-string">____README.md</span><br><span class="hljs-string"></span>|____spec<br>|<span class="hljs-string"> </span>|____inputs<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string">____alioss_spec.rb</span><br></code></pre></td></tr></table></figure><h1 id="2-安装使用-jruby"><a href="#2-安装使用-jruby" class="headerlink" title="2.安装使用 jruby"></a>2.安装使用 <strong>jruby</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rvm install jruby-9.1.7.0<br>rvm use jruby-9.1.7.0 --default<br></code></pre></td></tr></table></figure><h1 id="3-安装-bundler"><a href="#3-安装-bundler" class="headerlink" title="3.安装 bundler"></a>3.安装 <strong>bundler</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install bundler<br></code></pre></td></tr></table></figure><h1 id="4-gem-安装-aliyun-sdk"><a href="#4-gem-安装-aliyun-sdk" class="headerlink" title="4.gem 安装 aliyun-sdk"></a>4.<strong>gem</strong> 安装 <strong>aliyun-sdk</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install -v 0.3.6 aliyun-sdk<br></code></pre></td></tr></table></figure><h1 id="5-集成-aliyun-sdk，"><a href="#5-集成-aliyun-sdk，" class="headerlink" title="5.集成 aliyun-sdk，"></a>5.集成 <strong>aliyun-sdk</strong>，</h1><p>编辑 _logstash-input-alioss.gemspec_，添加依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">s.add_runtime_dependency &#x27;aliyun-sdk&#x27;, &#x27;~&gt; 0.3.6&#x27;<br></code></pre></td></tr></table></figure><h1 id="6-打包工程"><a href="#6-打包工程" class="headerlink" title="6.打包工程"></a>6.打包工程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bundle install<br></code></pre></td></tr></table></figure><h1 id="7-修改-logstash-Gemfile"><a href="#7-修改-logstash-Gemfile" class="headerlink" title="7.修改 logstash/Gemfile"></a>7.修改 <em>logstash/Gemfile</em></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;gem &quot;logstash-input-alioss&quot;, :path =&gt; &quot;logstash-input-alioss绝对路径&quot;&#x27; &gt;&gt; logstash路径/Gemfile<br></code></pre></td></tr></table></figure><h1 id="8-安装插件"><a href="#8-安装插件" class="headerlink" title="8.安装插件"></a>8.安装插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin install --no-verify<br></code></pre></td></tr></table></figure><h1 id="9-测试插件"><a href="#9-测试插件" class="headerlink" title="9.测试插件"></a>9.测试插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -e &#x27;input &#123; alioss &#123; &#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash 插件集成(简易版)</title>
    <link href="/how-to-intergration-logstash-plugin-1/"/>
    <url>/how-to-intergration-logstash-plugin-1/</url>
    
    <content type="html"><![CDATA[<p>1.切换到插件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> logstash-5.2.2/vendor/bundle/jruby/1.9/gems/<br></code></pre></td></tr></table></figure><p>2.生成模板插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash-plugin generate --type filter --name alioss --path ./<br></code></pre></td></tr></table></figure><p>3.配置 <strong>logstash-5.2.2/Gemfile</strong> 文件，添加一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem &quot;logstash-filter-alioss&quot;, :path =&gt; &quot;vendor/bundle/jruby/1.9/gems/logstash-filter-alioss&quot;<br></code></pre></td></tr></table></figure><p>4.验证 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; filter &#123; alioss&#123; &#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;&#x27;<br></code></pre></td></tr></table></figure><p>会得到如下结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&#123;<br><span class="hljs-string">&quot;@timestamp&quot;</span> =&gt; <span class="hljs-number">2017</span>-<span class="hljs-number">03</span>-14<span class="hljs-symbol">T09:</span><span class="hljs-number">32</span><span class="hljs-symbol">:</span><span class="hljs-number">23</span>.423Z,<br><span class="hljs-string">&quot;@version&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;host&quot;</span> =&gt; <span class="hljs-string">&quot;renyufengdeMacBook-Pro.local&quot;</span>,<br><span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;Hello World!&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 终端每日格言</title>
    <link href="/mac-daily-motto/"/>
    <url>/mac-daily-motto/</url>
    
    <content type="html"><![CDATA[<h1 id="1-用-brew-安装-fortune"><a href="#1-用-brew-安装-fortune" class="headerlink" title="1.用 brew 安装 fortune"></a>1.用 brew 安装 fortune</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew install fortune</span><br></code></pre></td></tr></table></figure><h1 id="2-安装语言库"><a href="#2-安装语言库" class="headerlink" title="2.安装语言库"></a>2.安装语言库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> git@github.com:ruanyf/fortunes.git</span><br></code></pre></td></tr></table></figure><h1 id="3-生成索引文件"><a href="#3-生成索引文件" class="headerlink" title="3. 生成索引文件"></a>3. 生成索引文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> strfile fortunes/data/fortunes</span><br><span class="hljs-meta">$</span><span class="bash"> strfile fortunes/data/chinese</span><br><span class="hljs-meta">$</span><span class="bash"> strfile fortunes/data/tang300</span><br><span class="hljs-meta">$</span><span class="bash"> strfile fortunes/data/song100</span><br></code></pre></td></tr></table></figure><h1 id="4-编辑-zshrc"><a href="#4-编辑-zshrc" class="headerlink" title="4. 编辑 ~/.zshrc"></a>4. 编辑 <strong>~/.zshrc</strong></h1><p>那么每次启动 shell 窗口，就会自动跳出一句格言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo<br>echo &quot;=============== Quote Of The Day ===============&quot;<br>echo<br>fortune 25% fortunes/data/fortunes 25% fortunes/data/chinese 25% fortunes/data/tang300 25% fortunes/data/song100<br>echo<br>echo &quot;================================================&quot;<br>echo<br></code></pre></td></tr></table></figure><h1 id="5-制作语言包"><a href="#5-制作语言包" class="headerlink" title="5. 制作语言包"></a>5. 制作语言包</h1><p><a href="http://www.ruanyifeng.com/blog/2015/04/fortune.html">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MEAN 栈实践之 在 CVM、AWS 上部署小记</title>
    <link href="/mean-practice-on-cvm-aws/"/>
    <url>/mean-practice-on-cvm-aws/</url>
    
    <content type="html"><![CDATA[<p>简单记录了当初考虑在 <strong>腾讯云</strong> 还是 <strong>AWS</strong> 部署服务的小记，虽然最终还是在 阿里云上部署。。。</p><span id="more"></span><h1 id="Ⅰ-腾讯云-CVM-部署"><a href="#Ⅰ-腾讯云-CVM-部署" class="headerlink" title="Ⅰ. 腾讯云 CVM 部署"></a>Ⅰ. 腾讯云 CVM 部署</h1><p>考虑数据库与服务器配置在同一主机上，勾选磁盘空间</p><h2 id="配置-ssh-公钥"><a href="#配置-ssh-公钥" class="headerlink" title="配置 ssh 公钥"></a>配置 ssh 公钥</h2><p>1.本地 <code>ssh-keygen</code> 生成密钥, 在 <code>~/.ssh/config</code> 中添访问配置</p><pre><code class="hljs"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host qcloud<br>HostName 公网IP<br>User root<br>Port 22<br>IdentityFile ~/.ssh/qcloud_rsa<br></code></pre></td></tr></table></figure></code></pre><p>2.在云主机配置公钥<br>3.连接云主机 <code>ssh qcloud</code></p><h2 id="MongoDB-的安装"><a href="#MongoDB-的安装" class="headerlink" title="MongoDB 的安装"></a>MongoDB 的安装</h2><p>1.连接云主机</p><p>2.编辑 <code>/etc/yum.repos.d/mongodb-org-3.4.repo</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mongodb-org-3.4]<br>name=MongoDB Repository<br>baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc<br></code></pre></td></tr></table></figure><p>3.执行 <code>sudo yum install -y mongodb-org</code> 进行安装</p><p>4.对于类 <strong>SELinux</strong> 系统 ，需要置成 <strong>disabled</strong></p><p>5.<strong>mongod</strong> 操作: <code>sudo service mongod</code> + <code>start</code> , <code>stop</code> , <code>restart</code></p><p>6.配置开机自启动 <code>sudo chkconfig mongod on</code></p><hr><h1 id="Ⅱ-AWS-部署"><a href="#Ⅱ-AWS-部署" class="headerlink" title="Ⅱ. AWS 部署"></a>Ⅱ. AWS 部署</h1><h2 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a>安全组配置</h2><table><thead><tr><th>类型</th><th>协议</th><th>端口范围</th><th>来源</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>0.0.0.0/0</td></tr><tr><td>所有 ICMP</td><td>全部</td><td>不适用</td><td>0.0.0.0/0</td></tr></tbody></table><h2 id="退出-SSH-继续运行程序"><a href="#退出-SSH-继续运行程序" class="headerlink" title="退出 SSH 继续运行程序"></a>退出 SSH 继续运行程序</h2><ol><li><p>执行 <code>screen</code> 进入子界面</p></li><li><p>执行程序 <code>sudo node ./bin/www</code></p></li><li><p><code>ctrl + A</code> 后键入 <code>D</code> 退出子界面</p></li><li><p>退出 SSH，程序会继续运行</p></li><li><p>再次连接 SSH，执行 <code>screen -ls</code> 查看由screen维护的进程id</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">There is a screen on:<br>20232.pts-0.ip-172-31-30-2(01/19/17 07:24:36)(Detached)<br>1 Socket in /var/run/screen/S-ubuntu.<br></code></pre></td></tr></table></figure></li><li><p><code>screen -r 20232.pts-0.ip-172-31-30-2</code> 进入子界面管理 node 进程</p></li></ol><h2 id="使用PM2管理程序"><a href="#使用PM2管理程序" class="headerlink" title="使用PM2管理程序"></a>使用PM2管理程序</h2><ol><li><p>安装pm2 <code>[sudo] npm install pm2 -g</code></p></li><li><p>创建一个apps.json，然后通过pm2 start apps.json来启动apps.json里面定义的apps，该文件就是一个json格式的配置文件，告诉pm2该怎么去启动app，启动哪些app。比如：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#123;<br>&quot;name&quot;:&quot;your app name&quot;,<br>&quot;script&quot;:&quot;the script to start your app&quot;,<br>&quot;cwd&quot;:&quot;change working directory&quot;, // 指定该app工作目录，这样pm2会相对这个目录去找脚本之类的。<br>&quot;error_file&quot;:&quot;app-err.log&quot;,<br>&quot;out_file&quot;:&quot;app-out.log&quot;,<br>&quot;pid_file&quot;:&quot;app.pid&quot;,<br>&quot;one_launch_only&quot;:&quot;true&quot;,<br>&quot;env&quot;: &#123;<br>&quot;NODE_ENV&quot;:&quot;production&quot;<br>&#125;<br>&#125;]<br></code></pre></td></tr></table></figure></li><li><p><a href="http://www.jianshu.com/p/fdc12d82b661">参考</a></p></li></ol><h2 id="保证-mongod-在-nodejs-前启动"><a href="#保证-mongod-在-nodejs-前启动" class="headerlink" title="保证 mongod 在 nodejs 前启动"></a>保证 mongod 在 nodejs 前启动</h2><p><a href="http://antrikshy.com/blog/run-mongodb-automatically-nodejs-project">Link</a></p>]]></content>
    
    
    <categories>
      
      <category>devOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>devOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Effective Java》读书笔记</title>
    <link href="/effective-java-learning/"/>
    <url>/effective-java-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="1-考虑用静态工厂方法代替构造器"><a href="#1-考虑用静态工厂方法代替构造器" class="headerlink" title="1.考虑用静态工厂方法代替构造器"></a>1.考虑用静态工厂方法代替构造器</h2><p>当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替多个构造器，并且慎重的选择名称以便突出他们之前的区别。</p><p>静态工厂相对构造器的三大优势：</p><ol><li>静态工厂方法都有名称</li><li>不必在每次调用都创建一个新的对象（对象的复用）</li><li>可以返回类型的任意子类型对象 （多态性）</li></ol><span id="more"></span><p>静态工厂惯用名称：</p><ol><li>valueOf</li><li>of (valueOf 更简洁用法)</li><li>getInstance</li><li>newInstance</li><li>getType</li><li>newType</li></ol><h2 id="2-遇到多个构造器参数时考虑使用构建模式"><a href="#2-遇到多个构造器参数时考虑使用构建模式" class="headerlink" title="2.遇到多个构造器参数时考虑使用构建模式"></a>2.遇到多个构造器参数时考虑使用构建模式</h2><p>构造器模式。详见构造器博客。</p><h2 id="3-用私有构造器或者枚举类型强化Singleton属性"><a href="#3-用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="3.用私有构造器或者枚举类型强化Singleton属性"></a>3.用私有构造器或者枚举类型强化Singleton属性</h2><p>单例模式的使用。 最基本就是用私有构造器来保证实例不会被构造。 除此之外，枚举是一种很优雅的单例模式实现方法。</p><p>单例模式三种实现方式：</p><ol><li>公有域</li><li>公有静态方法 （推荐）</li><li>包含单个元素的枚举类型 （强烈推荐）</li></ol><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4.通过私有构造器强化不可实例化的能力"></a>4.通过私有构造器强化不可实例化的能力</h2><p>同上。主要还阐明了对于一些不希望实例化的类，例如静态工具类也应该将构造方法申明为静态的强化其不可实例化的能力。</p><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5.避免创建不必要的对象"></a>5.避免创建不必要的对象</h2><p>常见的如String池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;hello&quot;</span>;<br>String b = <span class="hljs-string">&quot;hello&quot;</span>;<br>String c = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br>a == b <span class="hljs-comment">//true</span><br>a == c <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>ab共用连接池对象，c为不必要创建出来的对象。</p><p>使用静态工厂也可以避免产生不必要的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Boolean a = <span class="hljs-keyword">new</span> Boolean(<span class="hljs-string">&quot;true&quot;</span>); <span class="hljs-comment">//产生对象</span><br>Boolean a = Boolean.valueOf(<span class="hljs-string">&quot;true&quot;</span>); <span class="hljs-comment">//不产生</span><br></code></pre></td></tr></table></figure><p>当心自动装箱以及拆箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Long sum = <span class="hljs-number">0L</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>    sum += i;  <span class="hljs-comment">//自动装箱 形成一个Long对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子就不必要的产生了10000个Long对象。因为long会自动装箱成Long。改进方法为让sum为long类型。</p><p><strong>慎用对象池，维护自己的对象池通常会把代码库弄得很乱，同时增加内存占用，并且还会损害性能。现代的JVM实现具有高度优化的垃圾回收机制，其性能很快就会超过轻量级对象池的性能</strong></p><h2 id="6-消除过期的引用"><a href="#6-消除过期的引用" class="headerlink" title="6.消除过期的引用"></a>6.消除过期的引用</h2><p>清空对象引用的最好办法应该是让包含该引用的变量结束其生命周期。如果正确使用了局部变量那么这种消除操作会自然而然的发生。 除此之外，如果是依赖于程序员自己管理的内存时，应该警惕内存泄露的问题。</p><h2 id="7-避免使用终结方法"><a href="#7-避免使用终结方法" class="headerlink" title="7.避免使用终结方法"></a>7.避免使用终结方法</h2><p><strong>don’t use finalize()</strong></p><h2 id="8-覆盖equals时请遵守通用约定"><a href="#8-覆盖equals时请遵守通用约定" class="headerlink" title="8.覆盖equals时请遵守通用约定"></a>8.覆盖equals时请遵守通用约定</h2><p>当覆盖了equals方法时应保证该方法依然遵循下列的性质。</p><p>equals方法的一些性质(不包含null)：</p><ul><li>自反性：x, x.equals(x) 返回true</li><li>对称性：x,y。x.equals(y) == y.equals(x)</li><li>传递性：x,y,z x.equlas(y) == true 且 y.equals(z) 则 x.equlas(z)</li><li>一致性：只要equals的比较操作在对象中的引用的信息没有被修改，那么多次调用得到结果是一致的</li><li>对于任何非null的引用 x x.equals(null) 返回 false</li></ul><p>实现高质量 equals 方法的诀窍：</p><ol><li>使用==操作符检查 “参数是否为这个对象的引用” 如果是直接返回true。 （性能优化）</li><li>使用instanceof操作符检查 “参数是否为正确的类型”。</li><li>把参数转换成正确的类型 (因为上一条的检查所以可以安全的转换)</li><li>对于该类中的每个“关键”域，检查参数中的域是否与该对象中的对应域相匹配。</li><li>覆盖equals方法时总要覆盖hashCode方法</li><li>不要将equals申明中的Object对象替换为其他已知的类型。（会使方法变成重载，记得使用@override)</li></ol><p>**对于既不是float也不是double类型的基本类型域可以直接使用==操作符。对于float域可以使用Float.compare方法，而对于double域，可以调用Double.compare。对于float和double域进行特殊处理是有必要的，因为存在着Float.NaN、-0.0f以及类似的double常量。并且存在着精度的偏差问题。<br>**</p><h2 id="9-覆盖equals时总要覆盖hashCode"><a href="#9-覆盖equals时总要覆盖hashCode" class="headerlink" title="9.覆盖equals时总要覆盖hashCode"></a>9.覆盖equals时总要覆盖hashCode</h2><p>如果两个对象根据equals（Object）方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生相同的整数结果。</p><h2 id="10-始终要覆盖toString"><a href="#10-始终要覆盖toString" class="headerlink" title="10.始终要覆盖toString"></a>10.始终要覆盖toString</h2><p>覆盖toString可以让类打印出更加有用的信息。 个人觉得始终说的有点太绝对，如果你坚信自己这个类不会被打印出来，那么还是没有必要去覆盖的。</p><h2 id="11-谨慎地覆盖clone"><a href="#11-谨慎地覆盖clone" class="headerlink" title="11.谨慎地覆盖clone"></a>11.谨慎地覆盖clone</h2><p>不要使用clone，请自己实现深拷贝。</p><h2 id="12-考虑实现Compareable接口"><a href="#12-考虑实现Compareable接口" class="headerlink" title="12.考虑实现Compareable接口"></a>12.考虑实现Compareable接口</h2><p>CompareTo的通用约定与equasls方法的相似：</p><ol><li>确保 a.compareTo(b) == - b.compareTo(a) 当且仅当a.compareTo(b) 抛出异常时 b.compareTo(a) 抛出异常。</li><li>可传递： a.compareTo(b) &gt; 0 &amp;&amp; b.compareTo(z) &gt; 0 =&gt; a.compareTo(z) &gt; 0</li><li>强烈建议 a.compareTo(b) == 0 =&gt; x.equlas(b)</li></ol><p>compareTo的比较要确保结果不会越界： return Integer.compare(a,b) 而不是 return a - b // 可能会溢出</p><h2 id="13-使类和成员的可访问性最小化"><a href="#13-使类和成员的可访问性最小化" class="headerlink" title="13.使类和成员的可访问性最小化"></a>13.使类和成员的可访问性最小化</h2><p>如果类或者接口能被做到包级私有的，它就应该被做成包级私有的。通过把类或者接口做成包级私有的，它实际上成了这个包实现的一部分，而不是该包导出API的一部分，在以后发行版本中，可以对它进行修改、替换、或者删除，而无需担心会影响到现有的客户端。</p><p>另外记住，实例域不能是公有的。如果域是非final的或者是指向一个可改变对象final引用。那么一旦使这个域为公有的，就放弃了对存储在这个域中值进行限制的能力，这意味着你也放弃了强制这个域不可变的能力。</p><h2 id="14-在公有类中使用访问方法而非公有域"><a href="#14-在公有类中使用访问方法而非公有域" class="headerlink" title="14.在公有类中使用访问方法而非公有域"></a>14.在公有类中使用访问方法而非公有域</h2><p>getter、setter意义： 如果类可以在它所在的包外部进行方法，就提供访问方法，以保留将来改变该类内部表示法的灵活性。如果公有类暴露了它的数据域，要想在在将来改变其内部方法是不可能的，因为公有类客户端代码已经遍布各处了。</p><h2 id="15-使可变性最小"><a href="#15-使可变性最小" class="headerlink" title="15.使可变性最小"></a>15.使可变性最小</h2><p>为了使类成为不可变的，要遵循下面五条规则：</p><ol><li>不要提供任何修改对象状态的方法</li><li>保证类不会被扩展</li><li>使所有的域都是final的</li><li>使所有的域都是私有的</li><li>确保对于任何可变组件的互斥访问。如果类有指向可变对象的域要确保该对象不被客户端引用</li><li>不可变对象本质是线程安全的，他们不需要同步。可以被自由的共享。且可以配合静态工厂方法实现缓存。</li></ol><p><strong>不可变对象的真正唯一缺点是，对于每个不同的值都要创建一个单独对象。创建这种对象可能代价很高。</strong></p><h2 id="16-复合优先于继承"><a href="#16-复合优先于继承" class="headerlink" title="16.复合优先于继承"></a>16.复合优先于继承</h2><p>跨包继承存在危险，当父类改变了，会间接破坏了子类。 只有当子类真正是超类的子类型时，才适合使用继承。即必须有 “is-a” 关系。 否则考虑使用复合（包装类），包装类不仅比子类更加健壮，而且功能也更加强大（更易于扩展）。</p><h2 id="17-要么为继承而设计，并提供文档说明，要么就禁止继承"><a href="#17-要么为继承而设计，并提供文档说明，要么就禁止继承" class="headerlink" title="17.要么为继承而设计，并提供文档说明，要么就禁止继承"></a>17.要么为继承而设计，并提供文档说明，要么就禁止继承</h2><h2 id="18-接口优于抽象类"><a href="#18-接口优于抽象类" class="headerlink" title="18.接口优于抽象类"></a>18.接口优于抽象类</h2><p>实现接口需要重复定义某些方法，这个问题在Java 8 中已经得到解决。但若非用到Java 8的新特性可以考虑引入骨架实现类，减少重复代码。 详情见骨架类笔记。</p><h2 id="19-接口只用于定义类型"><a href="#19-接口只用于定义类型" class="headerlink" title="19.接口只用于定义类型"></a>19.接口只用于定义类型</h2><p>常量接口模式是对接口的不良使用。</p><h2 id="20-类层次优先于标签类"><a href="#20-类层次优先于标签类" class="headerlink" title="20.类层次优先于标签类"></a>20.类层次优先于标签类</h2><p>标签类：用一个域来记录该类的性质 应该使用清晰的类层次而不是硬编码实现。</p><h2 id="21-用函数对象表示策略"><a href="#21-用函数对象表示策略" class="headerlink" title="21.用函数对象表示策略"></a>21.用函数对象表示策略</h2><p>例如Comparator接口。 通过一个类实现了Comparator接口来后传递给Arrays.sort(a,new comp()) 实现一组对象的排序。这就是策略模式，不改变原对象的代码而是生成新策略来改变它的行为。</p><p>相反Comparable接口则需要需要排序的类来实现它的compareTo方法。</p><p>策略类可以使用匿名类，但是请注意使用匿名类时每次调用都会创建一个新的实例。如果反复使用的话可以将其存放在一个私有的静态final域里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span></span>&#123;<br><span class="hljs-comment">// 无需导出具体策略 , 还可以实现其他接口（Serializable)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StrLenCmp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">String</span>&gt; , <span class="hljs-title">Serializable</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(String s1,String s2)</span></span>&#123;<br><span class="hljs-keyword">return</span> s1.length() - s2.length();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 导出公有静态域</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Comparator&lt;String&gt; STRING_LENGTH_COMPARATOR = <span class="hljs-keyword">new</span> StrLenCmp();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="22-优先考虑静态成员类"><a href="#22-优先考虑静态成员类" class="headerlink" title="22.优先考虑静态成员类"></a>22.优先考虑静态成员类</h2><p>如果申明成员类不要求访问外围实例，就要始终把static修饰符放在它的声明中，使它成为静态成员类而不是非静态成员类。如果省略了static修饰符，则每个实例都包含一个额外的指向外围对象的引用。保留这份引用需要消耗时间和空间，并且会导致外围实例在符合垃圾回收时却仍然得以保留。</p><h2 id="23-请不要在新代码中使用原生态类型"><a href="#23-请不要在新代码中使用原生态类型" class="headerlink" title="23.请不要在新代码中使用原生态类型"></a>23.请不要在新代码中使用原生态类型</h2><p>使用泛型而不是原生类型。反省有子类型化的规则，List是List的子类型，而不是List的子类型。因此如果使用了List这样的原生态类型，就会失掉类型安全性。</p><p>但是这条规则也有两个小小的例外,这两者都源于“泛型信息可以在运行时被擦除”这一事实。在类文字中必须使用原生态类型。规范不允许使用参数化类型（虽然允许数组类型和基本类型）。即List.class、String[].class和int.class都是合法的，但是List 和 List&lt;?&gt;.class 都是不合法的。</p><p>Set&lt;?&gt; 无限制通配符不允许插入任何元素（除了null）</p><h2 id="24-消除非受检警告"><a href="#24-消除非受检警告" class="headerlink" title="24.消除非受检警告"></a>24.消除非受检警告</h2><p>SuppressWarning(“unchecked”) 消除未受检警告，但是必须自己确保确实这个警告是不必要的。 <strong>永远不要在整个类上使用@SuppressWarnings，尽可能小范围的使用</strong></p><p>你可以在整个方法上使用但也尽量不要而是用在一个局部变量上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;<br><span class="hljs-keyword">if</span> (a.length &lt; size) &#123;<br><span class="hljs-meta">@suppressWarnings(&quot;unchecked&quot;)</span><br>T[] result = (T[]) Arrays.copyOf(elements,size,a.getClass());<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="25-列表优先于数组"><a href="#25-列表优先于数组" class="headerlink" title="25.列表优先于数组"></a>25.列表优先于数组</h2><p>利用数组你会在运行时发现所犯的错误，而利用列表，则可以在编译时发现错误。因为数组是具体化的所以会在运行时才知道并检查他们的元素类型的约束。泛型则是通过擦除来实现的，因此泛型在编译时强化他们的类型信息，并在运行时丢弃（擦除）他们的元素类型信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] objectArray = <span class="hljs-keyword">new</span> Long[<span class="hljs-number">1</span>];<br>objectArray[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;I don&#x27;t fit in&quot;</span>; <span class="hljs-comment">// 运行时抛出异常</span><br><br>List&lt;Object&gt; o1  = <span class="hljs-keyword">new</span> ArrayList&lt;Long&gt;(); <span class="hljs-comment">// 编译时就抛出</span><br>o1.add(<span class="hljs-string">&quot;I don&#x27;t fit in&quot;</span>); <br></code></pre></td></tr></table></figure><p>像E、List和List这样的类型被称作不可具体化的类型。直观的说，不可具体化的类型是指其运行时表示法包含的信息比其编译时包含的信息更少。唯一可具体化的参数化类型是无限制的通配符类型，例如List 和 Map。虽然不常用，但是创建无限制通配符类型的数组是合法的。</p><h2 id="26-优先考虑泛型"><a href="#26-优先考虑泛型" class="headerlink" title="26.优先考虑泛型"></a>26.优先考虑泛型</h2><p>记住，你不能创建不可具体化的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">E[] e = <span class="hljs-keyword">new</span> E[<span class="hljs-number">10</span>]; <span class="hljs-comment">// error</span><br></code></pre></td></tr></table></figure><p>因此应该优先考虑使用泛型，即使使代码没有那么简洁，但是更加安全也更加容易。</p><p>27.优先考虑泛型方法<br>理由和上一条类似，更加安全、可靠。</p><p>28.利用有限制通配符来提升API灵活性<br>PECS = producer-extends , consumer-super 原则 如果参数化类型表示一个T生产证，就使用&lt;? extends T&gt; 如果表示的是一个消费者使用&lt;? super T&gt;</p><p>一般来说，如果类型参数只在方法申明中出现一次，就可以用通配符来取代它。如果是无限制的类型参数，就用无限制的通配符来取代它；如果是有限制的类型参数，就用有限制的通配符取代它。</p><h2 id="29-优先考虑类型安全的异构容器"><a href="#29-优先考虑类型安全的异构容器" class="headerlink" title="29.优先考虑类型安全的异构容器"></a>29.优先考虑类型安全的异构容器</h2><p>异构容器是指能够容纳不同类型对象的容器。像我们通常用的List、Map等容器，它们的原生态类型本身就是异构容器，一旦给它们设置了泛型参数，例如List、Map&lt;Integer, String&gt;，它们就不再是异构容器。但是，原生态类型是不安全的，你无法知道从容器取出的类型到底是什么，很容易导致错误。因此，如何构建类型安全的异构容器就成了一个重要的话题。</p><p>使用Map实现类型安全的异构容器 局限性 使用Map实现类型安全的异构容器</p><p>我们将要实现一个Favorites类，用来对每个类型保存一个最喜欢的实例。它的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Favorites</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putFavorite</span><span class="hljs-params">(Class&lt;T&gt; type, T instance)</span></span>;<br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getFavorite</span><span class="hljs-params">(Class&lt;T&gt; type)</span></span>;<br>&#125;```<br><br>下面是一个测试程序，说明了如何使用Favorites类保存、获取并打印最喜爱的String、Integer和Class实例。<br><br>```<span class="hljs-function">java</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  Favorites f = <span class="hljs-keyword">new</span> Favorites();<br>  f.putFavorite(String.class, <span class="hljs-string">&quot;Java&quot;</span>);<br>  f.putFavorite(Integer.class, <span class="hljs-number">0xcafebabe</span>);<br>  f.putFavorite(Class.class, Favorites.class);<br>  String favoriteString = f.getFavorite(String.class);<br>  <span class="hljs-keyword">int</span> favoriteInteger = f.getFavorite(Integer.class);<br>  Class&lt;?&gt; favoriteClass = f.getFavorite(Class.class);<br>  System.out.printf(<span class="hljs-string">&quot;%s %x %s%n&quot;</span>, favoriteString, favoriteInteger, favoriteClass.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果是 Java cafebabe Favorites Favorite实例是类型安全的，当你向它请求String的时候，它绝不会返回一个Integer给你。同时它也是异构的，它的键可以是任意类型。</p><p>Favorites的实现也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Favorites</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; favorites = <span class="hljs-keyword">new</span> HashMap&lt;Class&lt;?&gt;, Object&gt;();<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putFavorite</span><span class="hljs-params">(Class&lt;T&gt; type, T instance)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-keyword">null</span>)<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;Type is null&quot;</span>);<br>    favorites.put(type, instance);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getFavorite</span><span class="hljs-params">(Class&lt;T&gt; type)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type.cast(favorites.get(type));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部用一个Map&lt;Class, Object&gt;来保存所有的爱好，使用Class作为键记录每个爱好的类型，而用Object作为值不再区分它们的类型。当取出时，根据请求的类型从Map中查找相应的值，由于值是Object类型的，需要使用type.cast强制转换为type指定的类型。只要客户端按照API的要求使用，这里的强制转换一定不会出错。</p><p>局限性</p><p>这种实现方法有两种局限性。</p><p>首先，恶意的客户端可以破坏Favorites实例的类型安全。如果客户端传入原生态的Class对象和不一致的值对象，则会在getFavorite的cast时抛出ClassCastException异常。不过好在我们可以对这一情况加以约束。只需要在put时使用一个动态的转换就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putFavorite</span><span class="hljs-params">(Class&lt;T&gt; type, T instance)</span> </span>&#123;<br>  favorites.put(type, type.cast(instance));<br>&#125;```<br><br>一旦客户端传入值类型不一致，就立即抛出异常。<br><br>第二种局限性是它不能用于泛型化类型，例如，你无法把List作为Favorites的键，因为List.class是个语法错误。这一局限性还没有很好的解决方法。<br><br>## <span class="hljs-number">30.</span>用<span class="hljs-class"><span class="hljs-keyword">enum</span>代替<span class="hljs-title">int</span>常量</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">Java</span>枚举类型背后的基本思想非常简单：他们就是用公有的静态<span class="hljs-title">final</span>域为每个枚举常量导出实例的类。因为没有可以访问的构造器，枚举类型是真正的<span class="hljs-title">final</span>。 枚举类还有一个好处，你可以增加或者重排列枚举类型中的常量，而无需重新编译它的客户端代码，因为导出常量的域在枚举类型和他的客户端之间提供了一个隔离层：常量值并没有被编译到客户端代码中，而是在<span class="hljs-title">int</span>枚举模式中。</span><br><span class="hljs-class"></span><br><span class="hljs-class">**枚举的<span class="hljs-title">toString</span>方法返回每个枚举的声明名字。<span class="hljs-title">valueOf</span>方法通过名字来获取枚举类,<span class="hljs-title">valueOf</span>方法依赖于默认的<span class="hljs-title">toString</span>方法因此如果覆盖了<span class="hljs-title">toString</span>将不再有用。**</span><br><span class="hljs-class"></span><br><span class="hljs-class">特定于方法的方法实现: 可以在枚举中申明一个抽象方法，这样所有的枚举常量都得实现它：</span><br><span class="hljs-class"></span><br><span class="hljs-class">```<span class="hljs-title">java</span></span><br><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">enum</span> <span class="hljs-title">type</span></span>&#123;<br>JSON&#123;<br><span class="hljs-function">String <span class="hljs-title">convert</span><span class="hljs-params">(String raw)</span> </span>&#123; <br><span class="hljs-comment">//...covert in json </span><br>&#125;<br>&#125;, XML &#123;<br><span class="hljs-function">String <span class="hljs-title">covert</span><span class="hljs-params">(String raw)</span> </span>&#123;<br><span class="hljs-comment">//...convert in xml</span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">abstract</span> String <span class="hljs-title">convert</span><span class="hljs-params">(String raw)</span></span>;<br>&#125;```<br><br>嵌套的枚举：策略枚举模式 假如对于一个枚举每次都得选择一个方法，就想上述的特定于方法的方法实现，但是有很多个枚举他们用的方法是一样的，如果用上述的代码你得重复写很多一样的代码。这个时候可以考虑将方法嵌套在一个内部类中，对于外部枚举每定义一个就选择一个策略。<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">PayrollDay</span> </span>&#123;<br>    MONDAY(PayType.WEEKDAY), <br>    TUESDAY(PayType.WEEKDAY), <br>    WEDNESDAY(PayType.WEEKDAY), <br>    THURADAY(PayType.WEEKDAY), <br>    FRIDAY(PayType.WEEKDAY), <br>    SATURDAY(PayType.WEEKEND),<br>    SUNDAY(PayType.WEEKEND);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PayType payType;<br>    PayrollDay(PayType payType) &#123;<br>        <span class="hljs-keyword">this</span>.payType = payType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">pay</span><span class="hljs-params">(<span class="hljs-keyword">double</span> hoursWorked, <span class="hljs-keyword">double</span> payRate)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> payType.pay(hoursWorked, payRate);<br>    &#125;<br><br>    <span class="hljs-comment">//私有嵌套的枚举类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">PayType</span> </span>&#123;<br>        WEEKDAY &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">pay</span><span class="hljs-params">(<span class="hljs-keyword">double</span> hoursWorked, <span class="hljs-keyword">double</span> payRate)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> hoursWorked - HOURS_PER_SHIFT &gt; <span class="hljs-number">0</span> <br>                    ?(hoursWorked*payRate*<span class="hljs-number">1.5</span> - <span class="hljs-number">0.5</span>*HOURS_PER_SHIFT*payRate) <br>                    : hoursWorked*payRate;<br>            &#125;<br>        &#125;,<br>        WEEKEND &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">pay</span><span class="hljs-params">(<span class="hljs-keyword">double</span> hoursWorked, <span class="hljs-keyword">double</span> payRate)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> hoursWorked * payRate * <span class="hljs-number">1.5</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> HOURS_PER_SHIFT = <span class="hljs-number">8</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">pay</span><span class="hljs-params">(<span class="hljs-keyword">double</span> hoursWorked, <span class="hljs-keyword">double</span> payRate)</span></span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(PayrollDay.MONDAY.pay(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>));<br>        System.out.println(PayrollDay.SUNDAY.pay(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="31-用实例域代替序数"><a href="#31-用实例域代替序数" class="headerlink" title="31.用实例域代替序数"></a>31.用实例域代替序数</h2><p>所有枚举类都有一个ordinal方法，它返回枚举常量在类型中的数字位置。**但是永远不要根据枚举的序数导出与它关联的值，你应该将它保存在一个实例域中。<br>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Enumble</span></span>&#123;<br>SOLE(<span class="hljs-number">1</span>),DUET(<span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> number;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Enumble</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>&#123;<br><span class="hljs-keyword">this</span>.number = size;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="32-用EnumSet代替位域"><a href="#32-用EnumSet代替位域" class="headerlink" title="32.用EnumSet代替位域"></a>32.用EnumSet代替位域</h2><p>如果方法需要传递多个枚举值，使用EnumSet会比用位域来控制更好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Style</span> </span>&#123;BOLD, ITALTC, UNDERLTINE&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">applyStyles</span><span class="hljs-params">(Set&lt;Style&gt; styles)</span> </span>&#123;<br>        System.out.println(styles);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Main main = <span class="hljs-keyword">new</span> Main();<br>        main.applyStyles(EnumSet.of(Style.BOLD, Style.ITALTC));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="33-使用EnumMap代替序数索引"><a href="#33-使用EnumMap代替序数索引" class="headerlink" title="33.使用EnumMap代替序数索引"></a>33.使用EnumMap代替序数索引</h2><p>千万不要使用ordinal来索取枚举类型。可以使用EnumMap来代替索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Style</span> </span>&#123;BOLD, ITALTC, UNDERLTINE&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> EnumMap&lt;Style, String&gt; <span class="hljs-title">push</span><span class="hljs-params">()</span> </span>&#123;<br>        EnumMap&lt;Style, String&gt; enumMap = <span class="hljs-keyword">new</span> EnumMap&lt;Style, String&gt;(Style.class);<br>        enumMap.put(Style.BOLD,<span class="hljs-string">&quot;good&quot;</span>);<br>        enumMap.put(Style.ITALTC,<span class="hljs-string">&quot;normal&quot;</span>);<br>        <span class="hljs-keyword">return</span> enumMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Main main = <span class="hljs-keyword">new</span> Main();<br>        EnumMap&lt;Style,String&gt; enumMap = main.push();<br>        System.out.println(enumMap.get(Style.BOLD));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="34-用接口模拟可伸缩的枚举"><a href="#34-用接口模拟可伸缩的枚举" class="headerlink" title="34.用接口模拟可伸缩的枚举"></a>34.用接口模拟可伸缩的枚举</h2><p>虽然枚举类型不是可以扩展的，但是接口是。因此可以利用接口来模拟可以伸缩的枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">BaseOperation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    PLUS(<span class="hljs-string">&quot;+&quot;</span>) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> String symbol;<br><br>    BaseOperation(String symbol) &#123;<br>        <span class="hljs-keyword">this</span>.symbol = symbol;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以将方法申明为抽象的实现这种伸缩性。（30条）</p><h2 id="35-注解优先于命名模式"><a href="#35-注解优先于命名模式" class="headerlink" title="35.注解优先于命名模式"></a>35.注解优先于命名模式</h2><p>使用合适的注解，会比你对一个方法任何简明的命名更加让人了解它的用途。</p><h2 id="36-坚持使用Override注解"><a href="#36-坚持使用Override注解" class="headerlink" title="36.坚持使用Override注解"></a>36.坚持使用Override注解</h2><p>Override通常能让你避免重载了方法却以为是覆盖了方法。</p><h2 id="37-用标记接口定义类型"><a href="#37-用标记接口定义类型" class="headerlink" title="37.用标记接口定义类型"></a>37.用标记接口定义类型</h2><p>标记接口是没有包含方法申明的接口，而只是指明一个类实现了具有某种属性的接口。例如，考虑Serializable接口，通过实现这个接口，类表明它的实例可以被写到ObjectOutputStream。 <strong>注解以及标记接口区分使用：</strong></p><ul><li>注解：该标记应用到任何元素而不是只给类和接口。因为只有类和接口可以用来或者扩展接口。</li><li>标记接口：只应用给类和接口。</li></ul><h2 id="38-检查参数的有效性"><a href="#38-检查参数的有效性" class="headerlink" title="38.检查参数的有效性"></a>38.检查参数的有效性</h2><p>每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制。应该把这些限制写到文档中，并且在这个方法体的开头处，通过显示的检查来实施这些限制。</p><h2 id="39-必要时进行保护性拷贝"><a href="#39-必要时进行保护性拷贝" class="headerlink" title="39.必要时进行保护性拷贝"></a>39.必要时进行保护性拷贝</h2><p>保护性拷贝是在检查参数的有效性之前进行的，并且有效性检查是针对拷贝之后的对象，而不是针对原始对象。这样做可以避免在检查参数以及拷贝对象参数时间段间原始对象的改变。 使用保护性拷贝主要是预防原始对象的改变而对当前对象造成非预期的异常。所以只要可能就应该尽可能的使用不可变对象。</p><h2 id="40-谨慎设计方法签名"><a href="#40-谨慎设计方法签名" class="headerlink" title="40.谨慎设计方法签名"></a>40.谨慎设计方法签名</h2><ul><li>谨慎地选择方法的名称。</li><li>不要过于追求提供便利的方法。每个方法都应该尽其所能。只有当一个些组合的方法经常被调用时才为他们创建“快捷方式”。</li><li>避免过长的参数。目标是四个或者更少。</li><li>对于参数类型，要优先使用接口而不是类。</li></ul><h2 id="41-慎用重载"><a href="#41-慎用重载" class="headerlink" title="41.慎用重载"></a>41.慎用重载</h2><p>重载方法，要调用哪一个重载方法是在编译时决定的。因此重载方法的选择是静态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>Collection&lt;?&gt; c = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>classify(c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">classify</span><span class="hljs-params">(Collection&lt;?&gt; c)</span></span>&#123;<br><span class="hljs-comment">//打印出这个</span><br>System.out.println(<span class="hljs-string">&quot;collection&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">classify</span><span class="hljs-params">(Set&lt;?&gt; s)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;set&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以上面代码只有Collection这个方法会被选中因为在编译时，c对象就是Collection类型。 **需要当心覆盖机制没有成功覆盖而变成了重载，因此要坚持使用@Override<br>**</p><h2 id="42-慎用可变参数"><a href="#42-慎用可变参数" class="headerlink" title="42.慎用可变参数"></a>42.慎用可变参数</h2><p>在重视性能的情况下，使用可变参数要小心。可变参数方法的每次调用都会导致进行一次数组分配和初始化。有一个改进办法，为这个方法提供5个重载方法，分别为0个、1个、2个、3个、3个以上参数版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1,<span class="hljs-keyword">int</span> a2)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1,<span class="hljs-keyword">int</span> a2,<span class="hljs-keyword">int</span> a3)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1,<span class="hljs-keyword">int</span> a2,<span class="hljs-keyword">int</span> a3, <span class="hljs-keyword">int</span>... rest)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>EnumSet类对它的静态工厂使用这种方法，最大限度的减少创建枚举集合的成本。当时这么做是必要的，因为枚举集合为位域提供在性能方面有竞争力的替代方法。</p><h2 id="43-返回零长度的数组或者集合-而不是null"><a href="#43-返回零长度的数组或者集合-而不是null" class="headerlink" title="43.返回零长度的数组或者集合,而不是null"></a>43.返回零长度的数组或者集合,而不是null</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chesse&gt; <span class="hljs-title">getCheeseList</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (cheeseInStock.isEmpty())&#123;<br><span class="hljs-comment">// 永远返回同一个对象</span><br><span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Cheese&gt;(cheeseInStock);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回类型为数组或者集合而不是null，可以避免客户端调用抛出的空指针异常。使用Collections.emptyList等方法可以返回同一个空对象节省对象创建的资源。</p><h2 id="44-为所有导出的API元素编写文档注释"><a href="#44-为所有导出的API元素编写文档注释" class="headerlink" title="44.为所有导出的API元素编写文档注释"></a>44.为所有导出的API元素编写文档注释</h2><p>如果是编写API务必遵守</p><h2 id="45-将局部变量的作用域最小化"><a href="#45-将局部变量的作用域最小化" class="headerlink" title="45.将局部变量的作用域最小化"></a>45.将局部变量的作用域最小化</h2><p>要使局部变量的作用域最小化最有力的方式是在第一次使用它的地方申明，不要提前！ 几乎每个局部变量的申明都应该包含一个初始化表达式。如果你还没有足够的信息来对这个变量进行有意义的初始化，就应该推迟这个申明。</p><p>**for循环 以及 while ** 如果在循环的终止之后就不再需要使用循环变量的内容应该更优先于使用for。</p><h2 id="46-for-each循环优先于传统的for循环"><a href="#46-for-each循环优先于传统的for循环" class="headerlink" title="46.for-each循环优先于传统的for循环"></a>46.for-each循环优先于传统的for循环</h2><p><strong>利用</strong>for-each循环不会有性能的损失，甚至用数组也一样。</p><p>三种情况不能用for-each：</p><ol><li>过滤 如果需要遍历集合，并删除特定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法。</li><li>转换 如果需要遍历列表或者数组，并取代它部分或者全部的元素值，就需要列表迭代器或者数组索引，以便设定元素的值。</li><li>平行迭代 如果需要并行的遍历多个集合，就需要显示的控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以同步前移。</li></ol><h2 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47.了解和使用类库"></a>47.了解和使用类库</h2><p>类库或者第三方库（guava等）拥有的方法应该了解并使用它们而不要亲自造轮子。</p><h2 id="48-如果需要精确的答案，请避免使用float和double"><a href="#48-如果需要精确的答案，请避免使用float和double" class="headerlink" title="48.如果需要精确的答案，请避免使用float和double"></a>48.如果需要精确的答案，请避免使用float和double</h2><p>float以及double不适合用于非常精确的计算。解决办法是使用BigDecimal、int或者long。后面两者不能进行浮点数计算。 此外使用BigDecimal有两个缺点：</p><ol><li>使用不方便</li><li>效率低 但是BigDecimal<strong>可以很方便的控制保留小数</strong>。因此，如果你需要精确答案并且是浮点数类型的请使用BigDecimal。</li></ol><h2 id="49-基本类型优先于装箱基本类型"><a href="#49-基本类型优先于装箱基本类型" class="headerlink" title="49.基本类型优先于装箱基本类型"></a>49.基本类型优先于装箱基本类型</h2><p>基本类型和装箱基本类型的三个主要区别：</p><ol><li>基本类型只有值，装箱类型具有与他们值不同的唯一性——可以具有不同对象但是值相同</li><li>装箱基本类型不仅有功能完备值还有非功能值：null<br>基本类型更加节省空间和时间<br>综上所述如果不是业务需求，更优先考虑基本类型。 使用过程中当心自动装箱、自动拆箱带来的不必要对象创建浪费。</li></ol><h2 id="50-如果其他类型更适合，则尽量避免使用字符串"><a href="#50-如果其他类型更适合，则尽量避免使用字符串" class="headerlink" title="50.如果其他类型更适合，则尽量避免使用字符串"></a>50.如果其他类型更适合，则尽量避免使用字符串</h2><ol><li>字符串不适合代替其他的值类型。应该根据语义使用相对应的值类型</li><li>字符串不适合代替枚举类型</li><li>字符串不适合代替聚集类型，通常可以编写一个私有静态类来表示，而不是使用字符串</li><li>字符串也不适合代替能力表字符串作为键可能会被共享引发不安全</li></ol><h2 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51.当心字符串连接的性能"></a>51.当心字符串连接的性能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 会被JVM自动转化为StringBuilder</span><br>String a = <span class="hljs-string">&quot;hello&quot;</span> + name + <span class="hljs-string">&quot; world&quot;</span>;<br><span class="hljs-comment">// 不会自动转化</span><br>String a = <span class="hljs-string">&quot;hello&quot;</span>;<br>a += name;<br>a += <span class="hljs-string">&quot; world&quot;</span>;<br></code></pre></td></tr></table></figure><p>有多行拼接操作记得使用StringBuilder 或者 StringBuffer</p><h2 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52.通过接口引用对象"></a>52.通过接口引用对象</h2><p>使用接口引用对象，可以利用多态性，提升代码的可维护性。 例如使用List而不是ArrayList 将来发现该链表经常被修改想要改成LinkedList只需修改定义地方就可以了。</p><h2 id="53-接口优先于反射机制"><a href="#53-接口优先于反射机制" class="headerlink" title="53.接口优先于反射机制"></a>53.接口优先于反射机制</h2><p>反射机制是Java一种很强大的机制，但是使用这种能力也是要付出代价的：</p><ol><li>丧失了编译时类型检查的好处。反射是在运行中进行的</li><li>执行反射访问所需的代码非常笨拙和冗长。虽然可以使用第三方库，但是还是略显繁琐</li><li>性能损失。反射方法调用比普通方法慢很多。</li></ol><p>因此，如果你编写的程序是必须要与编译时未知的类一起工作，如有可能就应该仅仅使用反射机制来实例化对象，而访问对象时则使用编译时已知的某个（父类）接口或者超类。 如果是与编译时已知的类一起工作的则不必要使用反射机制。</p><h2 id="54-谨慎地使用本地方法"><a href="#54-谨慎地使用本地方法" class="headerlink" title="54.谨慎地使用本地方法"></a>54.谨慎地使用本地方法</h2><p>JNI允许JAVA应用程序可以调用本地方法。所谓调用本地方法是用本地程序语言（主要是C或者C++）来编写的特殊方法。本地方法在本地语言中可以执行任意的计算任务，并且返回到Java程序设计语言。 历史上使用本地方法主要是希望提升性能。<strong>但是使用本地方法来提升性能的做法不值得提倡。</strong>现在的VM已经非常快了无需再去借助其他语音。并且本地方法还有一些严重的缺点：</p><ol><li>本地语言不是安全的</li><li>不可移植</li><li>使用本地方法的应用程序难以调试</li><li>进入和退出本地方法时需要固定的开销，浪费资源</li><li>需要“胶合代码”的本地方法编写起来单调乏味，并且难以阅读</li></ol><h2 id="55-谨慎地进行优化"><a href="#55-谨慎地进行优化" class="headerlink" title="55.谨慎地进行优化"></a>55.谨慎地进行优化</h2><p>不要因为性能而牺牲合理的结构。需要努力编写好的程序而不是快的程序。如果好的程序不够快，它的结构将使它可以得到优化。好的程序体现了信息隐蔽的原则：只要有可能，它们就会把设计决策集中在单个模块中，因此可以改变单个决策，而不会影响到系统的其他部分。</p><h2 id="56-遵守普遍接受的命名规范"><a href="#56-遵守普遍接受的命名规范" class="headerlink" title="56.遵守普遍接受的命名规范"></a>56.遵守普遍接受的命名规范</h2><p>Java规范 以及 驼峰命名</p><p>57.只针对异常的情况才使用异常<br>不要为了快速、业务去滥用异常，只有在真正异常的情况下才使用他们。</p><h2 id="58-对可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#58-对可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="58.对可恢复的情况使用受检异常，对编程错误使用运行时异常"></a>58.对可恢复的情况使用受检异常，对编程错误使用运行时异常</h2><p>Java提供了三种可抛出结构：</p><ol><li>受检的异常 —— 可恢复时使用</li><li>运行时异常 —— 编程错误抛出</li><li>错误</li></ol><h2 id="59-避免不必要地使用受检的异常"><a href="#59-避免不必要地使用受检的异常" class="headerlink" title="59.避免不必要地使用受检的异常"></a>59.避免不必要地使用受检的异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    obj.action(args);<br>&#125;<span class="hljs-keyword">catch</span>(TheCheckException e)&#123;<br>    <span class="hljs-comment">//Handle exceptional condition</span><br>    ...<br>&#125;<br><br><span class="hljs-comment">//重构为</span><br><span class="hljs-keyword">if</span> (obj.actionPermitted(args)&#123;<br>    obj.action(args);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//Handle exception condition</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以考虑使受检的异常重构。这样的重构并不总是恰当的。但是在恰当的时候可以使API用起来更加的舒服。</p><h2 id="60-优先使用标准异常"><a href="#60-优先使用标准异常" class="headerlink" title="60.优先使用标准异常"></a>60.优先使用标准异常</h2><p>最常见的可重用异常：</p><table><thead><tr><th>异常</th><th>使用场合</th></tr></thead><tbody><tr><td>IllealArgumentException</td><td>非null到数值不正确</td></tr><tr><td>IllegalStateException</td><td>对于方法的调用而言，对象状态不适合</td></tr><tr><td>NullPointerException</td><td>在禁止使用null的情况下参数值为null</td></tr><tr><td>IndexOutOfBoundsException</td><td>下表参数值越界</td></tr><tr><td>ConcurrentModificationException</td><td>在禁止并发修改的情况下，检查到对象的并发修改</td></tr><tr><td>UnsupportedOperationException</td><td>对象不支持用户请求的方法</td></tr></tbody></table><h2 id="61-抛出与抽象相对应的异常"><a href="#61-抛出与抽象相对应的异常" class="headerlink" title="61.抛出与抽象相对应的异常"></a>61.抛出与抽象相对应的异常</h2><p>想想这样一种情况：方法B抛出了一个受检的异常 ，那么方法A在内部调用方法B时，面对方法B抛出的受检异常，可以选择继续抛出向上传播这个异常， 也可以捕获这个异常进行处理。究竟是向上传播抛出，还是捕获处理呢？ 有一个指导原则是：抛出与抽象相对应的异常。 例如如果方法B抛出了NoSuchElementException这个受检异常，然而在方法A中调用方法B时，根据方法A中的逻辑，当遇到NoSuchElementException 异常时，抛出一个IndexsOutOfBoundsException异常更为合适。那么就不应该选择向上传播抛出NoSuchElementException，而是应该选择捕获NoSuchElementException，然后抛出IndexsOutOfBoundsException。 更高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法称为异常转译（exception translation）。 一种特殊的异常转译形式称为异常链（exception chaining)。 尽管异常转译让异常更加明确。但是如有可能，处理来自底层的异常的最好的做法是，在调用低层方法之前确保它们会成功执行，从而避免它们抛出异常。 有时候，可以在给低层方法传递参数之前，检查更高层方法的参数的有效性，从而避免低层方法抛出异常。 如果无法避免低层异常，次选方案是，让更高层的方法来悄悄地绕开这些异常（方法C调用方法A，那么方法C就是更高层的方法）。那么在高层方法中 调用低层方法时，面对低层方法抛出的受检异常，高层异常可以捕获异常，转化为非受检异常，或者利用某种适当的记录机制（日志）将异常记录下来。 这样更高层的方法C在调用高层方法A是，不用再受来自低层方法的异常烦扰，而异常在高层方法中也得到了处理。</p><h2 id="62-每个方法抛出的异常都要有文档"><a href="#62-每个方法抛出的异常都要有文档" class="headerlink" title="62.每个方法抛出的异常都要有文档"></a>62.每个方法抛出的异常都要有文档</h2><p>使用@thorws标签记录下一个方法可能抛出的每个未受检异常，但是不要使用throws的关键字将未受检异常也包含在方法的申明中。</p><h2 id="63-在细节消息中包含能捕获失败失败的信息"><a href="#63-在细节消息中包含能捕获失败失败的信息" class="headerlink" title="63.在细节消息中包含能捕获失败失败的信息"></a>63.在细节消息中包含能捕获失败失败的信息</h2><p>为了确保在异常的细节消息中包含足够的能捕获失败的信息，一种办法是在异常的构造器而不是字符串细节信息。然后有了这些信息，只要把他们放到消息描述中，就可以自动产生细节消息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-title">IndexOutBoundException</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lowerBound,<span class="hljs-keyword">int</span> upperBound,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-comment">//Generate a detail message that captures the failure</span><br><span class="hljs-keyword">super</span>(<span class="hljs-string">&quot;Lower bound: &quot;</span> + lowerBound +<br>  <span class="hljs-string">&quot;,Upper bound: &quot;</span> + upperBound +<br>  <span class="hljs-string">&quot;, Index:&quot;</span>);<br><span class="hljs-keyword">this</span>.lowerBound = lowerBound;<br><span class="hljs-keyword">this</span>.upperBound = upperBound;<br><span class="hljs-keyword">this</span>.index = index;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="64-努力使失败保持原子性"><a href="#64-努力使失败保持原子性" class="headerlink" title="64.努力使失败保持原子性"></a>64.努力使失败保持原子性</h2><p>失败的方法调用应该使对象保持在被调用之前的状态。具有这种属性的方法被称为具有失败原子性。 保持失败原子性的方法：</p><ol><li>最简单的方法设计不可变对象,如果对象不必变,那么失败原则性是必然.如果一个操作失败,它可能会组织创建新的对象,但永远不会使已有的对象保持在不一致的状态中,因为每个对象被创建后就处于一致的状态,以后再也不会改变.(实在没看懂)</li><li>对于可变对象上执行操作的方法,获得失败原子性最常见的方法是,在执行操作之前检查参数有效性.使得对象状态被改变之前,先抛出适当异常.类似获取失败原子性的方法,调整计算过程顺序,使得任何可能导致失败的计算部分都在对象被改变之前发生.如果对参数检查只有执行部分计算后才进行,实际上就是上面方法的拓展而已.例如,考虑TreeMap情景,它的元素按照某种特定顺序排列,添加元素时,该元素的类型必须可以利用TreeMap的排序规则和其他元素比较.如果企图添加不正确的元素,在tree以任何方式被修改之前,自然会导致ClassCastException异常.</li><li>不太常用的操作方法,编写一段恢复代码,由它来拦截操作过程中发生的失败,以及使对象回滚到操作开始之前的状态.这种方法主要用于永久性数据结构(存在磁盘中).</li><li>在对象的一份临时拷贝上执行操作,当操作完成在用临时性拷贝的结果代替对象的内容.例如.Collections.sort在执行排序之前,需要把输入列表转到一个数组中,以便降低排序内循环中访问元素的开销.虽然是出于性能考虑,但是及时排序失败,能保证输入列表保持原样.</li></ol><h2 id="65-不要忽略异常"><a href="#65-不要忽略异常" class="headerlink" title="65.不要忽略异常"></a>65.不要忽略异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//don&#x27;t do that!</span><br><span class="hljs-keyword">try</span>&#123;<br>...<br>&#125;<span class="hljs-keyword">catch</span>(SomeException e)&#123;<br><span class="hljs-comment">//empty</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p><em>以下为并发笔记，可以参考之前写的并发笔记。因此写的比较简陋。</em></p><hr><h2 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66.同步访问共享的可变数据"></a>66.同步访问共享的可变数据</h2><p>共享数据记得使用同步操作。或者使用线程安全的类。</p><h2 id="67-避免过度同步"><a href="#67-避免过度同步" class="headerlink" title="67.避免过度同步"></a>67.避免过度同步</h2><p>缩小同步的范围、减小同步的粒度都可以很大程度提升性能。</p><h2 id="68-executor优先于线程"><a href="#68-executor优先于线程" class="headerlink" title="68.executor优先于线程"></a>68.executor优先于线程</h2><p><strong>线程池的选择</strong> 如果编写的是小程序或者轻载的服务器使用Executors.newCachedThreadPool通常是个不错的选择，因为它不需要配置，并且一般情况下能够正确的完成工作。 但是在大负载的产品服务器中，最好使用Executors.newFixedThreadPool，因为它为你提供了一个包含固定线程数目的线程池，或者为了最大限度的控制它，就直接使用ThreadPoolExecutor类。</p><p><strong>定时调度</strong> 虽然timer使用起来更加容易，但是被调度的小城吃executor更加灵活。timer只用一个线程来执行任务，这在面对长期运行的任务时，会影响到定时的准确性。如果timer唯一的线程抛出未被捕获的异常，timer就会停止运行。被调度的线程池支持多个线程，并且优雅的从抛出未受检异常任务中恢复。</p><h2 id="69-并发工具优先于wait和notify"><a href="#69-并发工具优先于wait和notify" class="headerlink" title="69.并发工具优先于wait和notify"></a>69.并发工具优先于wait和notify</h2><p>使用并发工具，优先于wait和notify。 常用工具：</p><ul><li>阻塞队列</li><li>CountDownLatch</li></ul><h2 id="70-线程安全性的文档化"><a href="#70-线程安全性的文档化" class="headerlink" title="70.线程安全性的文档化"></a>70.线程安全性的文档化</h2><p>导出API，应该同时编写好线程安全的文档</p><h2 id="71-慎用延迟初始化"><a href="#71-慎用延迟初始化" class="headerlink" title="71.慎用延迟初始化"></a>71.慎用延迟初始化</h2><p>延迟初始化，最好的建议是“除非绝对必要，否则不要这么做。”</p><h2 id="72-不要依赖于线程调度器"><a href="#72-不要依赖于线程调度器" class="headerlink" title="72.不要依赖于线程调度器"></a>72.不要依赖于线程调度器</h2><p>要编写健壮的、相应良好的、可移植的多线程应用程序，最好的办法是确保可运行线程的平均数量不明显多余处理器的数量。 线程不应该一直处于忙-等的状态，即反复地检查一个共享对象，以等待某些事情发生。你可能会想用方法Thread.yield来让这个线程让出CPU。但是不要企图这可以很好的“修正”这个问题。你可能好不容易的让程序能够工作，但是这样的程序仍然是不可移植的。同一个yield调用在一个JVM实现上能提高性能，而在另一个JVM上实现可能会更差。Thread.yield没有可测试的语义，更好的解决办法是重新构造应用程序，以减少可并发的线程数量。 所以慎用<strong>Thread.yield。</strong></p><p>##73.避免使用线程组</p><p>几乎可以说永远也不要使用线程组。</p><p>##74.谨慎地实现Serializable接口</p><ol><li>实现Serializable接口而付出的最大代价是，一旦一个类被发布，就大大降低了“改变这个类的实现”的灵活性。因为序列化与反序列化版本必须要保持一致。</li><li>实现Serializable的第二个代价是，它增加了出现Bug和安全漏洞的可能性。</li><li>实现Serializable的第三个代价是，随着类发行新的版本，相关的测试负担也增加了。</li></ol><h2 id="75-考虑使用自定义的序列化形式"><a href="#75-考虑使用自定义的序列化形式" class="headerlink" title="75.考虑使用自定义的序列化形式"></a>75.考虑使用自定义的序列化形式</h2><h2 id="76-保护性地编写readObject方法"><a href="#76-保护性地编写readObject方法" class="headerlink" title="76.保护性地编写readObject方法"></a>76.保护性地编写readObject方法</h2><h2 id="77-对于实例控制，枚举类型优先于readResolve"><a href="#77-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="77.对于实例控制，枚举类型优先于readResolve"></a>77.对于实例控制，枚举类型优先于readResolve</h2><h2 id="78-考虑使用序列化代理代替序列化实例"><a href="#78-考虑使用序列化代理代替序列化实例" class="headerlink" title="78.考虑使用序列化代理代替序列化实例"></a>78.考虑使用序列化代理代替序列化实例</h2><p><a href="https://iamjohnnyzhuang.github.io/java/2017/03/29/Effective-Java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%89%AF%E6%9C%AC.html">原文转自</a></p>]]></content>
    
    
    <categories>
      
      <category>它山之石</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>道与术</title>
    <link href="/dao-and-shu/"/>
    <url>/dao-and-shu/</url>
    
    <content type="html"><![CDATA[<p>Fenng前一阵子写了一篇文章《我快30了，前途在哪里？》，里面提到</p><blockquote><p>我以前跟不少这样的人交流过，说现在在做某某岗位，感觉没前途，我说那你就业余时间学点你感觉有前&gt;途的，跳槽嘛。对方回答：没时间学别的啊。再问：那你下班之后呢？答：下班之后吃个饭收拾一下看看&gt;电视上上网，时间也就没了啊。也是，这样的人能感觉自己有前途才怪。</p><p>别问前途在哪里吧，下点功夫，把手头的事情做好，提高效率，然后就能多掌握一点技术，所谓艺多不压&gt;身，如果你做手头的事情出类拔萃，再交给你一件事情、换个岗位也驾轻就熟，游刃有余，还用担心自己&gt;的前途？”</p></blockquote><span id="more"></span><p>读到这里我想起来一个事，前几个月有次晚上10点多出来晃悠，看到路边有个平板车，摆着一盘盘用保鲜膜包好的原料，边上是一个人在很带劲的颠勺，香味着实很吸引人。走近了借着火光，我才注意到这人穿着一身顺丰快递的衣服，趁着炒菜的时候，顺便聊了几句，原来这哥们是白天送快递，晚上出来卖炒菜，一般11点半左右收摊回家，第二天早上7点准时去顺丰站点清货，开始新的一天。</p><p>于是我就说你这真是很勤劳，他说反正现在年轻，也不知道干点啥，倒不如像这样出来干点事，过得也踏实。</p><p>这话让我想起来七八年一位朋友跟我说，如果对未来很疑惑，不知道出路在哪，那倒不如手头有啥事就干啥、想到啥就干啥，总不能光在这瞎想吧。</p><p>这些年过去了再回头想想，真是这个理儿，我在做事情之前，总喜欢先去求“道”，而不注重“术”的积累。这也是一种很典型的东方思维模式，看中国传统文化，希望能够通过“求道”来一劳永逸的获得对世界整体的认识，而不愿意去在某个领域踏实地去做一些深入的研究，总是没有道，就没有正确的术，证得大道，则一通百通。</p><p>这种思维模式，本质上是一种懒人思维模式，总是希望讨巧，希望找到一个本质的、通用的、颠覆性的解决办法，借助这个方法可以完美的、一次性的解决所有问题。</p><p>在这种思维模式的指导下干事情，容易出现两种现象。</p><p>一是事情还没干，先搞了一大堆外围准备活动，事情开始之后，还容易发现之前很多准备都没用，于是就觉得之前考虑的不对，不如推倒了重来，这么一折腾，是既耽误了时间又浪费了精力。</p><p>二是有问题出现的时候，光在这思考，不去行动。思考的作用是帮助找到一种解决问题的办法，但是思考本身没法解决问题，思考的再透彻，问题还是问题。求“道”不过是寻求一张地图、一条明路，但是不迈开腿走，永远是原地踏步。</p><p>有本我很喜欢的书叫《精益创业》，这本书主要是讲述互联网创业公司如何打造产品的，我觉得这本书只用在互联网创业领域，实在是巨大的浪费。人生在世，也是打造自己这个产品。途中面临的困难也跟创业做产品类似：想找到自己的个人价值，却又不知道去何处去寻找，看着别人高歌猛进，自己却在原地踏步。想行动、想改变时发现前路阻碍重重，不知如何才能走到终点。</p><p>而《精益创业》提出的核心解决思路叫“最小化可行产品”（Minimum Viable Product，MVP），说的是做产品应该用最快的速度、最小的资源制造出一个最轻量级的可被用户试用的产品，发布出去，再根据用户的反馈来进行优化和革新，逐步学习、确认产品方向，这一过程称为“构建—测量—学习”循环。我觉得这个思路很有价值，要求用“术”来积累改善“道”，不要一开始就追求完美，因为你压根不知道怎样才是完美，你必须尽可能多的通过尝试获取反馈，通过这些反馈来学习和改进，才能逐步的知道正确方向和解决办法。</p><p>用这个理论来指导自己的话，就先把自己当作一个粗糙的“最小化可行产品”吧，去争取反馈和匹配，然后改进迭代，一步步的去追求最终的“道”。</p><p>莫避春阴上马迟，春来未有不阴时。</p>]]></content>
    
    
    <categories>
      
      <category>reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UINPUT 事件注入</title>
    <link href="/linux-uinput-event-injection/"/>
    <url>/linux-uinput-event-injection/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>uinput</strong> 是 <strong>Linux Kernel</strong> 的一个模块，是向用户层提供输入接口的子系统。我们可以通过 <strong>uinput</strong> 在 <em>/dev/input/</em> 中创建一个虚拟字符设备并注入事件。本文主要讲解如何使用 <strong>uinput</strong> 实现键盘事件的注入。</p><h2 id="创建设备"><a href="#创建设备" class="headerlink" title="创建设备"></a>创建设备</h2><p>1.<strong>uinput</strong> 通常位于 <em>/dev/uinput</em> 或者 <em>/dev/input/uinput</em> ，终端执行 <code>adb shell ls -al /dev/uinput</code> ，可以看到 </p><blockquote><p>crw-rw—- system  system  10, 223 1970-01-01 08:00 uinput</p></blockquote><p>该文件为系统权限的字符设备，作为一个普通应用程序没有办法访问，所以在访问 <strong>uinput</strong> 之前，先要提权。终端执行 <code>adb shell su &amp;&amp; chmod 666 /dev/uinput</code> 更改字符设备的访问权限，再次执行 <code>adb shell ls -al /dev/uinput</code> 可以看到</p><blockquote><p>crw-rw-rw- system  system  10, 223 1970-01-01 08:00 uinput</p></blockquote><span id="more"></span><p>2.提权后便可以使用 <strong>uinput</strong> 了，以 <strong>只读</strong> 和 <strong>非阻塞</strong> 模式打开它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/input.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/uinput.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>...<br><br><span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/uinput&quot;</span>, O_WRONLY | O_NONBLOCK);<br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/input/uinput&quot;</span>, O_WRONLY | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.打开后需要配置 <strong>uinput</strong> 哪些类型的输入事件会用到，这些事件定义在 <strong>linux/input.h</strong> 文件中</p><table><thead><tr><th align="left">宏</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">define EV_SYN 0x00</td><td align="left">同步事件</td></tr><tr><td align="left">define EV_KEY 0x01</td><td align="left">键盘按下和释放事件</td></tr><tr><td align="left">define EV_REL 0x02</td><td align="left">相对坐标事件</td></tr><tr><td align="left">define EV_ABS 0x03</td><td align="left">绝对坐标事件</td></tr></tbody></table><p>对于键盘事件，进行如下配置（允许发送 key 和 syn 两种类型的事件）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_EVBIT, EV_KEY);<br>ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_EVBIT, EV_SYN);<br></code></pre></td></tr></table></figure><p>配置哪些按键可以输入（上下左右方向键）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 允许输入方向键上、下、左、右</span><br>ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_KEYBIT, KEY_UP);<br>ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_KEYBIT, KEY_DOWN);<br>ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_KEYBIT, KEY_LEFT);<br>ret = <span class="hljs-built_in">ioctl</span>(fd, UI_SET_KEYBIT, KEY_RIGHT);<br></code></pre></td></tr></table></figure><p>4.上面已经配置了一些基本特性，接下来介绍结构体 <code>uinput_user_dev </code>，它定义在 <strong>linux/uinput.h</strong> 头文件中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UINPUT_MAX_NAME_SIZE 80</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uinput_user_dev</span> &#123;</span><br>    <span class="hljs-keyword">char</span> name[UINPUT_MAX_NAME_SIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">input_id</span> <span class="hljs-title">id</span>;</span><br>        <span class="hljs-keyword">int</span> ff_effects_max;<br>        <span class="hljs-keyword">int</span> absmax[ABS_MAX + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> absmin[ABS_MAX + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> absfuzz[ABS_MAX + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> absflat[ABS_MAX + <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中有几个比较重要的字段:</p><ul><li>name 要创建的虚拟设备名称</li><li>id 内部结构体，描述设备的 usb 类型，厂商，产品，版本</li><li>absmin and absmax 整型数组，描述鼠标或触屏事件的阈值</li></ul><p>将虚拟设备的信息写入 <code>fd</code> ，虚拟设备命名为 <strong>uinput-sample</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uinput_user_dev</span> <span class="hljs-title">dev</span>;</span><br><br><span class="hljs-built_in">memset</span>(&amp;dev, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dev));<br><span class="hljs-built_in">snprintf</span>(dev.name, UINPUT_MAX_NAME_SIZE, <span class="hljs-string">&quot;uinput-sample&quot;</span>); <span class="hljs-comment">// 虚拟设备名称</span><br>dev.id.bustype = BUS_USB; <span class="hljs-comment">// udb 类型</span><br>dev.id.vendor = <span class="hljs-number">0x1</span>;<br>dev.id.product = <span class="hljs-number">0x1</span>;<br>dev.id.version = <span class="hljs-number">1</span>;<br><br><span class="hljs-built_in">write</span>(fd, &amp;dev, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dev)); <span class="hljs-comment">// 写入</span><br></code></pre></td></tr></table></figure><p>5.最后，创建配置好的虚拟设备</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ret = <span class="hljs-built_in">ioctl</span>(fd, UI_DEV_CREATE)<br></code></pre></td></tr></table></figure><p>终端执行 <code>adb shell getevent</code> 你会看到虚拟设备 <strong>uinput-sample</strong> 已经创建成功:  <strong>/dev/input/event1</strong></p><blockquote><p>add device 1: /dev/input/event1<br>  name:     “uinput-sample” </p><p>add device 2: /dev/input/event6<br>  name:     “eventserver-Joystick”</p><p>add device 3: /dev/input/event5<br>  name:     “eventserver-Mouse”</p><p>add device 4: /dev/input/event0<br>  name:     “aml_keypad”</p></blockquote><hr><h2 id="事件注入"><a href="#事件注入" class="headerlink" title="事件注入"></a>事件注入</h2><p>创建好了设备，开始注入事件，这里还需介绍一个结构体 <code>input_event</code> ，它定义在 <strong>linux/input.h</strong> 中，其中几个重要的字段：</p><ul><li><code>type</code>:  event 的类型 (EV_KEY, EV_ABS, EV_REL, …),</li><li><code>code</code>:  如果 type 是 EV_KEY 类型，则是 key code；若type是 EV_ABS 或者 EV_REL 类型，则是 x、y轴</li><li><code>value</code>:   如果 type 是 EV_KEY 类型，则 1 (press) 0 (release)；若type是 EV_ABS 或者 EV_REL 类型，则为 x，y 坐标</li></ul><p>声明写入事件的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">writeEvent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,<span class="hljs-keyword">int</span> type,<span class="hljs-keyword">int</span> code,<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">input_event</span> <span class="hljs-title">ev</span>;</span><br>    <span class="hljs-built_in">memset</span>(&amp;ev, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ev));<br>    ev.type = type;<br>    ev.code = code;<br>    ev.value = value;<br>    <span class="hljs-keyword">ssize_t</span> bytes;<span class="hljs-comment">// 写入文档的字节数（成功）；-1（出错）</span><br>    bytes = <span class="hljs-built_in">write</span>(fd, &amp;ev, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct input_event));<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) bytes;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入一个键盘方向键事件  <strong>KEY_UP</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">writeEvent</span>(fd,EV_KEY,KEY_UP,<span class="hljs-number">1</span>) <span class="hljs-comment">// KEY_UP press</span><br><span class="hljs-built_in">writeEvent</span>(fd,EV_KEY,KEY_UP,<span class="hljs-number">0</span>) <span class="hljs-comment">// KEY_UP release</span><br></code></pre></td></tr></table></figure><p>将写入的事件同步到虚拟设备</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">writeEvent</span>(fd,EV_SYN,SYN_REPORT,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="销毁设备"><a href="#销毁设备" class="headerlink" title="销毁设备"></a>销毁设备</h2><p>注入了事件之后需要销毁虚拟设备，调用下面的函数，再次执行 <code>adb shell getevent</code> 你会看到设备已被移除</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">destroy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">ioctl</span>(fd, UI_DEV_DESTROY);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现 uinput 事件注入步骤就是：<strong>创建虚拟设备-&gt;注入事件-&gt;销毁设备</strong>，上文只是介绍了键盘事件的注入，其实也可以注入鼠标事件，触摸事件等，接下来的文章会介绍到，请大家多多关注。</p><p><strong>参考：</strong><br><a href="https://source.android.com/devices/input/input-device-configuration-files.html">https://source.android.com/devices/input/input-device-configuration-files.html</a><br><a href="http://thiemonge.org/getting-started-with-uinput">http://thiemonge.org/getting-started-with-uinput</a><br><a href="https://www.kernel.org/doc/Documentation/input/multi-touch-protocol.txt">https://www.kernel.org/doc/Documentation/input/multi-touch-protocol.txt</a><br><a href="http://bitmath.org/code/mtdev/">http://bitmath.org/code/mtdev/</a><br><a href="http://stackoverflow.com/questions/4386449/send-touch-event-from-adb-to-a-device">http://stackoverflow.com/questions/4386449/send-touch-event-from-adb-to-a-device</a><br><a href="http://blog.csdn.net/droidphone/article/details/8434768">http://blog.csdn.net/droidphone/article/details/8434768</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uinput</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 异步处理队列消息分析</title>
    <link href="/android-queue-message/"/>
    <url>/android-queue-message/</url>
    
    <content type="html"><![CDATA[<p>试想我们有一连串的异步任务需要交给工作线程来做，这种 <strong>“生产者消费者模式”</strong> 可以通过传统 Java API 的 <code>BlockingQueue</code> 来实现，也可以用 Android API 提供的 <code>Handler</code> 和 <code>Looper</code> 来实现，我来简单分析下~</p><span id="more"></span><hr><h1 id="Blocking-Queue"><a href="#Blocking-Queue" class="headerlink" title="Blocking Queue"></a>Blocking Queue</h1><p><code>BlockingQueue</code> 是线程安全的阻塞队列，开启多个线程可以同时竞争 <code>BlockingQueue</code> 的资源而不用担心并发导致的死锁问题，以 <strong>Volley</strong> 分发网络请求的的源代码为例，讲解一下 <code>BlockingQueue</code> 的使用</p><ol><li><p>声明一个处理异步任务的线程 <code>NetworkDispatcher</code>，在其构造器中，传递一个 <code>BlockingQueue&lt;Request&lt;?&gt;&gt;</code> 参数，</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkDispatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NetworkDispatcher</span><span class="hljs-params">(BlockingQueue&lt;Request&lt;?&gt;&gt; queue,Network network, Cache cache,ResponseDelivery delivery)</span> </span>&#123;<br>        mQueue = queue;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>run()</code> 方法中定义一个死循环不断的从队列中拿数据并进行处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>        request = (Request)<span class="hljs-keyword">this</span>.mQueue.take();<br>        <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Take a request from the queue.</span><br>                request = mQueue.take();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">if</span> (mQuit) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        NetworkResponse resonse = <span class="hljs-keyword">this</span>.mNetwork.performRequest(request);<br>        ...<br>    &#125;<br>&#125;        <br></code></pre></td></tr></table></figure></li><li><p>执行完所有的异步任务需要停止线程，释放资源，这里需要用到线程的中断操作，此时 <code>mQueue</code> 会抛出 <code>InterruptedException</code> 异常，从而使线程结束运行</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quit</span><span class="hljs-params">()</span> </span>&#123;<br>    mQuit = <span class="hljs-keyword">true</span>;<br>    interrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义 <strong>length</strong> 个 <code>NetworkDispatcher</code> 实例，将一个阻塞队列 <code>mNetworkQueue</code>分别传递给他们的构造函数，让工作线程竞争队列资源并执行接下来的请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Create network dispatchers (and corresponding threads) up to the pool size.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mDispatchers.length; i++) &#123;<br>    NetworkDispatcher networkDispatcher = <span class="hljs-keyword">new</span> NetworkDispatcher(mNetworkQueue, mNetwork,<br>            mCache, mDelivery);<br>    mDispatchers[i] = networkDispatcher;<br>    networkDispatcher.start();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Volley</strong> 的网络请求的分发基本上就是这样实现的，用多个线程处理同一个队列的消息，优先考虑用 <code>BlockingQueue</code>  来实现，这种方式是 <strong>1 对 N</strong> 的处理方式</p><hr><h1 id="Handler-amp-Looper"><a href="#Handler-amp-Looper" class="headerlink" title="Handler &amp; Looper"></a>Handler &amp; Looper</h1><p>有一种应用场景：我们要将用户的按键操作用日志形式记录下来，考虑的文件的写操作，需要用异步完成，而记录按键操作则是将一连串的 <strong>KeyEvent</strong>  交给异步线程来做，用上面讲到的 <code>BlockingQueue</code> 是可以实现的，但在这里我介绍一下 <code>Handler &amp; Looper</code> 是如何帮助我们实现的。</p><p>我们知道 <code>Handler</code> 和 <code>Looper</code> 是 <strong>Android API</strong> 提供的类，创建一个支持 <code>Handler</code> 的异步线程代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> Handler mHandler;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">()</span> </span>&#123;<br>        Looper.prepare();<br>        Process.setThreadPriority(mPriority);<br>        Looper.loop();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Handler <span class="hljs-title">getHandler</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (!isAlive()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mHandler == <span class="hljs-keyword">null</span>)&#123;<br>            mHandler = <span class="hljs-keyword">new</span> Handler(Looper.myLooper());      <br>        &#125;<br>        <span class="hljs-keyword">return</span> mHandler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>想要向 <code>MyThread</code> 发送消息，只需要调用 <code>getHandler().sendMessage()</code> 就可以，处理完所有消息后仍需要终止线程，释放资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quit</span><span class="hljs-params">()</span> </span>&#123;<br>    Looper looper = getLooper();<br>    <span class="hljs-keyword">if</span> (looper != <span class="hljs-keyword">null</span>) &#123;<br>        looper.quit();<br><br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><p>实际上 <strong>Android API</strong> 已经封装了类似的线程 <code>android.os.HandlerThread</code>，它可以帮助我们很好地异步处理队列消息。我们可以将 <strong>Handler</strong> 交给其它 N 个线程来发送消息，最后由有 <code>HandlerThread</code> 消化处理，这是一种 <strong>N 对 1</strong> 的方式。</p><p><strong>根据不同的应用场景来选择以上哪种实现方式是我们应该关注的。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深入理解 Android Package Manager 与 Package Installer</title>
    <link href="/insight-android-pm-pi/"/>
    <url>/insight-android-pm-pi/</url>
    
    <content type="html"><![CDATA[<p>我们总是在安装、卸载apk，然而对于以下几个问题，你知道如何解答吗?</p><ol><li>Package Manager 和 Package Installer 都是什么？</li><li>在 Android 中 APK 文件存储在哪里？</li><li>你知道 APK 安装的具体步骤吗？</li><li>Package Manager 是如何存储数据的？</li><li>在哪里可以找到 Package Manager 和 PackageInstaller 的源码？</li></ol><span id="more"></span><h2 id="什么是-Package-Manager、Package-Installer"><a href="#什么是-Package-Manager、Package-Installer" class="headerlink" title="什么是 Package Manager、Package Installer?"></a>什么是 Package Manager、Package Installer?</h2><p><code>PackageInstaller</code> 是安装普通应用的默认系统应用，它提供了一个接口来管理应用包，并调用 <code>InstallAppProgress</code> Activity 来接收用户指令，<code>InstallAppProgress</code> 会访问  <strong>Package Manager Service</strong> 查看包安装信息，可以在 <code>&lt;Android Source&gt;/packages/apps/PackageInstaller</code> 找到源码</p><p>Package Manager 实际上是管理应用安装、卸载的一个 API，当我们安装 APK 文件时，Package Manager 会解析 APK 文件来显示一些应用信息。当按下 OK 键时，Package Manager 调用方法 <code>installPackage（）</code>  并传递四个参数 : </p><ul><li>uri</li><li>installFlags</li><li>observer</li><li>installPackageName</li></ul><p>此时，Package Manager 会开启一个名为 <strong>package</strong> 的服务，其它任务都由这个服务来完成。在  PackageInstaller 的源码中，可以查看 <strong>PackageInstallerActivity.java</strong> 和 <strong>InstallAppProgress.java</strong> 这两个类，系统在启动时，会将 Package Manager Service 运行在系统进程中，而安装行为则由原生进程（native process）执行。</p><hr><h2 id="Where-are-APK-Files-Stored-in-Android"><a href="#Where-are-APK-Files-Stored-in-Android" class="headerlink" title="Where are APK Files Stored in Android?"></a>Where are APK Files Stored in Android?</h2><ul><li>a. 预装应用 （相机、日历、浏览器等）APK 存储在 <code>/system/app/</code></li><li>b. 用户应用（微博、微信等）APK 存储在 <code>/data/app/</code></li><li>c. Package Manager 会为每个应用创建一个目录 <code>/data/data/&lt;package-name&gt;/</code> 来存储数据库数据，shared preference 数据，本地库（native lib）和 缓存数据。</li></ul><p>You might see an apk file and *.odex file for the same APK. The ODEX file is totally a different discussion and purpose.</p><hr><h2 id="APK-安装内幕"><a href="#APK-安装内幕" class="headerlink" title="APK 安装内幕"></a>APK 安装内幕</h2><p>以下介绍了 Package Manager Service 具体执行步骤</p><ul><li>等待</li><li>将一个 package 添加到安装队列</li><li>确定应用安装的合适位置</li><li>确定是安装还是更新</li><li>将 apk 拷贝到指定路径下</li><li>给 app 分配 UID</li><li>请求安装进程</li><li>创建应用程序的目录，设置权限</li><li>解压dex文件到缓存路径</li><li>列出包的具体信息并映射到 <code>/system/data/packages.xml</code> 中，// To reflect and packages.list / system / data / packages.xml the latest status </li><li>广播安装进度 <code>Intent.ACTION_PACKAGE_ADDED</code> 或 <code>Intent.ACTION_PACKAGE_REPLACED</code></li></ul><p><img src="/imgs/post-151221-1.png" alt="安装步骤"></p><hr><h2 id="Package-Manager-如何存储数据"><a href="#Package-Manager-如何存储数据" class="headerlink" title="Package Manager 如何存储数据?"></a>Package Manager 如何存储数据?</h2><p>Package Manager 将应用信息存储在 <code>/data/system</code> 文件夹下的三个文件中，以 Android 4.0 Ice Cream Sandwich 模拟器镜像为例：</p><h3 id="1-packages-xml"><a href="#1-packages-xml" class="headerlink" title="1. packages.xml"></a>1. packages.xml</h3><p>该文件列出了所有包的权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packages</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">last-platform-version</span> <span class="hljs-attr">external</span>=<span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">internal</span>=<span class="hljs-string">&quot;15&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">permission-trees</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">permissions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_WIFI_MULTICAST_STATE&quot;</span> <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;android&quot;</span> <span class="hljs-attr">protection</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android.permission.CLEAR_APP_USER_DATA&quot;</span> <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;android&quot;</span> <span class="hljs-attr">protection</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">permissions</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">codepath</span>=<span class="hljs-string">&quot;/system/app/Contacts.apk&quot;</span> <span class="hljs-attr">flags</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">ft</span>=<span class="hljs-string">&quot;136567b3990&quot;</span> <span class="hljs-attr">it</span>=<span class="hljs-string">&quot;136567b3990&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.android.contacts&quot;</span> <span class="hljs-attr">nativelibrarypath</span>=<span class="hljs-string">&quot;/data/data/com.android.contacts/lib&quot;</span> <span class="hljs-attr">shareduserid</span>=<span class="hljs-string">&quot;10001&quot;</span> <span class="hljs-attr">ut</span>=<span class="hljs-string">&quot;136567b3990&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;15&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sigs</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cert</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">cert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sigs</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><br>... <br><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">codepath</span>=<span class="hljs-string">&quot;/data/app/com.project.t2i-2.apk&quot;</span> <span class="hljs-attr">flags</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ft</span>=<span class="hljs-string">&quot;13a837c2068&quot;</span> <span class="hljs-attr">it</span>=<span class="hljs-string">&quot;13a83704ea3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.project.t2i&quot;</span> <span class="hljs-attr">nativelibrarypath</span>=<span class="hljs-string">&quot;/data/data/com.project.t2i/lib&quot;</span> <span class="hljs-attr">userid</span>=<span class="hljs-string">&quot;10040&quot;</span> <span class="hljs-attr">ut</span>=<span class="hljs-string">&quot;13a837c2ecb&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sigs</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cert</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;308201e530820...c5c7a&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">cert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sigs</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">perms</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">perms</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><br>...<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">permission-trees</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">last-platform-version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">packages</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个 XML 文件存储了两类数据:</p><h4 id="a-permission"><a href="#a-permission" class="headerlink" title="a.permission"></a>a.permission</h4><p>permission 存储在 <code>&lt;permissions&gt;</code> 标签下，每个 <strong>permission</strong> 有三个属性：</p><ul><li><strong>name</strong>  我们在 AndroidManifest.xml 中用到的权限名</li><li><strong>package</strong>  指明权限所属，大部分情况下都是默认值 <strong>android</strong></li><li><strong>protection</strong>  指定权限安全等级</li></ul><h4 id="b-packages-application"><a href="#b-packages-application" class="headerlink" title="b.packages(application)"></a>b.packages(application)</h4><p>packages 标签下有10个属性和一些子属性</p><table><thead><tr><th align="left">序</th><th align="left">属性名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">name</td><td align="left">package name</td></tr><tr><td align="left">2</td><td align="left">codePath</td><td align="left">APK 文件的安装位置 (<code>/system/app/</code> 或 <code>/data/app/</code>)</td></tr><tr><td align="left">3</td><td align="left">nativeLibraryPath</td><td align="left">本地库 (*.so 文件)路径， 默认路径是 <code>/data/data/&lt;package name&gt;/lib/</code></td></tr><tr><td align="left">4</td><td align="left">flag</td><td align="left">ApplicationInfo Flags <a href="http://developer.android.com/reference/android/content/pm/ApplicationInfo.html">参考更多</a></td></tr><tr><td align="left">5</td><td align="left">ft</td><td align="left">hex 格式的时间戳</td></tr><tr><td align="left">6</td><td align="left">lt</td><td align="left">首次安装时间戳，hex 格式</td></tr><tr><td align="left">7</td><td align="left">ut</td><td align="left">最后更新时间戳，hex 格式</td></tr><tr><td align="left">8</td><td align="left">version</td><td align="left">AndroidManifest.xml文件中的 Version Code <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode">参考更多</a></td></tr><tr><td align="left">9</td><td align="left">sharedUserId</td><td align="left">它会与其他有相同 sharedUserID 的程序共享数据，这个 id 与我们在 AndroidManifest 中定义 sharedUserID 的相同 <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#uid">参考更多</a></td></tr><tr><td align="left">10</td><td align="left">userId</td><td align="left">Linux用户ID</td></tr></tbody></table><p><strong>子属性</strong></p><ul><li> <strong>sigs</strong>  签名信息, count 属性代表证书标签数量</li><li> <strong>cert</strong>  全球认证证书</li><li> <strong>perms</strong>  发行许可</li></ul><h3 id="2-packages-list"><a href="#2-packages-list" class="headerlink" title="2. packages.list"></a>2. packages.list</h3><p>简单的文本文件，列出了 <strong>package name</strong>、<strong>user id</strong>、<strong>flag</strong> 和 <strong>data</strong> 路径（我并没有找到比较完美的描述，但我猜想 <strong>packages.list</strong> 只保留一些重要的信息，是为了用来快速检索）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">com.android.launcher 10013 0 /data/data/com.android.launcher<br>com.android.quicksearchbox 10033 0 /data/data/com.android.quicksearchbox<br>com.android.contacts 10001 0 /data/data/com.android.contacts<br>com.android.inputmethod.latin 10006 0 /data/data/com.android.inputmethod.latin<br></code></pre></td></tr></table></figure><h3 id="3-packages-stoped-xml"><a href="#3-packages-stoped-xml" class="headerlink" title="3. packages-stoped.xml"></a>3. packages-stoped.xml</h3><p>这个文件列出了哪些 package 是 stopped 状态，stopped 状态的应用程序不会接收到任何广播  <a href="http://droidyue.com/blog/2014/01/04/package-stop-state-since-android-3-dot-1/">参考更多</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">stopped-packages</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pkg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.android.widgetpreview&quot;</span> <span class="hljs-attr">nl</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pkg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pkg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.android.livecubes&quot;</span> <span class="hljs-attr">nl</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pkg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pkg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.android.gesture.builder&quot;</span> <span class="hljs-attr">nl</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pkg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pkg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.android.softkeyboard&quot;</span> <span class="hljs-attr">nl</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pkg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">stopped-packages</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="Where-I-Can-Find-the-Source-Code-of-Package-Manager-and-Package-Installer"><a href="#Where-I-Can-Find-the-Source-Code-of-Package-Manager-and-Package-Installer" class="headerlink" title="Where I Can Find the Source Code of Package Manager and Package Installer?"></a>Where I Can Find the Source Code of Package Manager and Package Installer?</h2><p><strong>Package Manager</strong></p><ul><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/Settings.java">frameworks/base/services/java/com/android/server/pm/Settings.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PackageManagerService.java">frameworks/base/services/java/com/android/server/pm/PackageManagerService.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/pm/IPackageManager.aidl">frameworks/base/services/java/com/android/server/pm/IPackageManager.aidl</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PackageSignatures.java">frameworks/base/services/java/com/android/server/pm/PackageSignatures.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PreferredActivity.java">frameworks/base/services/java/com/android/server/pm/PreferredActivity.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/PreferredComponent.java">frameworks/services/java/com/android/server/PreferredComponent.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/IntentFilter.java">frameworks/core/java/android/content/IntentFilter.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/pm/PackageParser.java">frameworks/base/core/java/android/content/pm/PackageParser.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/Installer.java">frameworks/base/services/java/com/android/server/pm/Installer.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/com/android/internal/app/IMediaContainerService.aidl">frameworks/base/core/java/com/android/internal/app/IMediaContainerService.aidl</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java">frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java</a></li></ul><p><strong>Package Installer</strong></p><ul><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/PackageInstallerActivity.java">packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</a></li><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/PackageUtil.java">packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageUtil.java</a></li><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/InstallAppProgress.java">packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallAppProgress.java</a></li></ul><p><a href="https://dzone.com/articles/depth-android-package-manager">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>它山之石</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Package Manager</tag>
      
      <tag>Package Installer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio 编译时自动生成源代码</title>
    <link href="/android-apt-auto-gen-code/"/>
    <url>/android-apt-auto-gen-code/</url>
    
    <content type="html"><![CDATA[<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><ul><li><code>@Retention(RetentionPolicy.SOURCE)</code></li><li><code>@Retention(RetentionPolicy.RUNTIME)</code></li><li><code>@Retention(RetentionPolicy.CLASS)</code></li></ul><p><a href="http://docs.oracle.com/javase/tutorial/java/annotations/index.html">Annotation Document</a></p><h1 id="APT—annotation-processing-tool"><a href="#APT—annotation-processing-tool" class="headerlink" title="APT—annotation processing tool"></a>APT—annotation processing tool</h1><p><strong>apt</strong>（Annotation processing  tool） 是在编译时，扫描和处理注解的一个构建工具，<strong>Java 5</strong> 时就已经有了，直到 <strong>Java 6</strong> 才提供 API 给开发者，<strong>apt</strong> 的道路实在坎坷，到了 <strong>Java 7</strong> 又被废弃。现在，该功能由 <strong>javac</strong> 来实现，我们可以在 <strong>javac</strong> 编译时源代码额外生成 java 源代码（也可以是其它类型的文件），那么如何处理注解，需要我们了解 <code>AbstractProcessor</code> 这个类。</p><h1 id="AbstractProcessor"><a href="#AbstractProcessor" class="headerlink" title="AbstractProcessor"></a>AbstractProcessor</h1><p><strong>AbstractProcessor</strong> 是 <strong>javac</strong>  扫描和处理注解的关键类，在所有的 <code>Processor</code>API 中都可以看到它们都继承自 <code>AbstractProcessor</code> ，像下面的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.septenary.processor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ProcessingEnvironment env)</span></span>&#123; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env)</span> </span>&#123; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getSupportedAnnotationTypes</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SourceVersion <span class="hljs-title">getSupportedSourceVersion</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><ul><li><code>init(ProcessingEnvironment env)</code> ：<strong>javac</strong> 会在 <strong>Processor</strong> 创建时调用并执行的初始化操作，该方法会传入 一个参数 <code>ProcessingEnvironment env</code> ，通过 env 可以访问 <code>Elements</code>、<code>Types</code>、<code>Filer</code>等工具类。</li><li><code>process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</code> ：它是每个 <strong>processor</strong> 的主方法，可以在这个方法中扫描和处理注解，并生成新的 java 源代码，通过参数 <code>RoundEnvironment env</code> 可以找到我们想要的某一个被注解的元素</li><li><code>getSupportedAnnotationTypes()</code> 指定哪些注解需要注册</li><li><code>getSupportedSourceVersion()</code> 指定支持的 java 版本，通常返回 <code>SourceVersion.latestSupported()</code>，如果只想支持到 <strong>Java 6</strong> 可以返回 <code>SourceVersion.RELEASE_6</code></li></ul><p>在 <strong>Java 7</strong> 中可以不用重写 <code>getSupportedAnnotationTypes（）</code> 和 <code>getSupportedSourceVersion()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SupportedSourceVersion(SourceVersion.latestSupported())</span><br><span class="hljs-meta">@SupportedAnnotationTypes(&#123;</span><br><span class="hljs-meta">   // Set of full qullified annotation type names</span><br><span class="hljs-meta"> &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ProcessingEnvironment env)</span></span>&#123; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env)</span> </span>&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Register-Your-Processor"><a href="#Register-Your-Processor" class="headerlink" title="Register Your Processor"></a>Register Your Processor</h1><p>如何让 <strong>javac</strong> 执行时调用我自定义的 <strong>MyProcessor</strong> 呢，需要注册自定义的 <strong>MyProcessor</strong> 来完成</p><p>1.<strong>MyProcessor</strong> 需要打包到 <strong>jar</strong> 包中，就像其它普通的 <strong>.jar</strong> 文件一样，这里命名为 <strong>MyProcessor.jar</strong><br>2.但 <strong>MyProcessor.jar</strong> 中多了一个特殊的文件：<strong>javax.annotation.processing.Processor</strong> 它存储在 <strong>jar/META-INF/services/</strong> 文件夹下，<strong>MyProcessor.jar</strong> 的结构是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">MyProcessor.jar<br>    - cn<br>        - septenary<br>            - processor<br>                - MyProcessor.class<br>    - META-INF<br>        - services<br>            - javax.annotation.processing.Processor<br></code></pre></td></tr></table></figure><p><strong>javax.annotation.processing.Processor</strong> 文件列出了要注册的 <strong>Processor</strong>，每个 <strong>Processor</strong> 逐行列出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">cn.septenary.processor.MyProcessor<br>com.foo.OtherProcessor<br>net.foo.SpecialProcessor<br></code></pre></td></tr></table></figure><p>构建项目时 <strong>javac</strong> 自动检测并读取 <strong>javax.annotation.processing.Processor</strong> 来注册列出来的 <strong>Processor</strong></p><h1 id="Android-Studio-中实现编译时动态生成代码"><a href="#Android-Studio-中实现编译时动态生成代码" class="headerlink" title="Android Studio 中实现编译时动态生成代码"></a>Android Studio 中实现编译时动态生成代码</h1><h2 id="1-新建工程，分别创建三个模板"><a href="#1-新建工程，分别创建三个模板" class="headerlink" title="1.新建工程，分别创建三个模板"></a>1.新建工程，分别创建三个模板</h2><ul><li>app module (Android module)</li><li>api module (Java module)</li><li>compiler module (Java module)</li></ul><h2 id="2-根目录-build-gradle"><a href="#2-根目录-build-gradle" class="headerlink" title="2.根目录 build.gradle"></a>2.根目录 build.gradle</h2><p>需要声明依赖插件 <strong>android-apt</strong>，它是将 Android Studio 与 annotation processors 结合的一个插件，构建工程时，它会辅助 javac 执行 processor，  <a href="https://bitbucket.org/hvisser/android-apt#header-language">More</a> </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    ...<br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        ...<br>        <span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.neenbedankt.gradle.plugins:android-apt:1.8&#x27;</span><br>    &#125;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="3-app-module"><a href="#3-app-module" class="headerlink" title="3.app module"></a>3.app module</h2><p>Android 模板，使用 <strong>android-apt</strong>插件，依赖 <strong>api module</strong> 和 <strong>compiler module</strong></p><p>1.使用自定义注解 <code>@MyAnnotation</code> 的类 <code>Bean</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bean</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String address;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Bean</span><span class="hljs-params">(String name, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> StringUtil.createString(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>app module</strong> 中并没有 <code>StringUtil</code> 这个类，不考虑其他 module ，编写 <code>Bean</code> 中代码时，IDE 会警告找不到 <code>StringUtil</code>这个类，它是在编译时由 <strong>javac</strong> 和 <strong>compiler.jar</strong> 自动生成，继续往下看</p><p> 2.build.gradle :<br> 3.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;com.neenbedankt.android-apt&#x27;</span><br>...<br>...<br><span class="hljs-keyword">dependencies</span> &#123;<br>    ...<br>    apt <span class="hljs-keyword">project</span>(<span class="hljs-string">&#x27;:compiler&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-lib-module"><a href="#4-lib-module" class="headerlink" title="4.lib module"></a>4.lib module</h2><p>普通的 java 模板，自定义注解 <code>MyAnnotation</code></p><p><strong>build.gradle :</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br>...<br></code></pre></td></tr></table></figure><p><strong>MyAnnotation:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.CLASS)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-compiler-module"><a href="#5-compiler-module" class="headerlink" title="5.compiler module"></a>5.compiler module</h2><p>普通的 java 模板</p><p>1.自定义注解处理器: <code>MyProcessor</code><br>2.引入了三个依赖：</p><ul><li><strong>lib</strong> ，使用自定义的注解 <code>MyAnnotation</code>，</li><li><strong>auto-service</strong>， 用来自动生成 <strong>javax.annotation.processing.Processor</strong> 文件， <a href="https://github.com/google/auto/tree/master/service">More</a></li><li><strong>javapoet</strong> ，自动生成代码的工具类库， <a href="https://github.com/square/javapoet">More</a></li></ul><p><strong>MyProcessor:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注解 @AutoService 自动生成 javax.annotation.processing.Processor 文件</span><br><span class="hljs-meta">@AutoService(Processor.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ANNOTATION = <span class="hljs-string">&quot;@&quot;</span> + MyAnnotation.class.getSimpleName();<br>    <span class="hljs-keyword">private</span> Messager messager;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ProcessingEnvironment processingEnv)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.init(processingEnv);<br>        messager = processingEnv.getMessager();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getSupportedAnnotationTypes</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singleton(MyAnnotation.class.getCanonicalName());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SourceVersion <span class="hljs-title">getSupportedSourceVersion</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SourceVersion.latestSupported();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;<br>        List&lt;AnnotatedClass&gt; annotatedClasses = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element annotatedElement : roundEnv.getElementsAnnotatedWith(MyAnnotation.class)) &#123;<br>            <span class="hljs-keyword">if</span> (annotatedElement <span class="hljs-keyword">instanceof</span> TypeElement) &#123;<br>                <span class="hljs-comment">// Our annotation is defined with @Target(value=TYPE)</span><br>                TypeElement element = (TypeElement) annotatedElement;<br>                <span class="hljs-keyword">if</span> (!isValidClass(element)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    AnnotatedClass annotatedClass = buildAnnotatedClass(element);<br>                    annotatedClasses.add(annotatedClass);<br>                &#125; <span class="hljs-keyword">catch</span> (NoPackageNameException | IOException e) &#123;<br>                    String message = String.format(<span class="hljs-string">&quot;Couldn&#x27;t process class %s: %s&quot;</span>, element, e.getMessage());<br>                    messager.printMessage(ERROR, message, annotatedElement);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            generate(annotatedClasses);<br>            <span class="hljs-comment">// genHelloWorld();</span><br>        &#125; <span class="hljs-keyword">catch</span> (NoPackageNameException | IOException e) &#123;<br>            messager.printMessage(ERROR, <span class="hljs-string">&quot;Couldn&#x27;t generate class&quot;</span>);<br>        &#125;<br>        Messager messager = processingEnv.getMessager();<br>        <span class="hljs-keyword">for</span> (TypeElement te : annotations) &#123;<br>            <span class="hljs-keyword">for</span> (Element e : roundEnv.getElementsAnnotatedWith(te)) &#123;<br>                messager.printMessage(Diagnostic.Kind.NOTE, <span class="hljs-string">&quot;HelloProcessor Printing: &quot;</span> + e.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 构建被 @MyAnnotation 注解的类</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> AnnotatedClass <span class="hljs-title">buildAnnotatedClass</span><span class="hljs-params">(TypeElement typeElement)</span> <span class="hljs-keyword">throws</span> NoPackageNameException, IOException </span>&#123;<br>        ArrayList&lt;String&gt; variableNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element element : typeElement.getEnclosedElements()) &#123;<br>            <span class="hljs-keyword">if</span> (!(element <span class="hljs-keyword">instanceof</span> VariableElement)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            VariableElement variableElement = (VariableElement) element;<br>            variableNames.add(variableElement.getSimpleName().toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AnnotatedClass(typeElement, variableNames);<br>    &#125;<br><br>    <span class="hljs-comment">// 生成 StringUtil 源代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generate</span><span class="hljs-params">(List&lt;AnnotatedClass&gt; list)</span> <span class="hljs-keyword">throws</span> NoPackageNameException, IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (AnnotatedClass annotatedClass : list) &#123;<br>            <span class="hljs-comment">// debug</span><br>            String message = annotatedClass.annotatedClassName + <span class="hljs-string">&quot; / &quot;</span> + annotatedClass.typeElement + <span class="hljs-string">&quot; / &quot;</span> + Arrays.toString(annotatedClass.variableNames.toArray());<br>            messager.printMessage(Diagnostic.Kind.NOTE, message, annotatedClass.typeElement);<br>        &#125;<br><br>        <span class="hljs-comment">// 生成源代码</span><br>        String packageName = getPackageName(processingEnv.getElementUtils(), list.get(<span class="hljs-number">0</span>).typeElement);<br>        TypeSpec generatedClass = CodeGenerator.generateClass(list);<br>        JavaFile javaFile = JavaFile.builder(packageName, generatedClass).build();<br><br>        <span class="hljs-comment">// 在 app module/build/generated/source/apt 生成一份源代码</span><br>        javaFile.writeTo(processingEnv.getFiler());<br><br>        <span class="hljs-comment">// 测试在桌面生成一份源代码</span><br>        javaFile.writeTo(<span class="hljs-keyword">new</span> File(System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + <span class="hljs-string">&quot;/Desktop/&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 在桌面生成 HelloWorld.java</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">genHelloWorld</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        MethodSpec main = MethodSpec.methodBuilder(<span class="hljs-string">&quot;main&quot;</span>).addModifiers(Modifier.PUBLIC, Modifier.STATIC).returns(<span class="hljs-keyword">void</span>.class).addParameter(String[].class, <span class="hljs-string">&quot;args&quot;</span>).addStatement(<span class="hljs-string">&quot;$T.out.println($S)&quot;</span>, System.class, <span class="hljs-string">&quot;Hello, JavaPoet!&quot;</span>).build();<br>        TypeSpec helloWorld = TypeSpec.classBuilder(<span class="hljs-string">&quot;HelloWorld&quot;</span>).addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(main).build();<br>        JavaFile javaFile = JavaFile.builder(<span class="hljs-string">&quot;cn.septenary.annotation&quot;</span>, helloWorld).build();<br>        javaFile.writeTo(<span class="hljs-keyword">new</span> File(System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + <span class="hljs-string">&quot;/Desktop/Hello&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 被 @MyAnnotation 注解的类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotatedClass</span> </span>&#123;<br>        <span class="hljs-comment">// 整个类元素</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> TypeElement typeElement;<br>        <span class="hljs-comment">// 类名</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String annotatedClassName;<br>        <span class="hljs-comment">// 成员变量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> List&lt;String&gt; variableNames;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotatedClass</span><span class="hljs-params">(TypeElement typeElement, List&lt;String&gt; variableNames)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.annotatedClassName = typeElement.getSimpleName().toString();<br>            <span class="hljs-keyword">this</span>.variableNames = variableNames;<br>            <span class="hljs-keyword">this</span>.typeElement = typeElement;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> TypeMirror <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> typeElement.asType();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 源码生成器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CLASS_NAME = <span class="hljs-string">&quot;StringUtil&quot;</span>;<br><br>        <span class="hljs-comment">// 构建类</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TypeSpec <span class="hljs-title">generateClass</span><span class="hljs-params">(List&lt;AnnotatedClass&gt; classes)</span> </span>&#123;<br>            TypeSpec.Builder builder = classBuilder(CLASS_NAME).addModifiers(PUBLIC, FINAL);<br>            <span class="hljs-keyword">for</span> (AnnotatedClass anno : classes) &#123;<br>                builder.addMethod(makeCreateStringMethod(anno));<br>            &#125;<br>            <span class="hljs-keyword">return</span> builder.build();<br>        &#125;<br><br>        <span class="hljs-comment">// 将 AnnotatedClass 作为参数构建 createString() 方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MethodSpec <span class="hljs-title">makeCreateStringMethod</span><span class="hljs-params">(AnnotatedClass annotatedClass)</span> </span>&#123;<br>            StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>            builder.append(String.format(<span class="hljs-string">&quot;return \&quot;%s&#123;\&quot; + &quot;</span>, annotatedClass.annotatedClassName));<br>            <span class="hljs-keyword">for</span> (String variableName : annotatedClass.variableNames) &#123;<br>                builder.append(String.format(<span class="hljs-string">&quot; \&quot;%s=&#x27;\&quot; + String.valueOf(instance.%s) + \&quot;&#x27;,\&quot; + &quot;</span>, variableName, variableName));<br>            &#125;<br>            builder.append(<span class="hljs-string">&quot;\&quot;&#125;\&quot;&quot;</span>);<br>            <span class="hljs-keyword">return</span> methodBuilder(<span class="hljs-string">&quot;createString&quot;</span>).addJavadoc(<span class="hljs-string">&quot;@return string suitable for &#123;@param instance&#125;&#x27;s toString()&quot;</span>).addModifiers(PUBLIC, STATIC).addParameter(TypeName.get(annotatedClass.getType()), <span class="hljs-string">&quot;instance&quot;</span>).addStatement(builder.toString()).returns(String.class).build();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPublic</span><span class="hljs-params">(TypeElement element)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> element.getModifiers().contains(PUBLIC);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAbstract</span><span class="hljs-params">(TypeElement element)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> element.getModifiers().contains(ABSTRACT);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidClass</span><span class="hljs-params">(TypeElement element)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (!isPublic(element)) &#123;<br>            String message = String.format(<span class="hljs-string">&quot;Classes annotated with %s must be public.&quot;</span>, ANNOTATION);<br>            messager.printMessage(Diagnostic.Kind.ERROR, message, element);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isAbstract(element)) &#123;<br>            String message = String.format(<span class="hljs-string">&quot;Classes annotated with %s must not be abstract.&quot;</span>, ANNOTATION);<br>            messager.printMessage(Diagnostic.Kind.ERROR, message, element);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getPackageName</span><span class="hljs-params">(Elements elements, TypeElement typeElement)</span> <span class="hljs-keyword">throws</span> NoPackageNameException </span>&#123;<br>        PackageElement pkg = elements.getPackageOf(typeElement);<br>        <span class="hljs-keyword">if</span> (pkg.isUnnamed()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoPackageNameException(typeElement);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pkg.getQualifiedName().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>build.gradle:</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br>...<br><span class="hljs-keyword">dependencies</span> &#123;<br>    <span class="hljs-keyword">compile</span> <span class="hljs-keyword">project</span>(<span class="hljs-string">&#x27;:lib&#x27;</span>)<br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;com.google.auto.service:auto-service:1.0-rc2&#x27;</span><br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;com.squareup:javapoet:1.4.0&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-构建-api-module"><a href="#6-构建-api-module" class="headerlink" title="6.构建 api module"></a>6.构建 api module</h2><p>生成 <strong>api.jar</strong> ,供 **lib module ** 和 <strong>app module</strong> 使用</p><h2 id="7-构建-lib-module"><a href="#7-构建-lib-module" class="headerlink" title="7.构建 lib module"></a>7.构建 lib module</h2><p>生成了 <strong>complier.jar</strong> ，其中关键文件 <strong>javax.annotation.processing.Processor</strong> 也被自动添加到 jar 包中</p><p><img src="/assets/android-apt-auto-gen-code/post-1512109-1.png" alt="complier.jar"> </p><h2 id="8-构建-app-module"><a href="#8-构建-app-module" class="headerlink" title="8.构建 app module"></a>8.构建 app module</h2><p>构建后会看到，IDE 不在警告 <code>TextUtil</code> 找不到的错误了，他的文件被自动生成在:</p><p><img src="/assets/android-apt-auto-gen-code/post-1512109-2.png" alt="TextUtil"> </p><h2 id="9-案例源码"><a href="#9-案例源码" class="headerlink" title="9.案例源码"></a>9.案例源码</h2><p><a href="https://github.com/oksep/Android-Gradle-Multy-Flavor">Github Source Code</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="http://brianattwell.com/android-annotation-processing-pojo-string-generator/">Android Annotation Processing: POJO string generator</a></p></li><li><p><a href="https://deors.wordpress.com/2011/10/08/annotation-processors/">Code Generation using Annotation Processors</a></p></li><li><p><a href="http://hannesdorfmann.com/annotation-processing/annotationprocessing101/">Annotation Processing</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android 盒子适配解决办法汇总</title>
    <link href="/android-tv-dimention-adaption/"/>
    <url>/android-tv-dimention-adaption/</url>
    
    <content type="html"><![CDATA[<p>虽然现在大部分盒子和智能电视都是1080P或720P的分辨率，但考虑到有些山寨厂商的分辨率并没有按照标准执行，我们通常用 dp 在不同分辨率上做的适配方案所达到的适配效果在部分盒子上并不理想，而且工程量也大。这就产生了怎么样做好一次布局，多处适配的方案。下面分别介绍一下我收集到的三种适配方案，以及各自的优劣之处。</p><span id="more"></span><h2 id="集中适配-LayoutCompat"><a href="#集中适配-LayoutCompat" class="headerlink" title="集中适配 LayoutCompat"></a>集中适配 LayoutCompat</h2><p>设计师通常会按照某一特定分辨率进行UI设计，以 <strong>1920x1080</strong> 的标注图为例，在 <strong>res/layout</strong> 文件夹下创建UI视图，参照标注图的尺寸，所有UI视图都按照 <strong>像素px</strong> 为单位配置 （ TextView 的 textSize也不例外）。</p><p>写好了所有的 <strong>layout.xml</strong> 布局后，要介绍一下 <code>LayoutCompat</code> 这个工具类的使用。<code>LayoutCompat</code> 首先按照当前设备的分辨率 与 <strong>1920x1080</strong> 比较计算出一个缩放因子 <code>scaleFactor</code>，然后遍历根视图下所有子View，按照 <code>scaleFactor</code> 重新计算子View的 <code>LayoutParams</code>, <code>padding</code>, <code>margin</code>, <code>textSize</code> 等等，然后重新配置给子View。你只需要在 <code>Activity</code> 中调用 <code>setContent()</code> 后执行下面语句，就完成了所有设备的适配工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">LayoutCompat.init(<span class="hljs-keyword">this</span>);<br>LayoutCompat.L1080P.compat(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><p>其中静态常量 <code>L1080P</code> 是 <code>LayoutComat</code> 预设好的设计方案，如果是按照其他分辨率的标准设计，以 <strong>1280x720</strong> 为例，可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">LayoutCompat.init(<span class="hljs-keyword">this</span>);<br>LayoutCompat.obtain(<span class="hljs-number">1280</span>,<span class="hljs-number">720</span>).compat(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><p>下面介绍一下 <code>LayoutCompat</code> 工具类部分核心代码，获取源代码，戳这里<a href="https://github.com/oksep/LayoutCompat">Github源码</a>找到它</p><p>计算缩放因子 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> <span class="hljs-title">baseScale</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sBaseScaleByW ? (<span class="hljs-number">1f</span> * sScreenSize.x / mDesignWidth) : (<span class="hljs-number">1f</span> * sScreenSize.y / mDesignHeight);<br>&#125;<br></code></pre></td></tr></table></figure><p>适配Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compatActivity</span><span class="hljs-params">(Activity activity)</span> </span>&#123;<br>    <span class="hljs-comment">// 找到Activity 的 rootView进行适配</span><br>    compatViewImpl(activity.findViewById(android.R.id.content));<br>&#125;<br></code></pre></td></tr></table></figure><p>适配View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compatViewImpl</span><span class="hljs-params">(View view)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span>) &#123;<br>         <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sScreenSize == <span class="hljs-keyword">null</span> || sScreenSize.x == <span class="hljs-number">0</span> || sScreenSize.y == <span class="hljs-number">0</span>) &#123;<br>        init(view.getContext());<br>    &#125;<br>    ViewGroup.LayoutParams params = view.getLayoutParams();<br>    <span class="hljs-comment">// 计算 width ，height ，margin</span><br>    <span class="hljs-keyword">if</span> (params != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (params.width &gt; <span class="hljs-number">0</span>) &#123;<br>            params.width = w(params.width);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (params.height &gt; <span class="hljs-number">0</span>) &#123;<br>            params.height = h(params.height);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (params <span class="hljs-keyword">instanceof</span> MarginLayoutParams) &#123;<br>            MarginLayoutParams mParams = (MarginLayoutParams) params;<br>            mParams.leftMargin = w(mParams.leftMargin);<br>            ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 计算 padding</span><br>    view.setPadding(w(view.getPaddingLeft()), h(view.getPaddingTop()), w(view.getPaddingRight()), h(view.getPaddingBottom()));<br><br>    <span class="hljs-comment">// 计算 TextView 的 size</span><br>    <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> TextView) &#123;<br>        TextView tv = (TextView) view;<br>        tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, w((<span class="hljs-keyword">int</span>) tv.getTextSize()));<br>        ...<br>    &#125;<br>    <span class="hljs-comment">// 遍历子View 并适配</span><br>    <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> ViewGroup) &#123;<br>        ViewGroup vg = (ViewGroup) view;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> count = vg.getChildCount();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            compactViewImpl(vg.getChildAt(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优缺点</p><ul><li>优点：轻量级适配，代码量少，方便快捷 </li><li>缺点：不能适配 res/drawable 下的资源</li></ul><h2 id="自定义-AutoLayout"><a href="#自定义-AutoLayout" class="headerlink" title="自定义 AutoLayout"></a>自定义 AutoLayout</h2><p>这种方式重写了部分 ViewGroup:（<code>LinearLayout</code>，<code>RelativeLayout</code>，<code>FrameLayout</code>），配合工具类 <code>AutoUtils</code> ，按照特定分辨率用 px 单位配置 <strong>layout</strong>，然后重新计算 <code>padding，margin， size</code> 等，戳这里<a href="https://github.com/hongyangAndroid/AndroidAutoLayout">Github</a>找到项目</p><p>优缺点</p><ul><li>轻量级适配</li><li>不能适配 res/drawable 下的资源，源码相对一号方案还很臃肿，需要外部引入的方式，扩展性不理想，必须使用给定的 ViewGroup ，自由度下降</li></ul><h2 id="多分辨率-dimens-value"><a href="#多分辨率-dimens-value" class="headerlink" title="多分辨率 dimens value"></a>多分辨率 dimens value</h2><p><strong>优酷TV版</strong> 采取的适配方案，逆向该工程可以看到，有以下资源<br><img src="/assets/android-tv-dimention-adaption/post-151210-1.png" alt="values-nodpi-x!"> </p><p>再来看一下某一个 layout 文件<br><img src="/assets/android-tv-dimention-adaption/post-151210-2.png" alt="values-nodpi-x!"> </p><p>其中除了 <code>fill_parent</code> 和 <code>wrap_content</code>，都是引用 <strong>dimens</strong> 的值来配置，上图已经列出大多数分辨率的 <strong>values</strong>，这些<strong>dimens</strong> 在每个 <strong>values-nodpi-x</strong> 文件夹下都有一份 <strong>dimens.xml</strong> ，接下来看一下其中一个 <strong>dimens.xml</strong> 文件记录的值：<br><img src="/assets/android-tv-dimention-adaption/post-151210-3.png" alt="dimens.xml!"> </p><p>可以看到，该文件针对于与之对应的分辨率（ <strong>values-nodpi-x</strong>） 做了适配.</p><p>优缺点<br>-优点：适配完全交给了framework，不需要开发者配置任何代码<br>-缺点：分辨率列出的有限，工程略臃肿。</p><p>上图列出的  <strong>values-nodpi-x</strong> 由脚本生成，通过它可以帮开发者解决些这么多values-xx 的麻烦事情，戳这里<a href="http://blog.csdn.net/lmj623565791/article/details/45460089">链接</a>，参考 <code>GenerateValueFiles</code> 自动生成 values 文件程序</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OTT</tag>
      
      <tag>Android-TV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio Option 快捷键失效</title>
    <link href="/android-studio-options-workaround/"/>
    <url>/android-studio-options-workaround/</url>
    
    <content type="html"><![CDATA[<h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>前些天把将 Mac 从 Yosemite 升级到 EI Capitan 后，Android Studio 和 IntelliJ IDEA中 option 快捷键 （按住 option + 任意字符）都失效了，只能输出一些特殊字符：</p><p><img src="http://assets.septenary.cn/user/1/image/06847cc6-0dee-44f7-e981-6c912e878428" alt="Alt text"></p><span id="more"></span><p>以 <code>（option + / ）</code>为例（博主从Eclipse转到AS 的，习惯了用 option + / ）， 在 AS 中配置 Key Map，在编辑器中键入快捷键时，本来因该是代码会自动提示，但却输出了 <code>÷</code></p><p><img src="http://assets.septenary.cn/user/1/image/60dbb31b-ed9f-4402-b03e-88c54a0a4605" alt="Alt text"></p><h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>首先下载一个制作自定义输入法的工具 <strong>Ukelele</strong> ，<br>打开 <strong>Ukelele</strong> -&gt; <strong>File</strong> -&gt; <strong>New From Current Input Source</strong>  出现下面窗口</p><p><img src="http://assets.septenary.cn/user/1/image/bf7fa070-9f16-404b-887d-a59127179fb3" alt="Alt text"></p><p>打开 <strong>U.S.</strong></p><p><img src="http://assets.septenary.cn/user/1/image/397a94ba-6055-4831-d724-ad6d5804d6ea" alt="Alt text"></p><p>按住 option 你会看到</p><p><img src="http://assets.septenary.cn/user/1/image/fbf93aa6-6439-45b9-85b4-835b1babab97" alt="Alt text"></p><p>这里就是 <strong>U.S.</strong> 的默认键位映射，修改 <code>÷</code> 为 <code>/</code> </p><p>然后 <strong>File</strong> -&gt; <strong>Save</strong>(<strong>File Formate</strong> 选择 <strong>Keyboard Layout</strong> ) -&gt; 保存文件到 <strong>~/Library/Keyboard Layouts</strong> 文件夹下 -&gt; 打开输入法偏好设置 -&gt; 添加 -&gt; 其它 -&gt; 选择并切换到该输入法, 你的 IDE 快捷键就会生效啦。</p><h2 id="解决方法二（11月9日更新）"><a href="#解决方法二（11月9日更新）" class="headerlink" title="解决方法二（11月9日更新）"></a>解决方法二（11月9日更新）</h2><p><strong>V2EX</strong> 有一同学讲到: <a href="http://www.v2ex.com/t/234678">链接</a></p><blockquote><p>是 jdk 的问题， jdk7 之后就有这个问题，先试试新版（自带 jre 的），如果最后还是不行，可以换个映射，然后通过 karabiner 把之前的热键（ OPT+/）映射成新的热键</p></blockquote><p>我的Mac上是 “java version 1.8.0_05” 最新版本，同样失效，看来最新JRE 并没有解决该问题，换映射并不习惯，用上面讲到的方法替换输入法也有局限性，那就试试替换成旧版JAVA的吧。</p><p>要了解一下 Android Studio 中的两种 JDK ，<a href="http://tools.android.com/tech-docs/configuration/osx-jdk">戳这里</a> 官网有详细解释。</p><ul><li><strong>Project JDK</strong> （编译项目工程使用的 JDK版本）</li><li><strong>IDE JDK</strong> （IDE使用的JDK版本）</li></ul><p>知道了这些看来只需要更换 IDE 的 JDK 就能解决了，按照以下步骤：</p><p>1.下载旧版 <a href="https://support.apple.com/kb/DL1572?locale=zh_CN">JAVA 6 下载链接</a> ,  退出所有使用JAVA 的应用程序进行安装</p><p>2.在终端中配置环境变量 <code>export STUDIO_JDK=/Library/Java/JavaVirtualMachines/1.6.0.jdk</code></p><p>3.生效后,打开 Android Studio，IDE JDK 换成了1.6，快捷键 <strong>option+/</strong> 便生效了</p><p> <img src="http://assets.septenary.cn/user/1/image/2435861c-e7e1-408d-a40d-9378920fb8bb" alt="Alt text"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WeakHandler 技术分析</title>
    <link href="/android-weak-handler/"/>
    <url>/android-weak-handler/</url>
    
    <content type="html"><![CDATA[<h1 id="Handler-导致的-Context-Leak"><a href="#Handler-导致的-Context-Leak" class="headerlink" title="Handler 导致的 Context Leak"></a>Handler 导致的 Context Leak</h1><p>先看下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-comment">// Post a message and delay its execution for 10 minutes.</span><br>        <span class="hljs-keyword">new</span> Handler().postDelayed(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">/* ... */</span> &#125;<br>        &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// Go back to the previous Activity.</span><br>        finish();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Android Lint 会提示我们内存泄露风险</p><blockquote><p>in Android, Handler classes should be static or leaks might occur.</p></blockquote><p>代码中，在 Activity 的 onCreate 方法里创建了一个 Handler，然后延时执行一个消息，在这段延时时间内，如果 Activity 销毁，会导致 Activity 的泄露，原因在于 Handler 将消息提交到 MessageQueue 中，而 MessageQueue 是跟随 App 整个生命周期存在的，这个匿名 Runnable 却隐式的持有了 Activity 的引用，从而导致了内存泄露。</p><p>关于更多 Context Leak 的详细内容，可以查看这个连接 <a href="http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html">How to Leak a Context</a></p><p>文中的解决方案是用 WeakReference 来包装 Activity，这种方式可以解决 Context 的泄露，但是在实际开发中，每个的 Handler 都要用 WeakReference 来包装，略显臃肿。</p><h1 id="用-WeakHandler-替换-Handler"><a href="#用-WeakHandler-替换-Handler" class="headerlink" title="用 WeakHandler 替换 Handler"></a>用 WeakHandler 替换 Handler</h1><p>WeakHandler 的<a href="https://github.com/badoo/android-weak-handler">源码</a>托管在 Github 上，我们来具体分析一下 WeakHandler 是如何解决 MemoryLeak 的。</p><p>WeakHandler 并没有继承自 Handler , 而是定义了一个静态内部类 ExecHandler，所有的消息发送都是由 ExecHandler 接管的，下面是 ExecHandler 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Handler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WeakReference&lt;Handler.Callback&gt; mCallback;<br><br>    ExecHandler() &#123;<br>        mCallback = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    ExecHandler(WeakReference&lt;Handler.Callback&gt; callback) &#123;<br>        mCallback = callback;<br>    &#125;<br><br>    ExecHandler(Looper looper) &#123;<br>        <span class="hljs-keyword">super</span>(looper);<br>        mCallback = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    ExecHandler(Looper looper, WeakReference&lt;Handler.Callback&gt; callback) &#123;<br>        <span class="hljs-keyword">super</span>(looper);<br>        mCallback = callback;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (mCallback == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">final</span> Handler.Callback callback = mCallback.get();<br>        <span class="hljs-keyword">if</span> (callback == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Already disposed</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        callback.handleMessage(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ExecHandler 用弱引用 WeakReference 包装了 Handler.Callback , 而 Handler.Callback 则是由 WeakHandler 传入的，通过它解决了 Handler.Callback 的 leak  风险 。</p><p>我们知道用 Handler 发送消息有两种方式，接下来分别来看下 WeakHandler 是如何实现的。</p><h2 id="sendMessage-Message"><a href="#sendMessage-Message" class="headerlink" title="sendMessage(Message)"></a>sendMessage(Message)</h2><p>当我们用 WeakHandler 发送消息时，实际上调用了 ExecHandler 的 sendMessage(…) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> mExec.sendMessage(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>处理消息时需要实现 Handler.Callback  接口的 handleMessage(Message) 方法，然后在 WeakHandler 构造器中传入 。</p><h2 id="post-Runnable"><a href="#post-Runnable" class="headerlink" title="post(Runnable)"></a>post(Runnable)</h2><p>看一下 WeakHandler 的 post 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">postDelayed</span><span class="hljs-params">(Runnable r, <span class="hljs-keyword">long</span> delay)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> mExec.postDelayed(wrapRunnable(r), delay);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样是由 ExecHandler 处理的，但 Runnable 被 <code>wrapRunnable(r)</code> 包装了一下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> WeakRunnable <span class="hljs-title">wrapRunnable</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Runnable r)</span> </span>&#123;<br>    ...<br>    <span class="hljs-keyword">final</span> ChainedRef hardRef = <span class="hljs-keyword">new</span> ChainedRef(mLock, r);<br>    mRunnables.insertAfter(hardRef);<br>    <span class="hljs-keyword">return</span> hardRef.wrapper;<br>&#125;<br></code></pre></td></tr></table></figure><p>mRunnables 维护了一个简单的双向链表，用 ChainedRef 代表链表节点，插入到 mRunnables 的链表中，下面是 ChainedRef 的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChainedRef</span> </span>&#123;<br>    <span class="hljs-meta">@Nullable</span><br>    ChainedRef next;<br>    <span class="hljs-meta">@Nullable</span><br>    ChainedRef prev;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">final</span> Runnable runnable;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">final</span> WeakRunnable wrapper;<br><br>    <span class="hljs-meta">@NonNull</span><br>    Lock lock;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChainedRef</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Lock lock, <span class="hljs-meta">@NonNull</span> Runnable r)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.runnable = r;<br>        <span class="hljs-keyword">this</span>.lock = lock;<br>        <span class="hljs-keyword">this</span>.wrapper = <span class="hljs-keyword">new</span> WeakRunnable(<span class="hljs-keyword">new</span> WeakReference&lt;&gt;(r), <span class="hljs-keyword">new</span> WeakReference&lt;&gt;(<span class="hljs-keyword">this</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> WeakRunnable <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (prev != <span class="hljs-keyword">null</span>) &#123;<br>                prev.next = next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (next != <span class="hljs-keyword">null</span>) &#123;<br>                next.prev = prev;<br>            &#125;<br>            prev = <span class="hljs-keyword">null</span>;<br>            next = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> wrapper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertAfter</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ChainedRef candidate)</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.next != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.next.prev = candidate;<br>            &#125;<br><br>            candidate.next = <span class="hljs-keyword">this</span>.next;<br>            <span class="hljs-keyword">this</span>.next = candidate;<br>            candidate.prev = <span class="hljs-keyword">this</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> WeakRunnable <span class="hljs-title">remove</span><span class="hljs-params">(Runnable obj)</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ChainedRef curr = <span class="hljs-keyword">this</span>.next; <span class="hljs-comment">// Skipping head</span><br>            <span class="hljs-keyword">while</span> (curr != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (curr.runnable == obj) &#123; <span class="hljs-comment">// We do comparison exactly how Handler does inside</span><br>                    <span class="hljs-keyword">return</span> curr.remove();<br>                &#125;<br>                curr = curr.next;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ChainedRef 的构造器中用 WeakReference 将 Runnable 包装在 WeakRunnable 中避免了 leak 的风险, 当我们像Handler.removeCallback() 那样移除回调时，除了移除 ExecHandler 中的 WeakRunnable ，也要把链表中的 Runnable 移除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove any pending posts of Runnable r that are in the message queue.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeCallbacks</span><span class="hljs-params">(Runnable r)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> WeakRunnable runnable = mRunnables.remove(r);<br>    <span class="hljs-keyword">if</span> (runnable != <span class="hljs-keyword">null</span>) &#123;<br>        mExec.removeCallbacks(runnable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WeakHandler-的缺点"><a href="#WeakHandler-的缺点" class="headerlink" title="WeakHandler 的缺点"></a>WeakHandler 的缺点</h2><p>上面介绍的 WeakHandler 的实现可以看到，想要处理 handleMessage() 只能由 Handler.Callback 传入 WeakHandler 的构造器中,与 Handler 的实现相比没有那么灵活 (Handler 的构造器可以传递 Handler.Callback ，也可以按照下面的方法实现)，并且 WeakHandler 中并且没有实现 obtainMessage() </p><p>android.os.Handler 的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Handler()&#123;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span></span>&#123;<br>        <br>    &#125;<br>&#125;.sendEmptyMessage(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>WeakHandler 的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Handler.Callback mCallback = <span class="hljs-keyword">new</span> Handler.Callback ()&#123;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span></span>&#123;<br>        <br>    &#125;<br>&#125; <br>WeakHandler mHandler = <span class="hljs-keyword">new</span> WeakHandler(mCallback);<br></code></pre></td></tr></table></figure><h1 id="优化后的-WeakHandler"><a href="#优化后的-WeakHandler" class="headerlink" title="优化后的 WeakHandler"></a>优化后的 WeakHandler</h1><ol><li>改写 ExecHandler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Handler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WeakReference&lt;WeakHandler&gt; mBase;<br><br>    ExecHandler(WeakHandler base) &#123;<br>        <span class="hljs-keyword">super</span>();<br>        mBase = <span class="hljs-keyword">new</span> WeakReference&lt;&gt;(base);<br>    &#125;<br><br>    ExecHandler(WeakHandler base, Looper looper) &#123;<br>        <span class="hljs-keyword">super</span>(looper);<br>        mBase = <span class="hljs-keyword">new</span> WeakReference&lt;&gt;(base);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> </span>&#123;<br>        WeakHandler base = mBase.get();<br>        <span class="hljs-keyword">if</span> (base != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (base.mCallback != <span class="hljs-keyword">null</span>) &#123;<br>                base.mCallback.handleMessage(msg);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                base.handleMessage(msg);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 ExecHandler 的构造器中将 WeakHandler 用软引用包装</p><ol start="2"><li>添加 obtainMessage() 函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Message <span class="hljs-title">obtainMessage</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> mExec.obtainMessage();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这两处优化，使得 WeakHandler 的用法与 android.os.Handler 的用法完全一致了, Handler 怎么用，WeakHandler 就怎么用,<br>同时也不用担心 MemoryLeak 啦~ ：)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> WeakHandler()&#123;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span></span>&#123;<br>        <br>    &#125;<br>&#125;.sendEmptyMessage(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>最后附上优化后的 WeakHandler <a href="https://github.com/oksep/android-weak-handler">源码</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>handler</tag>
      
      <tag>memory-leak</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gihub 域名配置 Page build warning</title>
    <link href="/gihub-page-build-warning/"/>
    <url>/gihub-page-build-warning/</url>
    
    <content type="html"><![CDATA[<p>为什么我托管在 github 上的静态博客总会收到 CNAME 的警告邮件呢?</p><span id="more"></span><blockquote><p>  The page build completed successfully, but returned the following warning:<br>Your site’s DNS settings are using a custom subdomain, <a href="http://www.septenary.cn/">www.septenary.cn</a>, that’s set up as an A record. We recommend you change this to a CNAME record pointing at Ryfthink.github.io. Instructions on configuring a subdomain for use with GitHub Pages can be found at: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a><br>For information on troubleshooting Jekyll see:<br><a href="https://help.github.com/articles/using-jekyll-with-pages#troubleshooting">https://help.github.com/articles/using-jekyll-with-pages#troubleshooting</a><br>If you have any questions you can contact us by replying to this email.</p></blockquote><p>大概意思是虽然我用 <strong>A</strong> 记录 配置 <a href="www.septenary.cn">www.septenary.cn</a> 指向我的 Github Page ，但是它建议最好用 <strong>CNAME</strong> 记录 指向 <a href="Ryfthink.github.io">Ryfthink.github.io</a> 来加快解析速度。<br>我是在 <a href="www.net.cn">万网</a> 购买域名并配置解析的，如果你用DNSPod 帮你配置解析，同样也可以生效。</p><p>查看原来的 配置是这样的<br><img src="/assets/gihub-page-build-warning/gitpage_a_record.png" alt="Alt text"></p><p>将 A 记录 配置暂停，然后添加一个 <strong>CNAME</strong> 记录：<br><img src="/assets/gihub-page-build-warning/gitpage_cname_record.png" alt="Alt text"></p><p>启用后稍等几分钟，你新创建的域名解析就会生效。这样提高了域名解析速度，以后也不会收到这恼人的 <strong>Page build warning</strong> 警告邮件了。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CNAME</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 支持 NDK 的 实验插件</title>
    <link href="/ndk-experiment-plugin-in-as/"/>
    <url>/ndk-experiment-plugin-in-as/</url>
    
    <content type="html"><![CDATA[<h1 id="实验插件是啥"><a href="#实验插件是啥" class="headerlink" title="实验插件是啥"></a>实验插件是啥</h1><p>在 Android Studio 1.3.0 中 Google 为支持NDK ，添加了 <strong>实验插件 (experimental-plugin)</strong> ，想要在 Android Studio 中完成 Native 的编译构建工作，就必须要用到该插件。</p><p><font size="3" face="Aria" color="red">注意:</font> 该插件仍然处于实验阶段， 并非 Google 为在 Android Studio 上支持 NDK 开发的最终版本，将来可能还会改动。</p><h1 id="使用该插件有三个要求"><a href="#使用该插件有三个要求" class="headerlink" title="使用该插件有三个要求"></a>使用该插件有三个要求</h1><ol><li>Gradle 版本必须是2.5</li><li>Andr​​oid NDK r10e</li><li>SDK build tool 19.0.0 以上</li></ol><span id="more"></span><h1 id="实验插件和传统插件的异同"><a href="#实验插件和传统插件的异同" class="headerlink" title="实验插件和传统插件的异同"></a>实验插件和传统插件的异同</h1><p>实验插件和传统插件有三处不同，接下来分别对每处不同进行比较。</p><h2 id="1-gradle-wrapper-gradle-wrapper-properties"><a href="#1-gradle-wrapper-gradle-wrapper-properties" class="headerlink" title="1. /gradle/wrapper/gradle-wrapper.properties"></a>1. /gradle/wrapper/gradle-wrapper.properties</h2><p>该文件中有一属性<code>distributionUrl</code>，标识内置 <strong>gradle</strong> 版本 必须是 <strong>2.5</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">distributionUrl=https\:<span class="hljs-comment">//services.gradle.org/distributions/gradle-2.5-bin.zip</span><br></code></pre></td></tr></table></figure><h2 id="2-project-gt-build-gradle"><a href="#2-project-gt-build-gradle" class="headerlink" title="2. project ==&gt;/build.gradle"></a>2. project ==&gt;/build.gradle</h2><p>传统插件的构建脚本依赖 <strong>classpath</strong> 是 <code>com.android.tools.build:gradle:1.3.0</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>        jcenter()<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.android.tools.build:gradle:1.3.0&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而实验插件 构建脚本指定的 <strong>classpath</strong> 却是 <code>com.android.tools.build:gradle-experimental:0.2.0</code>，目前实验插件最新版本是 <strong>0.2.0</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>       jcenter()<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.android.tools.build:gradle-experimental:0.2.0&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-module-gt-app-build-gradle"><a href="#3-module-gt-app-build-gradle" class="headerlink" title="3. module ==&gt;/app/build.gradle"></a>3. module ==&gt;/app/build.gradle</h2><p>传统 build.gradle 脚本，大致结构是这样的:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.android.application&#x27;</span><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">22</span><br>    buildToolsVersion <span class="hljs-string">&quot;22.0.1&quot;</span><br>    defaultConfig &#123;<br>       ...<br>    &#125;<br>    buildTypes &#123;<br>        ...<br>    &#125;<br>    productFlavors&#123;<br>        ...<br>    &#125;<br>&#125;<br>dependencies &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>然而对于实验插件， build.gradle 脚本却是下面这种格式:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.android.model.application&#x27;</span><br>model &#123;<br>    android &#123;<br>        compileSdkVersion = <span class="hljs-number">22</span><br>        buildToolsVersion = <span class="hljs-string">&quot;22.0.1&quot;</span><br>        defaultConfig.with &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    android.ndk &#123;<br>        ...<br>    &#125;<br>    android.sources &#123;<br>        ...<br>    &#125;<br>    android.productFlavors &#123;<br>        ...<br>    &#125;<br>&#125;<br>dependencies &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>首先导入的插件是 <code>apply plugin: &#39;com.android.model.application&#39;</code> ，然后所有配置由 <strong>model</strong> 模块包装，其中又嵌入了 <strong>android、android.ndk 、android.sources、android.productFlavors</strong> 等模块，项目依赖 <strong>dependencies</strong> 与 <strong>model</strong> 模块同级，接下来看一下各个模块的语法。</p><p><strong>android.ndk</strong> 这个模块必须声明 <strong>moduleName</strong> ，构建时会以 <strong>moduleName</strong> 命名所需要生成的so库，所有对native的配置都在该模块下进行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android.ndk &#123;<br>    moduleName = <span class="hljs-string">&quot;native&quot;</span><br>    toolchain = <span class="hljs-string">&quot;clang&quot;</span><br>    toolchainVersion = <span class="hljs-string">&quot;3.5&quot;</span><br>    CFlags += <span class="hljs-string">&quot;-DCUSTOM_DEFINE&quot;</span><br>    cppFlags += <span class="hljs-string">&quot;-DCUSTOM_DEFINE&quot;</span><br>    ldFlags += <span class="hljs-string">&quot;-L/custom/lib/path&quot;</span><br>    ldLibs += <span class="hljs-string">&quot;log&quot;</span><br>    stl = <span class="hljs-string">&quot;stlport_static&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>android.sources</strong> 配置 <strong>JNI</strong> 源代码路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android.sources &#123;<br>    main &#123;<br>        java &#123;<br>            source &#123;<br>                srcDirs <span class="hljs-string">&#x27;src/main/jni&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>android.productFlavors</strong> 配置构建项目时需要生成的不同平台 <strong>abi</strong> 的 <strong>so</strong> 库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android.productFlavors &#123;<br>    create (<span class="hljs-string">&quot;arm7&quot;</span>) &#123;<br>        ndk.abiFilters += <span class="hljs-string">&quot;armeabi-v7a&quot;</span><br>    &#125;<br>    create (<span class="hljs-string">&quot;arm8&quot;</span>) &#123;<br>        ndk.abiFilters += <span class="hljs-string">&quot;arm64-v8a&quot;</span><br>    &#125;<br>    create (<span class="hljs-string">&quot;x86-32&quot;</span>) &#123;<br>        ndk.abiFilters += <span class="hljs-string">&quot;x86&quot;</span><br>    &#125;<br>    <span class="hljs-comment">// all 表示生成所有平台的 so 库</span><br>    create(<span class="hljs-string">&quot;all&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>android</strong> 这个模块和上述的其他模块 ，我们看到所有属性的配置都改用 <code>=</code> 号连接，其中又嵌套了 <strong>defaultConfig</strong> 模块，同样用 <code>=</code> 号配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    compileSdkVersion = <span class="hljs-number">22</span><br>    buildToolsVersion = <span class="hljs-string">&quot;22.0.1&quot;</span><br>    defaultConfig.with &#123;<br>        applicationId = <span class="hljs-string">&quot;com.sample.teapot&quot;</span><br>        minSdkVersion.apiLevel = <span class="hljs-number">17</span><br>        targetSdkVersion.apiLevel = <span class="hljs-number">21</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Samples"><a href="#4-Samples" class="headerlink" title="4.Samples"></a>4.Samples</h2><p>关于 Android Studio 上开发 JNI ,  有很多官方提供的例子，<a href="https://github.com/googlesamples/android-ndk">戳这里Github</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>位运算的巧妙应用</title>
    <link href="/android-bit-operation/"/>
    <url>/android-bit-operation/</url>
    
    <content type="html"><![CDATA[<p>Android 中的位运算应用了解一下~</p><span id="more"></span><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>我们先了解一下 <strong>4种</strong> 最基本的二进制位运算</p><p> <strong><code>|</code> 或运算( OR )</strong><br>按规则 <code>Y | 1 = 1</code> , <code>Y | 0 = Y</code> 运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-number">10010101</span>   <span class="hljs-number">10100101</span><br>OR <span class="hljs-number">11110000</span>   <span class="hljs-number">11110000</span><br>=  <span class="hljs-number">11110101</span>   <span class="hljs-number">11110101</span><br></code></pre></td></tr></table></figure><p><strong><code>&amp;</code> 与运算( AND )</strong><br>按规则 <code>Y = 1</code> 时 <code>Y &amp; 1 = 1</code> , <code>Y=*</code> 时 <code>Y &amp; 0 = 0</code> 运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-number">10010101</span>   <span class="hljs-number">10100101</span><br>AND <span class="hljs-number">00001111</span>   <span class="hljs-number">00001111</span><br>=   <span class="hljs-number">00000101</span>   <span class="hljs-number">00000101</span><br></code></pre></td></tr></table></figure><p><strong><code>^</code> 异或( XOR )</strong><br>按位不同为1，相同为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-number">10011101</span>   <span class="hljs-number">10010101</span><br>XOR <span class="hljs-number">00001111</span>   <span class="hljs-number">11111111</span><br>=   <span class="hljs-number">10010010</span>   <span class="hljs-number">01101010</span><br></code></pre></td></tr></table></figure><p><strong><code>~</code> 非( NOT )</strong><br>按位取反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">~ <span class="hljs-number">10011101</span>   <span class="hljs-number">10010101</span><br>= <span class="hljs-number">01100010</span>   <span class="hljs-number">01101010</span><br></code></pre></td></tr></table></figure><p><strong>下面是逻辑运算表</strong></p><p>| bit 1 | bit 2 | OR | AND | XOR |<br>| :—: | :—: | :—: | :—: |<br>| 0 | 0 | 0 | 0 | 0 |<br>| 1 | 0 | 1 | 0 | 1 |<br>| 0 | 1 | 1 | 0 | 1 |<br>| 1 | 1 | 1 | 1 | 0 |</p><!--more--><hr><h2 id="掩码运算"><a href="#掩码运算" class="headerlink" title="掩码运算"></a>掩码运算</h2><p>现在有这样一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FLAG_FOCUSABLE = <span class="hljs-number">0X0001</span>; <span class="hljs-comment">// 0001</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FLAG_CLICKABLE = <span class="hljs-number">0X0002</span>; <span class="hljs-comment">// 0010</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FLAG_ENABLE = <span class="hljs-number">0X0004</span>; <span class="hljs-comment">// 0100</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> flags = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p><code>mFlags</code> 记录了某些状态位，如果想向 <code>flags</code> 上添加一个状态 <code>FLAG_ENABLE</code> ，可以这样做 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向mFlags上添加一个标识位</span><br>flags |= FLAG_ENABLE; <span class="hljs-comment">// flags = 0100;</span><br><span class="hljs-comment">// 在添加一个标志位</span><br>flags |= FLAG_FOCUSABLE; <span class="hljs-comment">// flags = 0101;</span><br></code></pre></td></tr></table></figure><p>检查<code>flags</code> 是否含有 <code>FLAG_ENABLE</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> containEnableFlag;<br>containEnableFlag = (flags &amp; FLAG_ENABLE) == FLAG_ENABLE<br><span class="hljs-comment">// 或者   </span><br>containEnableFlag = (flags &amp; FLAG_ENABLE) != <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>移除 <code>flags</code> 中的 <code>FLAG_ENABLE</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">flags &amp;= ~FLAG_ENABLE; <span class="hljs-comment">// flags = 0001</span><br></code></pre></td></tr></table></figure><p>这几种操作方式为掩码运算，总结有以下几种方式</p><table><thead><tr><th align="left">释义</th><th align="left">运算</th></tr></thead><tbody><tr><td align="left">设置或覆盖标志位</td><td align="left">flags &#921; flagBit</td></tr><tr><td align="left">移除标志位</td><td align="left">flags &amp; ~flagBit</td></tr><tr><td align="left">检查是否含有标志位</td><td align="left">(flags &amp; flagBit) == flagBit</td></tr><tr><td align="left">标志位取反</td><td align="left">~flags</td></tr></tbody></table><p>掩码运算并不直观，也不容易理解，所以在编程时并不推荐使用，但是如果考虑性能要求的话，使用掩码运算还是很划算的。</p><hr><h2 id="在Android-中的应用"><a href="#在Android-中的应用" class="headerlink" title="在Android 中的应用"></a>在Android 中的应用</h2><p><strong>View</strong> 类中可以设置其是否可见，可点击等，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">setFocusable(focusable);<br>setClickable(clickable);<br></code></pre></td></tr></table></figure><p>查看 <strong>View</strong> 的源代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* The view flags hold various views states.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">int</span> mViewFlags;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* This view wants keystrokes. Use with TAKES_FOCUS_MASK when calling</span><br><span class="hljs-comment">* setFlags.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FOCUSABLE = <span class="hljs-number">0x00000001</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;p&gt;Indicates this view can be clicked. When clickable, a View reacts</span><br><span class="hljs-comment">* to clicks by notifying the OnClickListener.&lt;p&gt;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CLICKABLE = <span class="hljs-number">0x00004000</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Set flags controlling behavior of this view.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> flags Constant indicating the value which should be set</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> mask Constant indicating the bit range that should be changed</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setFlags</span><span class="hljs-params">(<span class="hljs-keyword">int</span> flags, <span class="hljs-keyword">int</span> mask)</span> </span>&#123;<br>    ...     <br>    <span class="hljs-keyword">int</span> old = mViewFlags;<br>    mViewFlags = (mViewFlags &amp; ~mask) | (flags &amp; mask);<br><br>    <span class="hljs-keyword">int</span> changed = mViewFlags ^ old;<br>    <span class="hljs-keyword">if</span> (changed == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> privateFlags = mPrivateFlags;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到 <code>mViewFlags</code> 记录 <strong>View</strong> 的 <strong>states</strong>，当调用 <code>setFocusable()</code> , <code>setClickable()</code> 时,实际上是调用 <code>setFlags()</code> 来设置 <code>mViewFlags</code> 的值，像这种 <strong>掩码运算</strong> 的实际应用在 <strong>Android FrameWork</strong> 层很多地方都可以看到</p><hr><h2 id="Permissions-on-linux"><a href="#Permissions-on-linux" class="headerlink" title="Permissions on linux"></a>Permissions on linux</h2><p>在终端键入 <code>ls -l</code> ,会看到类似这样的输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">-rw-rw-r--@  1 septenary  staff  1158  2 27 14:05 Readme.txt<br>drwxrwxr-x@  6 septenary  staff   204  3 27 11:45 add-ons<br>drwxr-xr-x   8 septenary  staff   272  6 10 14:43 build-tools<br>drwxr-xr-x  47 septenary  staff  1598  3 27 11:40 docs<br>drwxr-xr-x   5 septenary  staff   170  5 21 17:05 extras<br>drwxr-xr-x  13 septenary  staff   442  7 28 12:08 platform-tools<br>drwxrwxr-x@  7 septenary  staff   238  5 29 10:50 platforms<br>drwxr-xr-x   5 septenary  staff   170  5 29 10:51 samples<br>drwxr-xr-x   5 septenary  staff   170  4  1 20:22 sources<br>drwxr-xr-x   4 septenary  staff   136  3 27 11:27 system-images<br>drwxr-xr-x   4 septenary  staff   136  6 10 14:43 temp<br>drwxr-xr-x  30 septenary  staff  1020  5 29 10:50 tools<br></code></pre></td></tr></table></figure><p>第一列由 <strong>d rwx rwx rwx</strong> 这种形式构成, <strong>d</strong> 标识文件夹，<strong>rwx</strong> 代表用户或用户组的 <strong>read write excute</strong> 权限，其中</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">r=4; // 0100<br>w=2; // 0010<br>x=1; // 0001<br></code></pre></td></tr></table></figure><p>如果想要更改 <strong>Readme.txt</strong> 文件 为可写、可读、可执行，键入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 ./Readme.txt <br></code></pre></td></tr></table></figure><p>此处的 <strong>777</strong> 即为 <code>r + w + x</code> ,用二进制运算表示 就是 <code>0100 | 0010 | 0001</code></p><hr><h2 id="变量置换"><a href="#变量置换" class="headerlink" title="变量置换"></a>变量置换</h2><p>有变量 <code>a = 4; b = 7</code> , 将 <code>a</code>,<code>b</code> 值互换，通常这么写:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">int a = 4;<br>int b = 7;<br>int temp = a;<br>a = b;<br>b = temp;<br></code></pre></td></tr></table></figure><p>利用 <strong>异或<code>^</code></strong> 运算可以这么写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">int a = 4;<br>int b = 7;<br>a^=b;<br>b^=a;<br>a^=b;<br></code></pre></td></tr></table></figure><p>这种方式省去了 <code>temp</code> 32个字节的内存消耗，且计算更快</p><p><a href="http://www.vipan.com/htdocs/bitwisehelp.html">参考: Bitwise Operators and Bit Masks</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell Script初级编程</title>
    <link href="/shell-learning/"/>
    <url>/shell-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-amp-Shell-Script"><a href="#Shell-amp-Shell-Script" class="headerlink" title="Shell &amp; Shell Script"></a>Shell &amp; Shell Script</h1><ul><li> Shell 是解释并执行 Shell 脚本的一个应用程序，提供一个图形界面实现人机交互</li><li> ShellScript 是为Shell应用程序编写的脚本，我们可以通过编写的shell脚本执行某些命令，访问操作系统内核服务等</li></ul><p>下面是 <strong>Unix</strong> 环境下的一个简单的 “Hello World” 脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span>  <br>echo &quot;Hello Shell&quot;<br></code></pre></td></tr></table></figure><p>第一行指定sh作为该脚本的解释器<br>第二行输出文本</p><span id="more"></span><hr><h1 id="Shell-的种类"><a href="#Shell-的种类" class="headerlink" title="Shell 的种类"></a>Shell 的种类</h1><p>Shell 有很多种类型，在 <strong>Unix</strong> 中主要有两大阵营的类型</p><ul><li>Bourne shell  (终端内以 <strong>$</strong> 开头)<ul><li>Bourne Shell (sh)</li><li>Korn Shell (ksh)</li><li>Bourne Again Shell (bash)</li><li>POSIX Shell (sh)</li></ul></li><li>C shell （终端内以 <strong>%</strong> 开头)<ul><li>C Shell (csh)</li><li>TENEX/TOPS Shell (tcsh)</li></ul></li></ul><p>tips1: 本文主要基于 <strong>sh</strong> 的脚本开发进行讲解</p><p>tips2: 像 Shell 这种 <strong>脚本–解释器</strong> 的方式，我们也可以用高级语言编写脚本，然后用其对应的解释器执行脚本,比如：</p><ul><li>用  <strong>php</strong>  语言编写脚本，然后用 <code>/usr/bin/php</code> 执行该脚本</li><li>用 <strong>java</strong> 语言编写脚本，然后用 <strong>jshell</strong> 执行该脚本</li></ul><hr><h1 id="Shell-Prompt"><a href="#Shell-Prompt" class="headerlink" title="Shell Prompt"></a>Shell Prompt</h1><p>Shell Prompt 命令行提示符，当执行某些操作时，终端行首显示的友好提示</p><p>1.<strong>PS1</strong></p><p>终端提示，我们可以通过修改PS1变量设置提示符的内容，提示符的颜色，以及shell窗口的标题栏文字等，当我打开终端时，行首提示是这样子的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~ Septenary$<br></code></pre></td></tr></table></figure><p>查看PS1 <code>echo $PS1</code> 会看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\w \u\$<br></code></pre></td></tr></table></figure><p>我们来修改下PS1，在终端上输入 <code>PS1=&#39;\A:\w\$&#39;</code> ，这时行首会变成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">16:08:~$<br></code></pre></td></tr></table></figure><p>下面是PS1中部分转义字符的含义</p><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">\a</td><td align="left">ASCII bell character (也可以写成\007)</td></tr><tr><td align="left">\d</td><td align="left">日期，格式为”Wed Sep 06”</td></tr><tr><td align="left">\h</td><td align="left">完整主机名的第一部分</td></tr><tr><td align="left">\H</td><td align="left">完整的主机名</td></tr><tr><td align="left">\j</td><td align="left">这个shell挂起的进程数目</td></tr><tr><td align="left">\l</td><td align="left">这个shell的终端设备文件</td></tr><tr><td align="left">\n</td><td align="left">换行符</td></tr><tr><td align="left">\r</td><td align="left">回车符</td></tr><tr><td align="left">\s</td><td align="left">shell的名字 .如 “bash”</td></tr><tr><td align="left">\t</td><td align="left">24小时制时间.如 “16:19:00”</td></tr><tr><td align="left">\T</td><td align="left">12小时制时间 ,如 “04:19:00”</td></tr><tr><td align="left">@</td><td align="left">12小时制时间,如 “16:19 pm”</td></tr><tr><td align="left">\u</td><td align="left">用户名</td></tr><tr><td align="left">\v</td><td align="left">bash版本号</td></tr><tr><td align="left">\V</td><td align="left">bash版本号, 包括补丁</td></tr><tr><td align="left">\w</td><td align="left">当前工作目录的完整路径</td></tr><tr><td align="left">\W</td><td align="left">当前工作目录</td></tr></tbody></table><p>2.<strong>PS2</strong><br>考虑一种使用情况，比如一个命令很长，我们希望不用一行将所有命令全部输入，这时可以在输入一半时键入 <code>\</code> ，然后再换行输入剩下的命令，换行后会有一个 <strong>prompt</strong> 提示，这个提示就是 <strong>PS2</strong>，可以看下面的例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">~  ᐅ PS2=&#x27;input_next_cmd_&gt;&#x27;<br>~  ᐅ ffmpeg -i in.mov -s 600x400 -pix_fmt rgb24 -r 10 -f gif - \<br><span class="hljs-meta">input_next_cmd_&gt;</span><span class="bash">| gifsicle --optimize=3 --delay=3 out.gif</span><br></code></pre></td></tr></table></figure><p>3.<strong>PS3</strong><br>Shell语法中使用 <strong>select</strong> 时用到的，下面是 <strong>PS3</strong> 的简单使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>PS3=&quot;select a laungage &gt;&gt;&quot; <br>select person in English Chinese Japanese Korea Exit<br>do<br> case $person in<br>English ) echo &quot;英语&quot; ;;<br>Chinese ) echo &quot;汉语&quot; ;;<br>Japanese ) echo &quot;日语&quot; ;;<br>Korea ) echo &quot;韩语&quot; ;;<br>Exit ) break ;;<br>* ) echo &quot;\007&quot; ;;<br> esac<br>done<br></code></pre></td></tr></table></figure><p>执行该脚本会输出以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1) English<br>2) Chinese<br>3) Japanese<br>4) Korea<br>5) Exit<br>select a laungage &gt;&gt;<br></code></pre></td></tr></table></figure><p>最后一行就是设置 <strong>PS3</strong> 后的效果   </p><hr><h1 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h1><ol><li>在终端中，键入 <code>touch test.sh</code> 创建一个文件 <strong>test.sh</strong> ,编辑该文件输入以下代码保存退出</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta">#</span><span class="bash"> Author : Septenary</span><br><span class="hljs-meta">#</span><span class="bash"> Copyright (c) septenary.cn</span><br><span class="hljs-meta">#</span><span class="bash"> Script follows here:</span><br>echo &quot;Hello Shell&quot;<br></code></pre></td></tr></table></figure><p>第一行的前两个字符 <strong>#!</strong> （读作 shebang）声明该脚本由哪个解释器执行，第二行 <strong>#</strong> 为注释，最后一行调用 <strong>echo</strong> 命令输出文本信息</p><ol start="2"><li><p>更改 <strong>test.sh</strong> 文件为可执行，在终端上输入     <code>chmod +x test.sh</code></p></li><li><p>双击 <strong>test.sh</strong> 文件可以看到终端上输出了 “Hello Shell”</p></li><li><p>也可以这样执行 <strong>test.sh</strong>：在终端中键入 <code>/bin/sh ./test.sh</code> ，同样会打印出 “Hello Shell” ，这种方式是将 <strong>./test.sh</strong> 作为一个参数来让 <strong>/bin/sh</strong> 解释执行</p></li></ol><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>1. Shell中变量的命名规则</strong></p><p>以 **(a-z) (A-Z) (0-9) (_) ** 组成， 字母和下划线开头</p><p><strong>2. 定义变量</strong>，Shell 中变量是弱类型的，可以赋值成任何类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">var=&quot;a message&quot;<br>var=10<br></code></pre></td></tr></table></figure><p><strong>3. 访问变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $var<br></code></pre></td></tr></table></figure><p><strong>4. 只读变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>var=&quot;value1&quot;<br>readonly var<br>var=&quot;value2<br></code></pre></td></tr></table></figure><p><strong>5. 重置变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>var=&quot;value&quot;<br>echo var<br>unset var<br>echo var<br></code></pre></td></tr></table></figure><hr><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>拷贝下面的代码会看到注释所对应的输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>echo &#x27;$$&#x27; = &quot;$$&quot;    #  $$ 当前shell进程的PID<br>echo &#x27;$0&#x27; = &quot;$0&quot;    #  $0 当前script的文件名<br>echo &#x27;$1&#x27; = &quot;$1&quot;    #  给当前shell传入的第一个参数，$n 为第n个参数<br>echo &#x27;$#&#x27; = &quot;$#&quot;    #  $# 传入参数的个数<br>echo &#x27;$*&#x27; = &quot;$*&quot;    #  $*/$@  参数集合<br>echo &#x27;$@&#x27; = &quot;$@&quot;    #  $*/$@  参数集合<br>echo &#x27;$?&#x27; = &quot;$?&quot;    #  $? 执行前一命令的返回结果（Exist Status）<br>echo &#x27;$!&#x27; = &quot;$!&quot;  #  最近一个后台程序的进程ID<br>for var in $@; do #  输出所有传入参数<br>echo $var<br>done<br></code></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>1. 定义数组</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">items=(aa bb cc)<br></code></pre></td></tr></table></figure><p><strong>2. 定义数组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">items[0]=aa<br>items[1]=bb<br></code></pre></td></tr></table></figure><p><strong>3. 引用数组元素</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;items[n]&#125;</span><br></code></pre></td></tr></table></figure><p><strong>4. 所有数组元素</strong></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;items[*]&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;items[@]&#125;</span><br></code></pre></td></tr></table></figure><p><strong>5. Example:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>items=(aa bb cc dd)<br>echo $&#123;items[0]&#125;<br>echo $&#123;items[1]&#125;<br>echo $&#123;items[2]&#125;<br>echo $&#123;items[@]&#125;<br>items[5]=&quot;ee&quot;<br>echo $&#123;items[9]&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>1.算数运算符</strong></p><ul><li><code>expr $a + $b</code>  加法</li><li><code>expr $a + $b</code> 减法</li><li><code>expr $a \* $b</code> 乘法</li><li><code>expr $a / $b</code> 乘法</li><li><code>expr $a % $b</code> 取模</li><li><code>expr $a == $b</code> 等于</li><li><code>expr $a = $b</code> 不等于</li></ul><p>执行算数运算时需要用反引号 <code>`</code> 或 <code>$()</code>  将运算逻辑括起来 </p><p>example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>b=3<br>a=5<br>var=`expr $a + $b` <br>echo &quot;$a+$b=$var&quot;<br></code></pre></td></tr></table></figure><hr><p><strong>2.关系运算符</strong></p><ul><li><code>-eq</code> 相等</li><li><code>-ne</code> 不等</li><li><code>-gt</code> 大于</li><li><code>-lt</code> 小于</li><li><code>-ge</code> 大于等于</li><li><code>-le</code> 小于等于</li></ul><p>example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/sh<br>b=3<br>a=5<br>if [ $a -eq $b ]; then # -eq 相等<br>echo &quot;$a equals $b&quot;<br>else<br>echo &quot;$a not equals $b&quot;<br>fi<br></code></pre></td></tr></table></figure><hr><p><strong>3.布尔运算</strong></p><ul><li><code>!</code>   NOT</li><li><code>-o</code>  OR</li><li><code>-a</code>  AND</li></ul><hr><p><strong>4.字符串操作符</strong></p><ul><li><code>=</code>   相等</li><li><code>!=</code>  不等</li><li><code>-z</code>  长度为0</li><li><code>-n</code>  长度不为0</li><li><code>str</code> check empty(false)</li></ul><p><strong>example</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> ] ; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta">#</span><span class="bash">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$1 is <span class="hljs-variable">$1</span>&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">else</span></span> <br><span class="hljs-meta">#</span><span class="bash">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$1 is null&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">fi</span></span><br></code></pre></td></tr></table></figure><p>再来介绍下字符串的处理:<br><img src="http://assets.septenary.cn/user/1/image/f962a130-0d00-4fdb-b1a6-363bd9106db3" alt="Shell字符串处理"></p><p>当然，也可以用 <strong>cut</strong> 命令完成字符串操作，可以在终端键入 <code>man cut</code> 查看更多帮助</p><hr><p><strong>5.文件操作</strong></p><table><thead><tr><th align="left">命令</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">是否为块文件</td></tr><tr><td align="left">-c file</td><td align="left">是否为字符文件</td></tr><tr><td align="left">-d file</td><td align="left">是否为目录</td></tr><tr><td align="left">-f file</td><td align="left">文件不是一个目录或特殊文件</td></tr><tr><td align="left">-g file</td><td align="left">文件是否有它设置组ID（SGID)</td></tr><tr><td align="left">-k file</td><td align="left">是否为sticky</td></tr><tr><td align="left">-p file</td><td align="left">是否为named pip</td></tr><tr><td align="left">-t file</td><td align="left">文件的 descriptor 是否对终端 开放</td></tr><tr><td align="left">-u file</td><td align="left">文件是否设置用户ID（SUID)</td></tr><tr><td align="left">-r file</td><td align="left">可读</td></tr><tr><td align="left">-w file</td><td align="left">可写</td></tr><tr><td align="left">-x file</td><td align="left">可执行</td></tr><tr><td align="left">-s file</td><td align="left">文件大小是否不为0</td></tr><tr><td align="left">-e file</td><td align="left">文件是否存在</td></tr></tbody></table><p>example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">!/bin/bash<br>file=/Users/septenary/Desktop/test.sh<br>if [[ -e $file ]]; then<br>echo &quot;exit&quot;<br>else<br>echo &quot;not exit&quot;<br>fi<br></code></pre></td></tr></table></figure><p>也可以用 <strong>test</strong> 命令完成字符串操作，可以在终端键入 <code>man test</code> 查看更多帮助</p><hr><p><strong>6.条件语句</strong><br>上面的一些例子已经看到，条件语句的简单使用:</p><ul><li>条件语句 以 <code>if</code> 开头 倒序 <code>fi</code> 结尾，表示一端代码块</li><li>分支语句 以 <code>case</code> 开头,倒序  <code>esac</code> 结尾，表示一端代码块</li></ul><p>1）<strong>if…fi statement</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [[ condition ]]; then<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>fi<br></code></pre></td></tr></table></figure><p>2）<strong>if…else…fi statement</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [[ condition ]]; then<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>else<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>fi<br></code></pre></td></tr></table></figure><p>3）<strong>if…elif…else…fi statement</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [[ condition ]]; then<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>elif [[ condition ]]; then<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>elif [[ condition ]]; then<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>fi<br></code></pre></td></tr></table></figure><p>4）<strong>switch</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>name=&quot;xiaoming&quot;<br>case &quot;$name&quot; in<br> &quot;xiaogang&quot;) echo &quot;Xiaogang is fat boy.&quot; <br> ;;<br> &quot;xiaohong&quot;) echo &quot;Xiaohong is beautiful girl.&quot; <br> ;;<br> &quot;xiaoming&quot;) echo &quot;Xiaoming is a doubi.&quot; <br> ;;<br>esac<br></code></pre></td></tr></table></figure><hr><p><strong>7. 循环</strong><br>1）while</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">i=0<br>while [ $i -lt 10 ]; do<br>echo -e &quot;$i \c&quot; <br>i=`expr $i + 1`<br>done<br></code></pre></td></tr></table></figure><p>2）for</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in 1 2 3 4 5 6 7; do<br><span class="hljs-meta">#</span><span class="bash">statements</span><br>echo $var<br>done<br></code></pre></td></tr></table></figure><ol start="3"><li>until</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">i=0<br>until [ ! $i -lt 10 ]; do<br>printf &quot;$i \n&quot;<br>i=`expr $i + 1`<br>done<br></code></pre></td></tr></table></figure><ol start="4"><li>select<br>以上文讲到的PS3为例</li></ol><hr><p><strong>8. 循环控制</strong><br>1）break</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var1 in 1 2 3 4 5; do<br>for var2 in 6 7 8 9 10; do<br>if [ $var1 -eq 3 -a $var2 -eq 7 ]; then<br>break 2 # 跳出两层循环<br>else<br>echo &quot;$var1/$var2&quot;<br>fi<br>done<br>done<br></code></pre></td></tr></table></figure><p>2）continue</p><hr><p><strong>9. 元字符 Metacharacters</strong></p><p>元字符: <code># * ? [ ] &#39; &quot; \ $ ; &amp; ( ) | ^ &lt; &gt; </code></p><ol><li>单引号 <code>&#39;&#39;</code>  单引号内所有字符原样输出</li><li>双引号 <code>&quot;&quot;</code> 大部分原样输出，除以下几种</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">   变量引用</span><br>``  执行语句<br>\$  转义，输出 $<br>\&#x27;  转义，输出 &#x27;<br>\&quot;  转义，输出 &quot;<br>\\  转义，输出 \ <br></code></pre></td></tr></table></figure><ol start="3"><li>反斜杠 <code>\</code> 转义字符后的的内容原样输出</li><li>反引号 <code>` xxx `</code> xxx 按命令方式执行</li></ol><hr><p><strong>10.IO重定向</strong></p><p>1）<code>&gt;</code>   output 擦除写入<br>2）<code>&gt;&gt;</code>  output 追加<br>3）<code>&lt;</code>   input 输入<br>4）<code>&lt;&lt;</code>  input here documents</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt; EOF<br>This is a simple lookup program <br>for good (and bad) restaurants<br>in Cape Town.<br>EOF<br></code></pre></td></tr></table></figure><p>5）管道 <code>|</code>    - pipes</p><hr><p><strong>11. shell函数</strong></p><ol><li>函数创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">!/bin/bash<br>week()&#123;<br>echo &quot;A week function.&quot;<br>&#125;<br>week<br></code></pre></td></tr></table></figure><ol start="2"><li>传参(anytype)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">!/bin/bash<br>week()&#123;<br>echo &quot;Today is $1&quot;<br>&#125;<br>week Friday<br></code></pre></td></tr></table></figure><ol start="3"><li>返回值(numeric)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">!/bin/bash<br>week()&#123;<br>echo &quot;Today is $1&quot;<br>return 0<br>&#125;<br>week Friday<br>var=$?<br>echo $var<br></code></pre></td></tr></table></figure><ol start="4"><li><p>Nested function</p></li><li><p>Prompt function</p></li></ol><hr><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li><p>java中执行一个脚本程序</p><ul><li>Runtime.getRuntime().exec(…);</li><li>也可以用Apcache提供的 <strong>Apache Commons exec library</strong>. <a href="https://commons.apache.org/proper/commons-exec/">戳这里</a></li></ul></li><li><p>其他高级命令<br> <strong>find</strong><br> <strong>grep</strong><br> <strong>sed</strong><br> <strong>awk</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再谈LruCache</title>
    <link href="/android-lru-cache/"/>
    <url>/android-lru-cache/</url>
    
    <content type="html"><![CDATA[<p><strong>LRU</strong>算法是一种很常用的内存管理方式，为实现该算法，有两方面要做：</p><ol><li><p><strong>实现最近使用：</strong><br>可以用链表完成，在使用链表时将最近索引到的元素从当前位置移除然后放置在链表头部，这样最久未使用的就被逐渐移到了链表尾部</p></li><li><p><strong>实现快速检索:</strong><br>想要快速的检索到对应元素可以 通过哈希表完成,通过key值查找到对应的value</p></li></ol><p>其实 JDK 中强大的 <strong>Collection</strong> 已经向我们提供了 <code>LinkedHashMap</code> 满足以上两种需求。</p><span id="more"></span><h3 id="LruCache-的使用"><a href="#LruCache-的使用" class="headerlink" title="LruCache 的使用"></a>LruCache 的使用</h3><p>Anroid中对内存的管理，在早期有一种较为常见的缓存实现，用 <strong>软引用</strong> 或 <strong>弱引用</strong> (  <code>SoftReference</code> or <code>WeakReference</code> )存储在 <code>Map</code> 中，然而在 <strong>API 9</strong> 之后，<strong>Dalvik</strong> 的内存回收机制做了改变，非强引用的对象很容易被GC清理。</p><p><code>LruCache</code> 则顺势而生，它的使用场景大部分都是缓存 <code>Bimtap</code> 时用到的，（用以保证内存合理、有效的使用），下面是 <code>LruCache</code> 的简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化LruCache</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initCache</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>    <span class="hljs-comment">// 系统可用内存的1/4</span><br>    <span class="hljs-keyword">int</span> memClass = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();<br>    <span class="hljs-keyword">int</span> cacheSize = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * memClass / <span class="hljs-number">4</span>;<br>    mCache = <span class="hljs-keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sizeOf</span><span class="hljs-params">(String key, Bitmap value)</span> </span>&#123;<br>            <span class="hljs-comment">// 一张位图所占内存大小</span><br>            <span class="hljs-keyword">return</span> value.getRowBytes() * value.getHeight();<br>        &#125;<br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">entryRemoved</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> evicted, String key, Bitmap oldValue, Bitmap newValue)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.entryRemoved(evicted, key, oldValue, newValue);<br>        <span class="hljs-comment">// 回收最久未使用的bitmap</span><br>        <span class="hljs-keyword">if</span> (oldValue != <span class="hljs-keyword">null</span>) &#123;<br>            oldValue.recycle();<br>        &#125; <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//存放数据</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putBitmap</span><span class="hljs-params">(String key,Bitmap bmp)</span></span>&#123;<br>    mCache.put(key,bitmap);<br>&#125;<br><span class="hljs-comment">//访问</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Bitmap <span class="hljs-title">getBitmap</span><span class="hljs-params">(String key)</span></span>&#123;<br>    Bitmap bmp = mCache.get(key);<br>    <span class="hljs-keyword">return</span> bmp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LrcCache-简单分析"><a href="#LrcCache-简单分析" class="headerlink" title="LrcCache 简单分析"></a>LrcCache 简单分析</h3><p>接下来介绍下 <code>LruCache</code> 的几段重要代码<br><code>LruCache</code> 的构造器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LruCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (maxSize &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;maxSize &lt;= 0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>.maxSize = maxSize;<br>    <span class="hljs-comment">// 初始化一个LinkedHashMap实例，所有元素都存在这个map中</span><br>    <span class="hljs-keyword">this</span>.map = <span class="hljs-keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0.75f</span>, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造器中实际上初始化了一个 <code>LinkedHashMap</code> ，接下来所有元素操作(存储和索引)都是基于该 map 进行的</p><p>我们再来看下LruCache的</p><ul><li> get方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">get</span><span class="hljs-params">(K key)</span> </span>&#123;<br>    ......<br>    V mapValue;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-comment">// 从map中获取元素   </span><br>        mapValue = map.get(key);<br>        <span class="hljs-keyword">if</span> (mapValue != <span class="hljs-keyword">null</span>) &#123;<br>            hitCount++;<br>            <span class="hljs-keyword">return</span> mapValue;<br>        &#125;<br>         missCount++;<br>    &#125;<br>    <span class="hljs-comment">// 未命中尝试创建一个value</span><br>    V createdValue = create(key);<br>    ......<br>    <span class="hljs-comment">// 添加到map中</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            createCount++;<br>            mapValue = map.put(key, createdValue);<br>            ......<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>put方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    ......<br>    V previous;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        putCount++;<br>        size += safeSizeOf(key, value);<br>        previous = map.put(key, value);<br>        <span class="hljs-keyword">if</span> (previous != <span class="hljs-keyword">null</span>) &#123;<br>            size -= safeSizeOf(key, previous);<br>        &#125;<br>    &#125;<br>    .....<br>    <span class="hljs-comment">// 重新计算内存占用情况</span><br>    trimToSize(maxSize);<br>    <span class="hljs-keyword">return</span> previous;<br>&#125;<br></code></pre></td></tr></table></figure><p> 其中<code>trimToSize(maxSize) </code>这个方法实现了内存大小的控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重新计算集合元素大小</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trimToSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        K key;<br>        V value;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            ......<br>            <span class="hljs-comment">// 从map中取得最久未被使用的元素</span><br>            Map.Entry&lt;K, V&gt; toEvict = map.eldest();<br>            ......<br>            key = toEvict.getKey();<br>            <span class="hljs-comment">//从map中移除，并重新计算总大小，直到小余maxSize为止</span><br>            map.remove(key);<br>            size -= safeSizeOf(key, value);<br>            ......<br>            &#125;<br>        &#125;<br>    &#125; <br></code></pre></td></tr></table></figure><p>那么问题来了，为什么 执行 <code>get</code> 的时候 <strong>map</strong> 中的元素就被重新排列了， <strong>eldest</strong> 元素又是如何给出的呢， 原因都在 <code>LinkedHashMap</code> </p><h3 id="LruCache-的发动机"><a href="#LruCache-的发动机" class="headerlink" title="LruCache 的发动机"></a>LruCache 的发动机</h3><p><code>LinkedHashMap</code> 实现了 <strong>LRU算法</strong> ， 它是在 <code>LruCache</code> 的构造器中初始化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">this</span>.map = <span class="hljs-keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0.75f</span>, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>所有数据都存储在这个 <strong>map</strong> 中<br>注意初始化  <code>LinkedHashMap</code> 的第三个参数 <code>accessOrder</code> </p><ul><li><em>true</em>  随机访问重新排序</li><li><em>false</em>  插入元素时重新排序</li></ul><p>它决定了如何 控制 <strong>map</strong> 的 <strong>ordering</strong></p><p>在来看下LinkedHashMap的源码，其中声明了一个常量 <strong>header</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">/ **<br>* A dummy entry in the circular linked list of entries in the map.<br>* The first real entry is header.nxt, and the last is header.prv.<br>* If the map is empty, header.nxt == header &amp;&amp; header.prv == header.<br>*/<br><span class="hljs-keyword">transient</span> LinkedEntry&lt;K, V&gt; header;<br></code></pre></td></tr></table></figure><p>这个header记录了链表的首位元素</p><p>我们看下对 <strong>map</strong> 进行操作的几个方法</p><ul><li>添加元素时，<strong>relink</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addNewEntry</span><span class="hljs-params">(K key, V value, <span class="hljs-keyword">int</span> hash, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        LinkedEntry&lt;K, V&gt; header = <span class="hljs-keyword">this</span>.header;<br>        ...<br>        <span class="hljs-comment">// 对header首尾元素的指针重新指向</span><br>        LinkedEntry&lt;K, V&gt; oldTail = header.prv;<br>        LinkedEntry&lt;K, V&gt; newTail = <span class="hljs-keyword">new</span> LinkedEntry&lt;K,V&gt;(<br>                key, value, hash, table[index], header, oldTail);<br>        table[index] = oldTail.nxt = header.prv = newTail;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除元素时，<strong>relink</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postRemove</span><span class="hljs-params">(HashMapEntry&lt;K, V&gt; e)</span> </span>&#123;<br>        <span class="hljs-comment">// 对header首尾元素的指针重新指向</span><br>        LinkedEntry&lt;K, V&gt; le = (LinkedEntry&lt;K, V&gt;) e;<br>        le.prv.nxt = le.nxt;<br>        le.nxt.prv = le.prv;<br>        le.nxt = le.prv = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// Help the GC (for performance)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>访问元素, <code>accessOrder</code> 判断是否调用 <code>makeTail()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        ...<br>        <span class="hljs-keyword">int</span> hash = secondaryHash(key);<br>        HashMapEntry&lt;K, V&gt;[] tab = table;<br>        <span class="hljs-keyword">for</span> (HashMapEntry&lt;K, V&gt; e = tab[hash &amp; (tab.length - <span class="hljs-number">1</span>)];<br>                e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>            K eKey = e.key;<br>            <span class="hljs-keyword">if</span> (eKey == key || (e.hash == hash &amp;&amp; key.equals(eKey))) &#123;<br>                <span class="hljs-keyword">if</span> (accessOrder)<br>                    makeTail((LinkedEntry&lt;K, V&gt;) e);<br>                <span class="hljs-keyword">return</span> e.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>就是这个 <code>makeTail()</code> 方法控制了从 <strong>map</strong> 中访问数据时 <code>header</code> 的指针 被重置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>/ **<br>  * Relinks the given entry to the tail of the list. Under access ordering,<br>  * <span class="hljs-keyword">this</span> method is invoked whenever the value of a  pre-existing entry is<br>  * read by Map.get or modified by Map.put.<br>  */<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeTail</span><span class="hljs-params">(LinkedEntry&lt;K, V&gt; e)</span> </span>&#123;<br>        <span class="hljs-comment">// Unlink e</span><br>        e.prv.nxt = e.nxt;<br>        e.nxt.prv = e.prv;<br>        <span class="hljs-comment">// Relink e as tail</span><br>        LinkedEntry&lt;K, V&gt; header = <span class="hljs-keyword">this</span>.header;<br>        LinkedEntry&lt;K, V&gt; oldTail = header.prv;<br>        e.nxt = header;<br>        e.prv = oldTail;<br>        oldTail.nxt = header.prv = e;<br>        modCount++;<br>    &#125;<br></code></pre></td></tr></table></figure><p>对 <strong>map</strong> 的所有操作都会改变 <code>header</code> 的指针，这样我们就可以知道 <strong>eldest</strong> 的那个元素是谁了, 这也证明了 <code>LruCache</code> 的 <strong>LRU</strong> 算法实现 由 <code>LinkedHashMap</code> 完成</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LruCache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android:onClick 怎样做到监听点击事件的</title>
    <link href="/android-on-click-xml/"/>
    <url>/android-on-click-xml/</url>
    
    <content type="html"><![CDATA[<p><code>android:onClick</code> 是定义在 <strong>attrs.xml</strong> 中的一个属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Name of the method in this View&#x27;s context to invoke when the view is</span><br><span class="hljs-comment">clicked. This name must correspond to a public method that takes</span><br><span class="hljs-comment">exactly one parameter of type View. For instance, if you specify</span><br><span class="hljs-comment">&lt;code&gt;android:onClick=&quot;sayHello&quot;&lt;/code&gt;, you must declare a</span><br><span class="hljs-comment">&lt;code&gt;public void sayHello(View v)&lt;/code&gt; method of your context</span><br><span class="hljs-comment">(typically, your Activity). --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;onClick&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;string&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注释告诉我们，它的命名规则必须是，在 <code>Context</code> 中的 <code>public</code> 方法，并且必须传递一个 <code>View</code> 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(View v)</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>那么完成监听onClick事件实现在哪里呢，我们需要考虑到以下两点</p><ol><li>这个属性在代码中是由 <code>R.styleable.View_onClick</code> 找到的，而通常把属性设置到代码中都是 View 的构造函数完成的</li><li>设置 View 的点击监听通常是调用 <code>setOnClickListener()</code> 方法</li></ol><span id="more"></span><p>查看 View 的源代码(API23)，在其构造方法中，有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> R.styleable.View_onClick:<br><span class="hljs-keyword">final</span> String handlerName = a.getString(attr);<br><span class="hljs-keyword">if</span> (handlerName != <span class="hljs-keyword">null</span>) &#123;<br>setOnClickListener(<span class="hljs-keyword">new</span> DeclaredOnClickListener(<span class="hljs-keyword">this</span>, handlerName));<br>&#125;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>果然是设置了一个特殊的监听器 <code>DeclaredOnClickListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An implementation of OnClickListener that attempts to lazily load a</span><br><span class="hljs-comment"> * named click handling method from a parent or ancestor context.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeclaredOnClickListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OnClickListener</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> View mHostView;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String mMethodName;<br><br><span class="hljs-keyword">private</span> Method mMethod;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeclaredOnClickListener</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View hostView, <span class="hljs-meta">@NonNull</span> String methodName)</span> </span>&#123;<br>mHostView = hostView;<br>mMethodName = methodName;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View v)</span> </span>&#123;<br><span class="hljs-comment">// 反射找到方法</span><br><span class="hljs-keyword">if</span> (mMethod == <span class="hljs-keyword">null</span>) &#123;<br>mMethod = resolveMethod(mHostView.getContext(), mMethodName);<br>&#125;<br><span class="hljs-comment">// 执行方法</span><br><span class="hljs-keyword">try</span> &#123;<br>mMethod.invoke(mHostView.getContext(), v);<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br> ...<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@NonNull</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Method <span class="hljs-title">resolveMethod</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context, <span class="hljs-meta">@NonNull</span> String name)</span> </span>&#123;<br>...<br><span class="hljs-keyword">if</span> (!context.isRestricted()) &#123;<br><span class="hljs-keyword">return</span> context.getClass().getMethod(mMethodName, View.class);<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br><span class="hljs-comment">// Failed to find method, keep searching up the hierarchy.</span><br>&#125;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过方法名 <code>mMethodName</code> 和参数 <code>View.class</code> 反射找到对应在 <strong>Context</strong> 中的方法，然后调用 <code>Method</code> 的 <code>invoke</code> 方法来完成整个监听过程</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android path-animation</title>
    <link href="/android-path-anim/"/>
    <url>/android-path-anim/</url>
    
    <content type="html"><![CDATA[<p><code>PathAnimation</code>  路径动画是指将视图节点沿着指定路径执行动画</p><hr><h1 id="Android-5-1-以后对PathAnimation的支持"><a href="#Android-5-1-以后对PathAnimation的支持" class="headerlink" title="Android 5.1 以后对PathAnimation的支持"></a>Android 5.1 以后对<code>PathAnimation</code>的支持</h1><p>在 <strong>API 21</strong> 之后<code>ObjectAnimator</code> 添加了 <strong>Path animation</strong> 的支持，下面是 <strong>API 21</strong> 中 **PathAnimation Demo **的完整路径</p><p><em>~/sdk/samples/android-22/legacy/ApiDemos/src/com/example/android/apis/animation/PathAnimations.java</em></p><span id="more"></span><p> 我们来看一下这个demo中，<code>ObjectAnimator</code> 提供的哪些方法来实现路径动画</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectAnimator.ofFloat(view, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, path);<br></code></pre></td></tr></table></figure><p>这个 <code>Animator</code> 的每一帧动画都会重新计算 <code>path</code> 对应时间点的 <code>position</code>,<br>然后调用 <code>view</code> 的 <code>setX()</code> 和 <code>setY()</code> 方法来更新 <code>view</code> 的位置</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectAnimator.ofFloat(view, View.X, View.Y, path);<br></code></pre></td></tr></table></figure><p>同上，但是传入的的参数换成了 <code>View.X</code> 和 <code>View.Y</code>，这两个对象都是 <code>Properties</code>  类在 <code>View</code> 类中的声明的静态对象</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// view中需要实现setCoordinates(int x,int y)这个方法</span><br>ObjectAnimator.ofMultiInt(view, <span class="hljs-string">&quot;setCoordinates&quot;</span>, path); <br></code></pre></td></tr></table></figure><p>这个 <code>Animator</code> 的每一帧动画会返回两个 <code>int</code> 值 (某一时间节点对应的 <code>position</code> )，然后调用 <code>setCoordinates</code> 方法改变视图节点的位置</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// view中需要实现setCoordinatesF(float x,float y)这个方法</span><br>ObjectAnimator.ofMultiFloat(view, <span class="hljs-string">&quot;setCoordinatesF&quot;</span>, path); <br></code></pre></td></tr></table></figure><p>同上，不过得到的值是 <code>Float</code> 类型的，计算每一帧节点位置会更精确</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// view中需要实现setPoint(PointF point)这个方法</span><br>ObjectAnimator.ofObject(view, <span class="hljs-string">&quot;point&quot;</span>, <span class="hljs-keyword">null</span>, path);<br></code></pre></td></tr></table></figure><p><code>Animator</code> 的每帧动画都会重新设置 <code>PointF</code> 的值</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectAnimator.ofObject(view, POINT_PROPERTY, <span class="hljs-keyword">new</span> PointFToPointConverter(), path);<br></code></pre></td></tr></table></figure><p>这个方式的实现略繁琐，可以看下详细代码</p><hr><h1 id="Android-5-1-之前该如何实现-PathAnimation"><a href="#Android-5-1-之前该如何实现-PathAnimation" class="headerlink" title="Android 5.1 之前该如何实现 PathAnimation"></a>Android 5.1 之前该如何实现 <code>PathAnimation</code></h1><p>旧版 <strong>SDK</strong> 并没有提供丰富的 <strong>API</strong> 供我们调用，分析上面所讲各个实现方法，都是按照每一帧重新计算某一时间节点对应   <code>path</code> 的 <code>position</code>，万变不离其宗，看来只要知道如何计算 <code>path</code> 的位置就可以搞定了</p><p>这里我们需要知道两个类的使用：</p><ul><li>监听Animator  <code>AnimatorUpdateListener</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ValueAnimator aimator = ValueAnimator.ofFloat(<span class="hljs-number">0</span>, <span class="hljs-number">1f</span>);<br>aimator.setDuration(<span class="hljs-number">250</span>);<br>aimator.addUpdateListener( <span class="hljs-keyword">new</span> AnimatorUpdateListener() &#123;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAnimationUpdate</span><span class="hljs-params">(ValueAnimator animation)</span> </span>&#123;<br>          <span class="hljs-keyword">float</span> interpolatedTime = (Float) animation.getAnimatedValue();<br>     &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><ul><li> Path 测量 <code>PathMeasure</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">PathMeasure pathMeasure = <span class="hljs-keyword">new</span> PathMeasure(path,<span class="hljs-keyword">false</span>);<br><span class="hljs-comment">// positon 记录 x,y 的坐标</span><br><span class="hljs-keyword">float</span>[] position = <span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[<span class="hljs-number">2</span>];<br>pathMeasure(pathMeasure.getLength() * interpolatedTime, position, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure></li></ul><ol><li><code>AnimatorUpdateListener</code>   监听每一帧时间节点的 <code>interpolatedTime</code></li><li><code>PathMeasure</code>   通过 <code>interpolatedTime</code>  计算时间节点对应的<code>position</code><br>有了<code>position</code>，就可以改变每一帧视图节点所在的位置了</li></ol><p>简单实现的 demo ，<a href="https://github.com/oksep/PathAnimation">戳这里</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
